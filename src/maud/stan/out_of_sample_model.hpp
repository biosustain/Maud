
// Code generated by stanc v2.29.2
#include <stan/model/model_header.hpp>
namespace out_of_sample_model_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 395> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 74, column 2 to column 18)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 75, column 2 to column 38)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 76, column 2 to column 24)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 77, column 2 to column 44)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 78, column 2 to column 48)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 79, column 2 to column 38)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 80, column 2 to column 22)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 84, column 2 to column 50)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 85, column 2 to column 46)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 86, column 2 to column 58)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 87, column 2 to column 59)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 88, column 2 to column 51)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 89, column 2 to column 44)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 90, column 2 to column 55)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 91, column 2 to column 48)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 92, column 2 to column 47)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 93, column 2 to column 53)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 94, column 2 to column 51)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 97, column 4 to column 75)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 98, column 4 to column 95)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 99, column 4 to column 113)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 100, column 4 to column 101)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 96, column 27 to line 101, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 96, column 2 to line 101, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 104, column 4 to column 40)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 105, column 11 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 105, column 4 to column 61)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 106, column 11 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 106, column 4 to column 66)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 107, column 20 to column 38)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 107, column 4 to column 54)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 108, column 4 to column 69)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 109, column 4 to column 78)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 111, column 12 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 111, column 6 to line 112, column 72)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 113, column 6 to column 79)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 110, column 29 to line 114, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 110, column 4 to line 114, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 116, column 12 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 116, column 6 to line 117, column 90)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 118, column 6 to column 77)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 115, column 29 to line 119, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 115, column 4 to line 119, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 120, column 4 to line 163, column 40)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 164, column 4 to column 48)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 165, column 4 to column 52)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 166, column 11 to column 17)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 166, column 4 to line 199, column 67)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 201, column 6 to column 51)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 200, column 23 to line 202, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 200, column 4 to line 202, column 5)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 103, column 27 to line 203, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 103, column 2 to line 203, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 205, column 4 to line 219, column 63)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 220, column 4 to line 227, column 46)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 228, column 4 to line 237, column 45)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 238, column 4 to line 243, column 55)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 244, column 4 to column 70)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 204, column 27 to line 245, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 204, column 2 to line 245, column 3)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 4, column 2 to column 21)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 5, column 2 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 6, column 2 to column 27)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 7, column 2 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 8, column 2 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 9, column 2 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 10, column 2 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 11, column 2 to column 24)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 12, column 2 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 13, column 2 to column 22)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 14, column 2 to column 27)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 15, column 2 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 16, column 2 to column 33)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 17, column 2 to column 40)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 18, column 2 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 19, column 2 to column 33)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 20, column 2 to column 42)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 22, column 11 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 22, column 32 to column 49)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 22, column 2 to column 68)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 23, column 11 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 23, column 32 to column 44)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 23, column 2 to column 69)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 24, column 11 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 24, column 32 to column 40)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 24, column 2 to column 61)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 25, column 11 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 25, column 32 to column 39)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 25, column 2 to column 54)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 27, column 9 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 27, column 16 to column 22)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 27, column 2 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 28, column 8 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 28, column 2 to column 69)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 29, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 29, column 2 to column 65)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 30, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 30, column 2 to column 47)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 31, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 31, column 2 to column 59)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 32, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 32, column 2 to column 58)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 33, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 33, column 2 to column 57)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 34, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 34, column 2 to column 63)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 35, column 8 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 35, column 2 to column 57)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 36, column 8 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 36, column 2 to column 60)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 37, column 8 to column 25)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 37, column 2 to column 69)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 38, column 8 to column 18)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 38, column 2 to column 41)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 39, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 39, column 2 to column 41)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 40, column 8 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 40, column 2 to column 43)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 41, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 41, column 2 to column 43)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 42, column 8 to column 18)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 42, column 2 to column 47)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 43, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 43, column 2 to column 48)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 44, column 8 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 44, column 2 to column 49)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 45, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 45, column 2 to column 48)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 46, column 8 to column 32)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 46, column 2 to column 49)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 47, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 47, column 2 to column 36)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 48, column 8 to column 19)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 48, column 2 to column 43)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 49, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 49, column 2 to column 43)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 50, column 8 to column 25)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 50, column 2 to column 55)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 51, column 8 to column 14)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 51, column 2 to column 49)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 52, column 8 to column 13)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 52, column 2 to column 58)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 53, column 9 to column 15)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 53, column 2 to column 37)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 54, column 8 to column 25)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 54, column 2 to column 76)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 55, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 55, column 2 to column 52)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 56, column 8 to column 34)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 56, column 2 to column 103)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 57, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 57, column 2 to column 61)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 58, column 18 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 58, column 2 to column 37)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 60, column 35 to column 47)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 60, column 18 to column 23)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 60, column 2 to column 49)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 61, column 2 to column 15)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 62, column 2 to column 15)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 63, column 2 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 64, column 2 to column 34)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 65, column 2 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 68, column 2 to column 24)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 74, column 9 to column 13)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 75, column 9 to column 33)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 76, column 9 to column 17)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 77, column 9 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 78, column 9 to column 28)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 79, column 9 to column 26)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 80, column 9 to column 15)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 84, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 84, column 38 to column 43)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 85, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 85, column 29 to column 39)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 86, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 86, column 29 to column 46)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 87, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 87, column 29 to column 41)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 88, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 88, column 29 to column 37)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 89, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 89, column 29 to column 36)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 90, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 90, column 29 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 91, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 91, column 29 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 92, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 92, column 29 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 93, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 93, column 29 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 94, column 8 to column 20)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 94, column 29 to column 35)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 8, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 2, column 40, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 17, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 11, column 44, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 26, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 26, column 27, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 26, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 28, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 27, column 25, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 27, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 30, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 20, column 45, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 39, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 39, column 27, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 39, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 41, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 40, column 25, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 40, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 43, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 33, column 49, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 51, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 52, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 53, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 53, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 54, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 46, column 84, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 62, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 63, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 64, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 64, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 65, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 57, column 85, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 70, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 70, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 71, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 72, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 73, column 31, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 73, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 74, column 31, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 74, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 75, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 68, column 82, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 79, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 78, column 42, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 90, column 2, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 82, column 59, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 101, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 102, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 102, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 105, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 106, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 104, column 28, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 104, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 108, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 109, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 109, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 110, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 110, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 111, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 103, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 103, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 113, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 100, column 46, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 132, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 133, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 133, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 136, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 137, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 135, column 28, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 135, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 139, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 140, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 141, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 142, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 142, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 143, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 143, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 144, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 144, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 145, column 13, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 145, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 146, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 148, column 14, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 148, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 149, column 15, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 149, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 150, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 147, column 28, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 147, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 153, column 14, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 153, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 154, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 152, column 19, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 152, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 134, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 134, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 157, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 130, column 51, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 161, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 162, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 163, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 163, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 164, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 164, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 169, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 167, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 166, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 165, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 165, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 171, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 160, column 78, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 185, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 186, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 186, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 188, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 190, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 189, column 27, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 189, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 192, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 193, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 194, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 195, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 196, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 201, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 200, column 13, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 198, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 197, column 43, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 197, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 204, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 187, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 187, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 206, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 184, column 3, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 215, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 216, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 216, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 218, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 220, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 219, column 22, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 219, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 222, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 223, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 224, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 225, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 230, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 229, column 12, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 227, column 10, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 226, column 33, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 226, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 232, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 217, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 217, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 235, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 214, column 45, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 244, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 245, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 245, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 248, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 249, column 17, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 249, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 250, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 247, column 28, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 247, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 246, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 246, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 253, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 243, column 43, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 257, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 258, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 258, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 261, column 8, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 260, column 28, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 260, column 6, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 259, column 23, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 259, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 264, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 256, column 92, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 301, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 302, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 302, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 303, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 303, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 304, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 304, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 319, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 319, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 327, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 327, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 337, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 337, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 343, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 343, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 349, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 300, column 56, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 390, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 390, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 391, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 392, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 393, column 11, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 393, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 427, column 4, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)",
 " (in '/Users/tedgro/Code/Maud/src/maud/stan/functions.stan', line 389, column 55, included from\n'/Users/tedgro/Code/Maud/src/maud/stan/out_of_sample_model.stan', line 1, column 0)"};

struct extract_ragged_functor__ {
  std::vector<int>
  operator()(const std::vector<int>& ix_long,
             const std::vector<std::vector<int>>& bounds, const int& i,
             std::ostream* pstream__) const;
};
struct measure_ragged_functor__ {
  int
  operator()(const std::vector<std::vector<int>>& bounds, const int& i,
             std::ostream* pstream__) const;
};
struct get_allostery_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>>, -1, 1>
  operator()(const T0__& conc, const T1__& free_enzyme_ratio, const T2__& tc,
             const T3__& dc, const T4__& subunits,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type,
             const std::vector<int>& allostery_mic,
             const std::vector<int>& edge_to_tc, std::ostream* pstream__) const;
};
struct get_edge_flux_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            typename T4__, typename T5__, typename T6__, typename T7__,
            typename T8__, typename T9__, typename T10__, typename T11__,
            typename T12__, stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr,
            stan::require_col_vector_t<T4__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr,
            stan::require_col_vector_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr,
            stan::require_col_vector_t<T8__>* = nullptr,
            stan::require_col_vector_t<T9__>* = nullptr,
            stan::require_col_vector_t<T10__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T11__>* = nullptr,
            stan::require_col_vector_t<T12__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                       stan::value_type_t<T4__>,
                       stan::promote_args_t<stan::value_type_t<T5__>,
                                            stan::value_type_t<T6__>,
                                            stan::value_type_t<T7__>,
                                            stan::value_type_t<T8__>,
                                            stan::value_type_t<T9__>,
                                            stan::promote_args_t<stan::value_type_t<T10__>,
                                                                 stan::value_type_t<T11__>,
                                                                 stan::value_type_t<T12__>>>>, -1, 1>
  operator()(const T0__& conc, const T1__& enzyme, const T2__& dgr,
             const T3__& kcat, const T4__& km, const T5__& ki, const T6__& tc,
             const T7__& dc, const T8__& kcat_phos, const T9__& conc_phos,
             const T10__& drain, const T11__& S, const T12__& subunits,
             const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme,
             const std::vector<int>& edge_to_drain,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type,
             const std::vector<int>& allostery_mic,
             const std::vector<int>& edge_to_tc,
             const std::vector<int>& phos_ix_long,
             const std::vector<std::vector<int>>& phos_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             std::ostream* pstream__) const;
};
struct get_reversibility_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>>, -1, 1>
  operator()(const T0__& dgr, const T1__& S, const T2__& conc,
             const std::vector<int>& edge_type, std::ostream* pstream__) const;
};
struct get_free_enzyme_ratio_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T3__>>, -1, 1>
  operator()(const T0__& conc, const T1__& S, const T2__& km, const T3__& ki,
             const std::vector<int>& edge_type,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             std::ostream* pstream__) const;
};
struct get_phosphorylation_functor__ {
  template <typename T0__, typename T1__, typename T5__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T5__>>, -1, 1>
  operator()(const T0__& kcat_phos, const T1__& conc_phos,
             const std::vector<int>& phos_ix_long,
             const std::vector<std::vector<int>>& phos_ix_bounds,
             const std::vector<int>& phos_type, const T5__& subunits,
             std::ostream* pstream__) const;
};
struct unz_2d_functor__ {
  template <typename T0__, typename T1__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
  operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
             const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
             std::ostream* pstream__) const;
};
struct check_steady_state_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T3__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_stan_scalar_t<T2__>* = nullptr,
            stan::require_stan_scalar_t<T3__>* = nullptr>
  int
  operator()(const T0__& Sv, const T1__& conc, const T2__& abs_thresh,
             const T3__& rel_thresh, std::ostream* pstream__) const;
};
struct get_vmax_by_edge_functor__ {
  template <typename T0__, typename T1__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  operator()(const T0__& enzyme, const T1__& kcat,
             const std::vector<int>& edge_to_enzyme,
             const std::vector<int>& edge_type, std::ostream* pstream__) const;
};
struct get_dgrs_functor__ {
  template <typename T0__, typename T1__, typename T3__,
            stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T3__>>, -1, 1>
  operator()(const T0__& S, const T1__& dgf,
             const std::vector<int>& mic_to_met,
             const T3__& water_stoichiometry, std::ostream* pstream__) const;
};
struct get_saturation_functor__ {
  template <typename T0__, typename T1__, typename T2__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>>, -1, 1>
  operator()(const T0__& conc, const T1__& km, const T2__& free_enzyme_ratio,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& edge_type, std::ostream* pstream__) const;
};
struct dbalanced_dt_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            typename T10__, typename T11__, typename T12__, typename T13__,
            typename T14__, typename T15__, typename T16__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr,
            stan::require_col_vector_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr,
            stan::require_col_vector_t<T8__>* = nullptr,
            stan::require_col_vector_t<T9__>* = nullptr,
            stan::require_col_vector_t<T10__>* = nullptr,
            stan::require_col_vector_t<T11__>* = nullptr,
            stan::require_col_vector_t<T12__>* = nullptr,
            stan::require_col_vector_t<T13__>* = nullptr,
            stan::require_col_vector_t<T14__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T15__>* = nullptr,
            stan::require_col_vector_t<T16__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T5__>,
                       stan::value_type_t<T6__>,
                       stan::promote_args_t<stan::value_type_t<T7__>,
                                            stan::value_type_t<T8__>,
                                            stan::value_type_t<T9__>,
                                            stan::value_type_t<T10__>,
                                            stan::value_type_t<T11__>,
                                            stan::promote_args_t<stan::value_type_t<T12__>,
                                                                 stan::value_type_t<T13__>,
                                                                 stan::value_type_t<T14__>,
                                                                 stan::value_type_t<T15__>,
                                                                 stan::value_type_t<T16__>>>>, -1, 1>
  operator()(const T0__& time, const T1__& current_balanced,
             const T2__& unbalanced, const std::vector<int>& balanced_ix,
             const std::vector<int>& unbalanced_ix, const T5__& enzyme,
             const T6__& dgr, const T7__& kcat, const T8__& km, const T9__& ki,
             const T10__& tc, const T11__& dc, const T12__& kcat_phos,
             const T13__& conc_phos, const T14__& drain, const T15__& S,
             const T16__& subunits, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme,
             const std::vector<int>& edge_to_drain,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type,
             const std::vector<int>& allostery_mic,
             const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             std::ostream* pstream__) const;
};
struct unz_log_2d_functor__ {
  template <typename T0__, typename T1__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_stan_scalar_t<T1__>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
  operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
             const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
             std::ostream* pstream__) const;
};
struct dbalanced_dt_odefunctor__ {
  template <typename T0__, typename T1__, typename T2__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            typename T10__, typename T11__, typename T12__, typename T13__,
            typename T14__, typename T15__, typename T16__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T2__>* = nullptr,
            stan::require_col_vector_t<T5__>* = nullptr,
            stan::require_col_vector_t<T6__>* = nullptr,
            stan::require_col_vector_t<T7__>* = nullptr,
            stan::require_col_vector_t<T8__>* = nullptr,
            stan::require_col_vector_t<T9__>* = nullptr,
            stan::require_col_vector_t<T10__>* = nullptr,
            stan::require_col_vector_t<T11__>* = nullptr,
            stan::require_col_vector_t<T12__>* = nullptr,
            stan::require_col_vector_t<T13__>* = nullptr,
            stan::require_col_vector_t<T14__>* = nullptr,
            stan::require_eigen_matrix_dynamic_t<T15__>* = nullptr,
            stan::require_col_vector_t<T16__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                       stan::value_type_t<T2__>, stan::value_type_t<T5__>,
                       stan::value_type_t<T6__>,
                       stan::promote_args_t<stan::value_type_t<T7__>,
                                            stan::value_type_t<T8__>,
                                            stan::value_type_t<T9__>,
                                            stan::value_type_t<T10__>,
                                            stan::value_type_t<T11__>,
                                            stan::promote_args_t<stan::value_type_t<T12__>,
                                                                 stan::value_type_t<T13__>,
                                                                 stan::value_type_t<T14__>,
                                                                 stan::value_type_t<T15__>,
                                                                 stan::value_type_t<T16__>>>>, -1, 1>
  operator()(const T0__& time, const T1__& current_balanced,
             std::ostream* pstream__, const T2__& unbalanced,
             const std::vector<int>& balanced_ix,
             const std::vector<int>& unbalanced_ix, const T5__& enzyme,
             const T6__& dgr, const T7__& kcat, const T8__& km, const T9__& ki,
             const T10__& tc, const T11__& dc, const T12__& kcat_phos,
             const T13__& conc_phos, const T14__& drain, const T15__& S,
             const T16__& subunits, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme,
             const std::vector<int>& edge_to_drain,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type,
             const std::vector<int>& allostery_mic,
             const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type) const;
};
struct unz_log_1d_functor__ {
  template <typename T0__, typename T1__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
  operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
             const T1__& z, std::ostream* pstream__) const;
};
struct get_drain_by_edge_functor__ {
  template <typename T0__, typename T1__,
            stan::require_col_vector_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  operator()(const T0__& drain, const T1__& conc,
             const std::vector<int>& edge_to_drain,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& edge_type, std::ostream* pstream__) const;
};
struct get_keq_functor__ {
  template <typename T0__, typename T1__, typename T3__,
            stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr,
            stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                       stan::value_type_t<T3__>>, -1, 1>
  operator()(const T0__& S, const T1__& dgf,
             const std::vector<int>& mic_to_met,
             const T3__& water_stoichiometry, std::ostream* pstream__) const;
};
struct unz_1d_functor__ {
  template <typename T0__, typename T1__,
            stan::require_stan_scalar_t<T0__>* = nullptr,
            stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
  operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
             const T1__& z, std::ostream* pstream__) const;
};

template <typename T0__, typename T1__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
  unz_1d(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
         const T1__& z_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::value_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& z = stan::math::to_ref(z_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 193;
      return stan::math::add(
               stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(1)),
               stan::math::elt_multiply(
                 stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(2)),
                 z));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
  unz_log_1d(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
             const T1__& z_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::value_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& z = stan::math::to_ref(z_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 195;
      return stan::math::exp(
               stan::math::add(
                 stan::math::log(
                   stan::model::rvalue(mnsd, "mnsd",
                     stan::model::index_uni(1))),
                 stan::math::elt_multiply(
                   stan::model::rvalue(mnsd, "mnsd",
                     stan::model::index_uni(2)), z)));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
  unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
         const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
         std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 197;
      stan::math::validate_non_negative_index("out", "size(z)",
                                              stan::math::size(z));
      current_statement__ = 198;
      stan::math::validate_non_negative_index("out", "rows(z[1])",
                                              stan::math::rows(
                                                stan::model::rvalue(z, "z",
                                                  stan::model::index_uni(1))));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> out =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(
           stan::math::size(z), 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             stan::math::rows(
               stan::model::rvalue(z, "z", stan::model::index_uni(1))),
             DUMMY_VAR__));
      current_statement__ = 202;
      for (int ex = 1; ex <= stan::math::size(z); ++ex) {
        current_statement__ = 200;
        stan::model::assign(out,
          unz_1d(
            stan::model::rvalue(mnsd, "mnsd",
              stan::model::index_omni(), stan::model::index_uni(ex)),
            stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
          "assigning variable out", stan::model::index_uni(ex));
      }
      current_statement__ = 203;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_stan_scalar_t<T1__>* = nullptr>
  std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
  unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
             const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
             std::ostream* pstream__) {
    using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 205;
      stan::math::validate_non_negative_index("out", "size(z)",
                                              stan::math::size(z));
      current_statement__ = 206;
      stan::math::validate_non_negative_index("out", "rows(z[1])",
                                              stan::math::rows(
                                                stan::model::rvalue(z, "z",
                                                  stan::model::index_uni(1))));
      std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>> out =
         std::vector<Eigen::Matrix<local_scalar_t__, -1, 1>>(
           stan::math::size(z), 
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
             stan::math::rows(
               stan::model::rvalue(z, "z", stan::model::index_uni(1))),
             DUMMY_VAR__));
      current_statement__ = 210;
      for (int ex = 1; ex <= stan::math::size(z); ++ex) {
        current_statement__ = 208;
        stan::model::assign(out,
          unz_log_1d(
            stan::model::rvalue(mnsd, "mnsd",
              stan::model::index_omni(), stan::model::index_uni(ex)),
            stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
          "assigning variable out", stan::model::index_uni(ex));
      }
      current_statement__ = 211;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T3__,
          stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T3__>>, -1, 1>
  get_keq(const T0__& S_arg__, const T1__& dgf_arg__,
          const std::vector<int>& mic_to_met,
          const T3__& water_stoichiometry_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& dgf = stan::math::to_ref(dgf_arg__);
    const auto& water_stoichiometry = stan::math::to_ref(water_stoichiometry_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ minus_RT = DUMMY_VAR__;
      current_statement__ = 213;
      minus_RT = (-0.008314 * 298.15);
      local_scalar_t__ dgf_water = DUMMY_VAR__;
      current_statement__ = 214;
      dgf_water = -150.9;
      current_statement__ = 215;
      stan::math::validate_non_negative_index("delta_g", "cols(S)",
                                              stan::math::cols(S));
      Eigen::Matrix<local_scalar_t__, -1, 1> delta_g =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::cols(S), DUMMY_VAR__);
      current_statement__ = 216;
      stan::model::assign(delta_g,
        stan::math::add(
          stan::math::multiply(stan::math::transpose(S),
            stan::model::rvalue(dgf, "dgf",
              stan::model::index_multi(mic_to_met))),
          stan::math::multiply(water_stoichiometry, dgf_water)),
        "assigning variable delta_g");
      current_statement__ = 217;
      return stan::math::exp(stan::math::divide(delta_g, minus_RT));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T3__,
          stan::require_eigen_matrix_dynamic_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T3__>>, -1, 1>
  get_dgrs(const T0__& S_arg__, const T1__& dgf_arg__,
           const std::vector<int>& mic_to_met,
           const T3__& water_stoichiometry_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& dgf = stan::math::to_ref(dgf_arg__);
    const auto& water_stoichiometry = stan::math::to_ref(water_stoichiometry_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ minus_RT = DUMMY_VAR__;
      current_statement__ = 219;
      minus_RT = (-0.008314 * 298.15);
      local_scalar_t__ dgf_water = DUMMY_VAR__;
      current_statement__ = 220;
      dgf_water = -150.9;
      current_statement__ = 221;
      stan::math::validate_non_negative_index("dgrs", "cols(S)",
                                              stan::math::cols(S));
      Eigen::Matrix<local_scalar_t__, -1, 1> dgrs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::cols(S), DUMMY_VAR__);
      current_statement__ = 222;
      stan::model::assign(dgrs,
        stan::math::add(
          stan::math::multiply(stan::math::transpose(S),
            stan::model::rvalue(dgf, "dgf",
              stan::model::index_multi(mic_to_met))),
          stan::math::multiply(water_stoichiometry, dgf_water)),
        "assigning variable dgrs");
      current_statement__ = 223;
      return dgrs;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_stan_scalar_t<T2__>* = nullptr,
          stan::require_stan_scalar_t<T3__>* = nullptr> int
  check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__,
                     const T2__& abs_thresh, const T3__& rel_thresh,
                     std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>, T2__, T3__>;
    int current_statement__ = 0; 
    const auto& Sv = stan::math::to_ref(Sv_arg__);
    const auto& conc = stan::math::to_ref(conc_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 225;
      stan::math::validate_non_negative_index("rel_thresh_per_conc",
                                              "rows(conc)",
                                              stan::math::rows(conc));
      Eigen::Matrix<local_scalar_t__, -1, 1> rel_thresh_per_conc =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::rows(conc), DUMMY_VAR__);
      current_statement__ = 226;
      stan::model::assign(rel_thresh_per_conc,
        stan::math::multiply(conc, rel_thresh),
        "assigning variable rel_thresh_per_conc");
      int relative_check_failed = std::numeric_limits<int>::min();
      current_statement__ = 227;
      relative_check_failed = stan::math::logical_gt(
                                stan::math::max(
                                  stan::math::subtract(stan::math::fabs(Sv),
                                    rel_thresh_per_conc)), 0);
      int absolute_check_failed = std::numeric_limits<int>::min();
      current_statement__ = 228;
      absolute_check_failed = stan::math::logical_gt(
                                stan::math::max(stan::math::fabs(Sv)),
                                abs_thresh);
      current_statement__ = 230;
      if (relative_check_failed) {
        current_statement__ = 229;
        if (pstream__) {
          stan::math::stan_print(pstream__, "Sv ");
          stan::math::stan_print(pstream__, Sv);
          stan::math::stan_print(pstream__, " not within ");
          stan::math::stan_print(pstream__, rel_thresh_per_conc);
          stan::math::stan_print(pstream__, " of zero.");
          stan::math::stan_print(pstream__, "\n");
        }
      } 
      current_statement__ = 232;
      if (absolute_check_failed) {
        current_statement__ = 231;
        if (pstream__) {
          stan::math::stan_print(pstream__, "Sv ");
          stan::math::stan_print(pstream__, Sv);
          stan::math::stan_print(pstream__, " not within ");
          stan::math::stan_print(pstream__, abs_thresh);
          stan::math::stan_print(pstream__, " of zero.");
          stan::math::stan_print(pstream__, "\n");
        }
      } 
      current_statement__ = 233;
      return ((stan::math::primitive_value(relative_check_failed) ||
                stan::math::primitive_value(absolute_check_failed)) ? 0 : 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
int
  measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
                 std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 235;
      return ((stan::model::rvalue(bounds, "bounds",
                 stan::model::index_uni(i), stan::model::index_uni(2)) -
                stan::model::rvalue(bounds, "bounds",
                  stan::model::index_uni(i), stan::model::index_uni(1))) + 1);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
std::vector<int>
  extract_ragged(const std::vector<int>& ix_long,
                 const std::vector<std::vector<int>>& bounds, const int& i,
                 std::ostream* pstream__) {
    using local_scalar_t__ = double;
    int current_statement__ = 0; 
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 237;
      return stan::model::rvalue(ix_long, "ix_long",
               stan::model::index_min_max(stan::model::rvalue(bounds,
                                            "bounds",
                                            stan::model::index_uni(i),
                                              stan::model::index_uni(1)), 
                 stan::model::rvalue(bounds, "bounds",
                   stan::model::index_uni(i), stan::model::index_uni(2))));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, 1>
  get_saturation(const T0__& conc_arg__, const T1__& km_arg__,
                 const T2__& free_enzyme_ratio_arg__,
                 const std::vector<int>& sub_km_ix_by_edge_long,
                 const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                 const std::vector<int>& sub_by_edge_long,
                 const std::vector<std::vector<int>>& sub_by_edge_bounds,
                 const std::vector<int>& edge_type, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& conc = stan::math::to_ref(conc_arg__);
    const auto& km = stan::math::to_ref(km_arg__);
    const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 239;
      N_edge = stan::math::size(sub_by_edge_bounds);
      current_statement__ = 240;
      stan::math::validate_non_negative_index("prod_conc_over_km", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> prod_conc_over_km =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 253;
      for (int f = 1; f <= N_edge; ++f) {
        current_statement__ = 245;
        if (stan::math::logical_eq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 2)) {
          current_statement__ = 242;
          stan::model::assign(prod_conc_over_km, 1,
            "assigning variable prod_conc_over_km", stan::model::index_uni(f));
          continue;
        } 
        int N_sub = std::numeric_limits<int>::min();
        current_statement__ = 246;
        N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
        current_statement__ = 247;
        stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
        std::vector<int> sub_ix =
           std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 248;
        stan::model::assign(sub_ix,
          extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
          "assigning variable sub_ix");
        current_statement__ = 249;
        stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
        std::vector<int> sub_km_ix =
           std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 250;
        stan::model::assign(sub_km_ix,
          extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            f, pstream__), "assigning variable sub_km_ix");
        current_statement__ = 251;
        stan::model::assign(prod_conc_over_km,
          stan::math::prod(
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(sub_ix)),
              stan::model::rvalue(km, "km",
                stan::model::index_multi(sub_km_ix)))),
          "assigning variable prod_conc_over_km", stan::model::index_uni(f));
      }
      current_statement__ = 254;
      return stan::math::elt_multiply(prod_conc_over_km, free_enzyme_ratio);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>>, -1, 1>
  get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                        const T2__& km_arg__, const T3__& ki_arg__,
                        const std::vector<int>& edge_type,
                        const std::vector<int>& sub_km_ix_by_edge_long,
                        const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                        const std::vector<int>& prod_km_ix_by_edge_long,
                        const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                        const std::vector<int>& sub_by_edge_long,
                        const std::vector<std::vector<int>>& sub_by_edge_bounds,
                        const std::vector<int>& prod_by_edge_long,
                        const std::vector<std::vector<int>>& prod_by_edge_bounds,
                        const std::vector<int>& ci_ix_long,
                        const std::vector<std::vector<int>>& ci_ix_bounds,
                        std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>>;
    int current_statement__ = 0; 
    const auto& conc = stan::math::to_ref(conc_arg__);
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& km = stan::math::to_ref(km_arg__);
    const auto& ki = stan::math::to_ref(ki_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 256;
      N_edge = stan::math::cols(S);
      current_statement__ = 257;
      stan::math::validate_non_negative_index("denom", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> denom =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 288;
      for (int f = 1; f <= N_edge; ++f) {
        current_statement__ = 262;
        if (stan::math::logical_eq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 2)) {
          current_statement__ = 259;
          stan::model::assign(denom, 1,
            "assigning variable denom", stan::model::index_uni(f));
          continue;
        } 
        int N_sub = std::numeric_limits<int>::min();
        current_statement__ = 263;
        N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
        int N_prod = std::numeric_limits<int>::min();
        current_statement__ = 264;
        N_prod = measure_ragged(prod_by_edge_bounds, f, pstream__);
        int N_ci = std::numeric_limits<int>::min();
        current_statement__ = 265;
        N_ci = measure_ragged(ci_ix_bounds, f, pstream__);
        current_statement__ = 266;
        stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
        std::vector<int> sub_ix =
           std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 267;
        stan::model::assign(sub_ix,
          extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
          "assigning variable sub_ix");
        current_statement__ = 268;
        stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
        std::vector<int> sub_km_ix =
           std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 269;
        stan::model::assign(sub_km_ix,
          extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            f, pstream__), "assigning variable sub_km_ix");
        current_statement__ = 270;
        stan::math::validate_non_negative_index("prod_ix", "N_prod", N_prod);
        std::vector<int> prod_ix =
           std::vector<int>(N_prod, std::numeric_limits<int>::min());
        current_statement__ = 271;
        stan::model::assign(prod_ix,
          extract_ragged(prod_by_edge_long, prod_by_edge_bounds,
            f, pstream__), "assigning variable prod_ix");
        current_statement__ = 272;
        stan::math::validate_non_negative_index("sub_over_km", "N_sub", N_sub);
        Eigen::Matrix<local_scalar_t__, -1, 1> sub_over_km =
           Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_sub,
             DUMMY_VAR__);
        current_statement__ = 273;
        stan::model::assign(sub_over_km,
          stan::math::elt_divide(
            stan::model::rvalue(conc, "conc",
              stan::model::index_multi(sub_ix)),
            stan::model::rvalue(km, "km",
              stan::model::index_multi(sub_km_ix))),
          "assigning variable sub_over_km");
        current_statement__ = 274;
        stan::model::assign(denom,
          stan::math::prod(
            stan::math::pow(
              stan::math::add(stan::math::rep_vector(1, N_sub), sub_over_km),
              stan::math::fabs(
                stan::model::rvalue(S, "S",
                  stan::model::index_multi(sub_ix), stan::model::index_uni(f))))),
          "assigning variable denom", stan::model::index_uni(f));
        current_statement__ = 281;
        if (stan::math::logical_eq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 1)) {
          current_statement__ = 275;
          stan::math::validate_non_negative_index("prod_km_ix", "N_prod",
                                                  N_prod);
          std::vector<int> prod_km_ix =
             std::vector<int>(N_prod, std::numeric_limits<int>::min());
          current_statement__ = 276;
          stan::model::assign(prod_km_ix,
            extract_ragged(prod_km_ix_by_edge_long,
              prod_km_ix_by_edge_bounds, f, pstream__),
            "assigning variable prod_km_ix");
          current_statement__ = 277;
          stan::math::validate_non_negative_index("prod_over_km", "N_prod",
                                                  N_prod);
          Eigen::Matrix<local_scalar_t__, -1, 1> prod_over_km =
             Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_prod,
               DUMMY_VAR__);
          current_statement__ = 278;
          stan::model::assign(prod_over_km,
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(prod_ix)),
              stan::model::rvalue(km, "km",
                stan::model::index_multi(prod_km_ix))),
            "assigning variable prod_over_km");
          current_statement__ = 279;
          stan::model::assign(denom,
            (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
              (stan::math::prod(
                 stan::math::pow(
                   stan::math::add(stan::math::rep_vector(1, N_prod),
                     prod_over_km),
                   stan::math::fabs(
                     stan::model::rvalue(S, "S",
                       stan::model::index_multi(prod_ix),
                         stan::model::index_uni(f))))) - 1)),
            "assigning variable denom", stan::model::index_uni(f));
        } 
        current_statement__ = 286;
        if (stan::math::logical_gt(N_ci, 0)) {
          current_statement__ = 282;
          stan::math::validate_non_negative_index("ci_ix", "N_ci", N_ci);
          std::vector<int> ci_ix =
             std::vector<int>(N_ci, std::numeric_limits<int>::min());
          current_statement__ = 283;
          stan::model::assign(ci_ix,
            extract_ragged(ci_ix_long, ci_ix_bounds, f, pstream__),
            "assigning variable ci_ix");
          current_statement__ = 284;
          stan::model::assign(denom,
            (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
              stan::math::sum(
                stan::math::elt_divide(
                  stan::model::rvalue(conc, "conc",
                    stan::model::index_multi(ci_ix)),
                  stan::model::rvalue(ki, "ki",
                    stan::model::index_multi(ci_ix))))),
            "assigning variable denom", stan::model::index_uni(f));
        } 
      }
      current_statement__ = 289;
      return stan::math::inv(denom);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, 1>
  get_reversibility(const T0__& dgr_arg__, const T1__& S_arg__,
                    const T2__& conc_arg__,
                    const std::vector<int>& edge_type,
                    std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>>;
    int current_statement__ = 0; 
    const auto& dgr = stan::math::to_ref(dgr_arg__);
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& conc = stan::math::to_ref(conc_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      local_scalar_t__ RT = DUMMY_VAR__;
      current_statement__ = 291;
      RT = (0.008314 * 298.15);
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 292;
      N_edge = stan::math::cols(S);
      current_statement__ = 293;
      stan::math::validate_non_negative_index("reaction_quotient", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> reaction_quotient =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 294;
      stan::model::assign(reaction_quotient,
        stan::math::multiply(stan::math::transpose(S), stan::math::log(conc)),
        "assigning variable reaction_quotient");
      current_statement__ = 295;
      stan::math::validate_non_negative_index("out", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 301;
      for (int f = 1; f <= N_edge; ++f) {
        current_statement__ = 299;
        if (stan::math::logical_eq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 1)) {
          current_statement__ = 298;
          stan::model::assign(out,
            (1 -
              stan::math::exp(
                ((stan::model::rvalue(dgr, "dgr", stan::model::index_uni(f))
                   +
                   (RT *
                     stan::model::rvalue(reaction_quotient,
                       "reaction_quotient", stan::model::index_uni(f)))) /
                  RT))), "assigning variable out", stan::model::index_uni(f));
        } else {
          current_statement__ = 297;
          stan::model::assign(out, 1,
            "assigning variable out", stan::model::index_uni(f));
        }
      }
      current_statement__ = 302;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>, -1, 1>
  get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
                const T2__& tc_arg__, const T3__& dc_arg__,
                const T4__& subunits_arg__,
                const std::vector<int>& allostery_ix_long,
                const std::vector<std::vector<int>>& allostery_ix_bounds,
                const std::vector<int>& allostery_type,
                const std::vector<int>& allostery_mic,
                const std::vector<int>& edge_to_tc, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>>;
    int current_statement__ = 0; 
    const auto& conc = stan::math::to_ref(conc_arg__);
    const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
    const auto& tc = stan::math::to_ref(tc_arg__);
    const auto& dc = stan::math::to_ref(dc_arg__);
    const auto& subunits = stan::math::to_ref(subunits_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 304;
      N_edge = stan::math::size(allostery_ix_bounds);
      current_statement__ = 305;
      stan::math::validate_non_negative_index("out", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 306;
      stan::model::assign(out, stan::math::rep_vector(1, N_edge),
        "assigning variable out");
      current_statement__ = 323;
      for (int f = 1; f <= N_edge; ++f) {
        int N_allostery = std::numeric_limits<int>::min();
        current_statement__ = 307;
        N_allostery = measure_ragged(allostery_ix_bounds, f, pstream__);
        current_statement__ = 310;
        if (stan::math::logical_eq(N_allostery, 0)) {
          continue;
        } 
        local_scalar_t__ Q_num = DUMMY_VAR__;
        current_statement__ = 311;
        Q_num = 1;
        local_scalar_t__ Q_denom = DUMMY_VAR__;
        current_statement__ = 312;
        Q_denom = 1;
        local_scalar_t__ tc_edge = DUMMY_VAR__;
        current_statement__ = 313;
        tc_edge = stan::model::rvalue(tc, "tc",
                    stan::model::index_uni(stan::model::rvalue(edge_to_tc,
                                             "edge_to_tc",
                                             stan::model::index_uni(f))));
        {
          std::vector<int> sym1__;
          current_statement__ = 314;
          stan::model::assign(sym1__,
            extract_ragged(allostery_ix_long, allostery_ix_bounds,
              f, pstream__), "assigning variable sym1__");
          current_statement__ = 314;
          for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__); ++sym2__) {
            {
              int allostery;
              current_statement__ = 314;
              allostery = sym1__[(sym2__ - 1)];
              local_scalar_t__ conc_over_dc = DUMMY_VAR__;
              current_statement__ = 315;
              conc_over_dc = (stan::model::rvalue(conc, "conc",
                                stan::model::index_uni(stan::model::rvalue(
                                                         allostery_mic,
                                                         "allostery_mic",
                                                         stan::model::index_uni(allostery))))
                               /
                               stan::model::rvalue(dc, "dc",
                                 stan::model::index_uni(allostery)));
              current_statement__ = 320;
              if (stan::math::logical_eq(
                    stan::model::rvalue(allostery_type, "allostery_type",
                      stan::model::index_uni(allostery)), 1)) {
                current_statement__ = 318;
                Q_num = (Q_num + conc_over_dc);
              } else {
                current_statement__ = 316;
                Q_denom = (Q_denom + conc_over_dc);
              }
            }
          }
        }
        current_statement__ = 321;
        stan::model::assign(out,
          stan::math::inv(
            (1 +
              (tc_edge *
                stan::math::pow(
                  ((stan::model::rvalue(free_enzyme_ratio,
                      "free_enzyme_ratio", stan::model::index_uni(f)) *
                     (1 + Q_num)) / (1 + Q_denom)),
                  stan::model::rvalue(subunits, "subunits",
                    stan::model::index_uni(f)))))),
          "assigning variable out", stan::model::index_uni(f));
      }
      current_statement__ = 324;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T5__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T5__>>, -1, 1>
  get_phosphorylation(const T0__& kcat_phos_arg__,
                      const T1__& conc_phos_arg__,
                      const std::vector<int>& phos_ix_long,
                      const std::vector<std::vector<int>>& phos_ix_bounds,
                      const std::vector<int>& phos_type,
                      const T5__& subunits_arg__, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T5__>>;
    int current_statement__ = 0; 
    const auto& kcat_phos = stan::math::to_ref(kcat_phos_arg__);
    const auto& conc_phos = stan::math::to_ref(conc_phos_arg__);
    const auto& subunits = stan::math::to_ref(subunits_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 326;
      N_edge = stan::math::size(phos_ix_bounds);
      current_statement__ = 327;
      stan::math::validate_non_negative_index("out", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 328;
      stan::model::assign(out, stan::math::rep_vector(1, N_edge),
        "assigning variable out");
      current_statement__ = 344;
      for (int f = 1; f <= N_edge; ++f) {
        int N_phos = std::numeric_limits<int>::min();
        current_statement__ = 329;
        N_phos = measure_ragged(phos_ix_bounds, f, pstream__);
        current_statement__ = 332;
        if (stan::math::logical_eq(N_phos, 0)) {
          continue;
        } 
        local_scalar_t__ alpha = DUMMY_VAR__;
        current_statement__ = 333;
        alpha = 0;
        local_scalar_t__ beta = DUMMY_VAR__;
        current_statement__ = 334;
        beta = 0;
        {
          std::vector<int> sym1__;
          current_statement__ = 335;
          stan::model::assign(sym1__,
            extract_ragged(phos_ix_long, phos_ix_bounds, f, pstream__),
            "assigning variable sym1__");
          current_statement__ = 335;
          for (int sym2__ = 1; sym2__ <= stan::math::size(sym1__); ++sym2__) {
            {
              int phos;
              current_statement__ = 335;
              phos = sym1__[(sym2__ - 1)];
              local_scalar_t__ kcat_times_conc = DUMMY_VAR__;
              current_statement__ = 336;
              kcat_times_conc = (stan::model::rvalue(kcat_phos, "kcat_phos",
                                   stan::model::index_uni(phos)) *
                                  stan::model::rvalue(conc_phos, "conc_phos",
                                    stan::model::index_uni(phos)));
              current_statement__ = 341;
              if (stan::math::logical_eq(
                    stan::model::rvalue(phos_type, "phos_type",
                      stan::model::index_uni(phos)), 1)) {
                current_statement__ = 339;
                alpha = (alpha + kcat_times_conc);
              } else {
                current_statement__ = 337;
                beta = (beta + kcat_times_conc);
              }
              current_statement__ = 342;
              stan::model::assign(out,
                stan::math::inv(
                  (1 +
                    stan::math::pow((alpha / beta),
                      stan::model::rvalue(subunits, "subunits",
                        stan::model::index_uni(f))))),
                "assigning variable out", stan::model::index_uni(f));
            }
          }
        }
      }
      current_statement__ = 345;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                    const std::vector<int>& edge_to_drain,
                    const std::vector<int>& sub_by_edge_long,
                    const std::vector<std::vector<int>>& sub_by_edge_bounds,
                    const std::vector<int>& edge_type,
                    std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& drain = stan::math::to_ref(drain_arg__);
    const auto& conc = stan::math::to_ref(conc_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 347;
      N_edge = stan::math::size(edge_type);
      current_statement__ = 348;
      stan::math::validate_non_negative_index("out", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 349;
      stan::model::assign(out, stan::math::rep_vector(1, N_edge),
        "assigning variable out");
      current_statement__ = 357;
      for (int f = 1; f <= N_edge; ++f) {
        current_statement__ = 355;
        if (stan::math::logical_eq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 2)) {
          int N_sub = std::numeric_limits<int>::min();
          current_statement__ = 350;
          N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
          current_statement__ = 351;
          stan::math::validate_non_negative_index("subs", "N_sub", N_sub);
          std::vector<int> subs =
             std::vector<int>(N_sub, std::numeric_limits<int>::min());
          current_statement__ = 352;
          stan::model::assign(subs,
            extract_ragged(sub_by_edge_long, sub_by_edge_bounds,
              f, pstream__), "assigning variable subs");
          current_statement__ = 353;
          stan::model::assign(out,
            (stan::model::rvalue(drain, "drain",
               stan::model::index_uni(stan::model::rvalue(edge_to_drain,
                                        "edge_to_drain",
                                        stan::model::index_uni(f)))) *
              stan::math::prod(
                stan::math::elt_divide(
                  stan::model::rvalue(conc, "conc",
                    stan::model::index_multi(subs)),
                  stan::math::add(
                    stan::model::rvalue(conc, "conc",
                      stan::model::index_multi(subs)), 1e-6)))),
            "assigning variable out", stan::model::index_uni(f));
        } 
      }
      current_statement__ = 358;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__,
          stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
  get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                   const std::vector<int>& edge_to_enzyme,
                   const std::vector<int>& edge_type, std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>>;
    int current_statement__ = 0; 
    const auto& enzyme = stan::math::to_ref(enzyme_arg__);
    const auto& kcat = stan::math::to_ref(kcat_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 360;
      N_edge = stan::math::size(edge_to_enzyme);
      current_statement__ = 361;
      stan::math::validate_non_negative_index("out", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> out =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 362;
      stan::model::assign(out, stan::math::rep_vector(1, N_edge),
        "assigning variable out");
      current_statement__ = 367;
      for (int f = 1; f <= N_edge; ++f) {
        current_statement__ = 365;
        if (stan::math::logical_neq(
              stan::model::rvalue(edge_type, "edge_type",
                stan::model::index_uni(f)), 2)) {
          current_statement__ = 363;
          stan::model::assign(out,
            (stan::model::rvalue(enzyme, "enzyme",
               stan::model::index_uni(stan::model::rvalue(edge_to_enzyme,
                                        "edge_to_enzyme",
                                        stan::model::index_uni(f)))) *
              stan::model::rvalue(kcat, "kcat",
                stan::model::index_uni(stan::model::rvalue(edge_to_enzyme,
                                         "edge_to_enzyme",
                                         stan::model::index_uni(f))))),
            "assigning variable out", stan::model::index_uni(f));
        } 
      }
      current_statement__ = 368;
      return out;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, stan::require_col_vector_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T3__>* = nullptr,
          stan::require_col_vector_t<T4__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr,
          stan::require_col_vector_t<T6__>* = nullptr,
          stan::require_col_vector_t<T7__>* = nullptr,
          stan::require_col_vector_t<T8__>* = nullptr,
          stan::require_col_vector_t<T9__>* = nullptr,
          stan::require_col_vector_t<T10__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T11__>* = nullptr,
          stan::require_col_vector_t<T12__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<stan::value_type_t<T5__>,
                                          stan::value_type_t<T6__>,
                                          stan::value_type_t<T7__>,
                                          stan::value_type_t<T8__>,
                                          stan::value_type_t<T9__>,
                                          stan::promote_args_t<stan::value_type_t<T10__>,
                                                               stan::value_type_t<T11__>,
                                                               stan::value_type_t<T12__>>>>, -1, 1>
  get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__,
                const T2__& dgr_arg__, const T3__& kcat_arg__,
                const T4__& km_arg__, const T5__& ki_arg__,
                const T6__& tc_arg__, const T7__& dc_arg__,
                const T8__& kcat_phos_arg__, const T9__& conc_phos_arg__,
                const T10__& drain_arg__, const T11__& S_arg__,
                const T12__& subunits_arg__,
                const std::vector<int>& edge_type,
                const std::vector<int>& edge_to_enzyme,
                const std::vector<int>& edge_to_drain,
                const std::vector<int>& sub_km_ix_by_edge_long,
                const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                const std::vector<int>& prod_km_ix_by_edge_long,
                const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                const std::vector<int>& sub_by_edge_long,
                const std::vector<std::vector<int>>& sub_by_edge_bounds,
                const std::vector<int>& prod_by_edge_long,
                const std::vector<std::vector<int>>& prod_by_edge_bounds,
                const std::vector<int>& ci_ix_long,
                const std::vector<std::vector<int>>& ci_ix_bounds,
                const std::vector<int>& allostery_ix_long,
                const std::vector<std::vector<int>>& allostery_ix_bounds,
                const std::vector<int>& allostery_type,
                const std::vector<int>& allostery_mic,
                const std::vector<int>& edge_to_tc,
                const std::vector<int>& phos_ix_long,
                const std::vector<std::vector<int>>& phos_ix_bounds,
                const std::vector<int>& phosphorylation_type,
                std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<stan::value_type_t<T0__>,
                                 stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T3__>,
                                 stan::value_type_t<T4__>,
                                 stan::promote_args_t<stan::value_type_t<T5__>,
                                                      stan::value_type_t<T6__>,
                                                      stan::value_type_t<T7__>,
                                                      stan::value_type_t<T8__>,
                                                      stan::value_type_t<T9__>,
                                                      stan::promote_args_t<
                                                      stan::value_type_t<T10__>,
                                                      stan::value_type_t<T11__>,
                                                      stan::value_type_t<T12__>>>>;
    int current_statement__ = 0; 
    const auto& conc = stan::math::to_ref(conc_arg__);
    const auto& enzyme = stan::math::to_ref(enzyme_arg__);
    const auto& dgr = stan::math::to_ref(dgr_arg__);
    const auto& kcat = stan::math::to_ref(kcat_arg__);
    const auto& km = stan::math::to_ref(km_arg__);
    const auto& ki = stan::math::to_ref(ki_arg__);
    const auto& tc = stan::math::to_ref(tc_arg__);
    const auto& dc = stan::math::to_ref(dc_arg__);
    const auto& kcat_phos = stan::math::to_ref(kcat_phos_arg__);
    const auto& conc_phos = stan::math::to_ref(conc_phos_arg__);
    const auto& drain = stan::math::to_ref(drain_arg__);
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& subunits = stan::math::to_ref(subunits_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int N_edge = std::numeric_limits<int>::min();
      current_statement__ = 370;
      N_edge = stan::math::cols(S);
      current_statement__ = 371;
      stan::math::validate_non_negative_index("vmax", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> vmax =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 372;
      stan::model::assign(vmax,
        get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__),
        "assigning variable vmax");
      current_statement__ = 373;
      stan::math::validate_non_negative_index("reversibility", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> reversibility =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 374;
      stan::model::assign(reversibility,
        get_reversibility(dgr, S, conc, edge_type, pstream__),
        "assigning variable reversibility");
      current_statement__ = 375;
      stan::math::validate_non_negative_index("free_enzyme_ratio", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> free_enzyme_ratio =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 376;
      stan::model::assign(free_enzyme_ratio,
        get_free_enzyme_ratio(conc, S, km, ki, edge_type,
          sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
          prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
          sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
          prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, pstream__),
        "assigning variable free_enzyme_ratio");
      current_statement__ = 377;
      stan::math::validate_non_negative_index("saturation", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> saturation =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 378;
      stan::model::assign(saturation,
        get_saturation(conc, km, free_enzyme_ratio, sub_km_ix_by_edge_long,
          sub_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
          edge_type, pstream__), "assigning variable saturation");
      current_statement__ = 379;
      stan::math::validate_non_negative_index("allostery", "N_edge", N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> allostery =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 380;
      stan::model::assign(allostery,
        get_allostery(conc, free_enzyme_ratio, tc, dc, subunits,
          allostery_ix_long, allostery_ix_bounds, allostery_type,
          allostery_mic, edge_to_tc, pstream__),
        "assigning variable allostery");
      current_statement__ = 381;
      stan::math::validate_non_negative_index("phosphorylation", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> phosphorylation =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 382;
      stan::model::assign(phosphorylation,
        get_phosphorylation(kcat_phos, conc_phos, phos_ix_long,
          phos_ix_bounds, phosphorylation_type, subunits, pstream__),
        "assigning variable phosphorylation");
      current_statement__ = 383;
      stan::math::validate_non_negative_index("drain_by_edge", "N_edge",
                                              N_edge);
      Eigen::Matrix<local_scalar_t__, -1, 1> drain_by_edge =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 384;
      stan::model::assign(drain_by_edge,
        get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
          sub_by_edge_bounds, edge_type, pstream__),
        "assigning variable drain_by_edge");
      current_statement__ = 385;
      return stan::math::elt_multiply(
               stan::math::elt_multiply(
                 stan::math::elt_multiply(
                   stan::math::elt_multiply(
                     stan::math::elt_multiply(vmax, saturation),
                     reversibility), allostery), phosphorylation),
               drain_by_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__,
          stan::require_stan_scalar_t<T0__>* = nullptr,
          stan::require_col_vector_t<T1__>* = nullptr,
          stan::require_col_vector_t<T2__>* = nullptr,
          stan::require_col_vector_t<T5__>* = nullptr,
          stan::require_col_vector_t<T6__>* = nullptr,
          stan::require_col_vector_t<T7__>* = nullptr,
          stan::require_col_vector_t<T8__>* = nullptr,
          stan::require_col_vector_t<T9__>* = nullptr,
          stan::require_col_vector_t<T10__>* = nullptr,
          stan::require_col_vector_t<T11__>* = nullptr,
          stan::require_col_vector_t<T12__>* = nullptr,
          stan::require_col_vector_t<T13__>* = nullptr,
          stan::require_col_vector_t<T14__>* = nullptr,
          stan::require_eigen_matrix_dynamic_t<T15__>* = nullptr,
          stan::require_col_vector_t<T16__>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T5__>,
                     stan::value_type_t<T6__>,
                     stan::promote_args_t<stan::value_type_t<T7__>,
                                          stan::value_type_t<T8__>,
                                          stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::promote_args_t<stan::value_type_t<T12__>,
                                                               stan::value_type_t<T13__>,
                                                               stan::value_type_t<T14__>,
                                                               stan::value_type_t<T15__>,
                                                               stan::value_type_t<T16__>>>>, -1, 1>
  dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
               const T2__& unbalanced_arg__,
               const std::vector<int>& balanced_ix,
               const std::vector<int>& unbalanced_ix,
               const T5__& enzyme_arg__, const T6__& dgr_arg__,
               const T7__& kcat_arg__, const T8__& km_arg__,
               const T9__& ki_arg__, const T10__& tc_arg__,
               const T11__& dc_arg__, const T12__& kcat_phos_arg__,
               const T13__& conc_phos_arg__, const T14__& drain_arg__,
               const T15__& S_arg__, const T16__& subunits_arg__,
               const std::vector<int>& edge_type,
               const std::vector<int>& edge_to_enzyme,
               const std::vector<int>& edge_to_drain,
               const std::vector<int>& sub_km_ix_by_edge_long,
               const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
               const std::vector<int>& prod_km_ix_by_edge_long,
               const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
               const std::vector<int>& sub_by_edge_long,
               const std::vector<std::vector<int>>& sub_by_edge_bounds,
               const std::vector<int>& prod_by_edge_long,
               const std::vector<std::vector<int>>& prod_by_edge_bounds,
               const std::vector<int>& ci_ix_long,
               const std::vector<std::vector<int>>& ci_ix_bounds,
               const std::vector<int>& allostery_ix_long,
               const std::vector<std::vector<int>>& allostery_ix_bounds,
               const std::vector<int>& allostery_type,
               const std::vector<int>& allostery_mic,
               const std::vector<int>& edge_to_tc,
               const std::vector<int>& phosphorylation_ix_long,
               const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
               const std::vector<int>& phosphorylation_type,
               std::ostream* pstream__) {
    using local_scalar_t__ =
            stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                                 stan::value_type_t<T2__>,
                                 stan::value_type_t<T5__>,
                                 stan::value_type_t<T6__>,
                                 stan::promote_args_t<stan::value_type_t<T7__>,
                                                      stan::value_type_t<T8__>,
                                                      stan::value_type_t<T9__>,
                                                      stan::value_type_t<T10__>,
                                                      stan::value_type_t<T11__>,
                                                      stan::promote_args_t<
                                                      stan::value_type_t<T12__>,
                                                      stan::value_type_t<T13__>,
                                                      stan::value_type_t<T14__>,
                                                      stan::value_type_t<T15__>,
                                                      stan::value_type_t<T16__>>>>;
    int current_statement__ = 0; 
    const auto& current_balanced = stan::math::to_ref(current_balanced_arg__);
    const auto& unbalanced = stan::math::to_ref(unbalanced_arg__);
    const auto& enzyme = stan::math::to_ref(enzyme_arg__);
    const auto& dgr = stan::math::to_ref(dgr_arg__);
    const auto& kcat = stan::math::to_ref(kcat_arg__);
    const auto& km = stan::math::to_ref(km_arg__);
    const auto& ki = stan::math::to_ref(ki_arg__);
    const auto& tc = stan::math::to_ref(tc_arg__);
    const auto& dc = stan::math::to_ref(dc_arg__);
    const auto& kcat_phos = stan::math::to_ref(kcat_phos_arg__);
    const auto& conc_phos = stan::math::to_ref(conc_phos_arg__);
    const auto& drain = stan::math::to_ref(drain_arg__);
    const auto& S = stan::math::to_ref(S_arg__);
    const auto& subunits = stan::math::to_ref(subunits_arg__);
    static constexpr bool propto__ = true;
    (void) propto__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      current_statement__ = 387;
      stan::math::validate_non_negative_index("current_concentration",
                                              "rows(current_balanced) + rows(unbalanced)",
                                              (stan::math::rows(
                                                 current_balanced) +
                                                stan::math::rows(unbalanced)));
      Eigen::Matrix<local_scalar_t__, -1, 1> current_concentration =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           (stan::math::rows(current_balanced) +
             stan::math::rows(unbalanced)), DUMMY_VAR__);
      current_statement__ = 389;
      stan::model::assign(current_concentration, current_balanced,
        "assigning variable current_concentration", stan::model::index_multi(balanced_ix));
      current_statement__ = 390;
      stan::model::assign(current_concentration, unbalanced,
        "assigning variable current_concentration", stan::model::index_multi(unbalanced_ix));
      current_statement__ = 391;
      stan::math::validate_non_negative_index("edge_flux", "cols(S)",
                                              stan::math::cols(S));
      Eigen::Matrix<local_scalar_t__, -1, 1> edge_flux =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           stan::math::cols(S), DUMMY_VAR__);
      current_statement__ = 392;
      stan::model::assign(edge_flux,
        get_edge_flux(current_concentration, enzyme, dgr, kcat, km, ki, tc,
          dc, kcat_phos, conc_phos, drain, S, subunits, edge_type,
          edge_to_enzyme, edge_to_drain, sub_km_ix_by_edge_long,
          sub_km_ix_by_edge_bounds, prod_km_ix_by_edge_long,
          prod_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
          prod_by_edge_long, prod_by_edge_bounds, ci_ix_long, ci_ix_bounds,
          allostery_ix_long, allostery_ix_bounds, allostery_type,
          allostery_mic, edge_to_tc, phosphorylation_ix_long,
          phosphorylation_ix_bounds, phosphorylation_type, pstream__),
        "assigning variable edge_flux");
      current_statement__ = 393;
      return stan::model::rvalue(stan::math::multiply(S, edge_flux),
               "(S * edge_flux)", stan::model::index_multi(balanced_ix));
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    }
std::vector<int>
extract_ragged_functor__::operator()(const std::vector<int>& ix_long,
                                     const std::vector<std::vector<int>>& bounds,
                                     const int& i, std::ostream* pstream__) 
const
{
  return extract_ragged(ix_long, bounds, i, pstream__);
}

int
measure_ragged_functor__::operator()(const std::vector<std::vector<int>>& bounds,
                                     const int& i, std::ostream* pstream__) 
const
{
  return measure_ragged(bounds, i, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>>, -1, 1>
get_allostery_functor__::operator()(const T0__& conc,
                                    const T1__& free_enzyme_ratio,
                                    const T2__& tc, const T3__& dc,
                                    const T4__& subunits,
                                    const std::vector<int>& allostery_ix_long,
                                    const std::vector<std::vector<int>>& allostery_ix_bounds,
                                    const std::vector<int>& allostery_type,
                                    const std::vector<int>& allostery_mic,
                                    const std::vector<int>& edge_to_tc,
                                    std::ostream* pstream__)  const
{
  return get_allostery(conc, free_enzyme_ratio, tc, dc, subunits,
           allostery_ix_long, allostery_ix_bounds, allostery_type,
           allostery_mic, edge_to_tc, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*,
          stan::require_col_vector_t<T4__>*,
          stan::require_col_vector_t<T5__>*,
          stan::require_col_vector_t<T6__>*,
          stan::require_col_vector_t<T7__>*,
          stan::require_col_vector_t<T8__>*,
          stan::require_col_vector_t<T9__>*,
          stan::require_col_vector_t<T10__>*,
          stan::require_eigen_matrix_dynamic_t<T11__>*,
          stan::require_col_vector_t<T12__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>,
                     stan::value_type_t<T4__>,
                     stan::promote_args_t<stan::value_type_t<T5__>,
                                          stan::value_type_t<T6__>,
                                          stan::value_type_t<T7__>,
                                          stan::value_type_t<T8__>,
                                          stan::value_type_t<T9__>,
                                          stan::promote_args_t<stan::value_type_t<T10__>,
                                                               stan::value_type_t<T11__>,
                                                               stan::value_type_t<T12__>>>>, -1, 1>
get_edge_flux_functor__::operator()(const T0__& conc, const T1__& enzyme,
                                    const T2__& dgr, const T3__& kcat,
                                    const T4__& km, const T5__& ki,
                                    const T6__& tc, const T7__& dc,
                                    const T8__& kcat_phos,
                                    const T9__& conc_phos,
                                    const T10__& drain, const T11__& S,
                                    const T12__& subunits,
                                    const std::vector<int>& edge_type,
                                    const std::vector<int>& edge_to_enzyme,
                                    const std::vector<int>& edge_to_drain,
                                    const std::vector<int>& sub_km_ix_by_edge_long,
                                    const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                                    const std::vector<int>& prod_km_ix_by_edge_long,
                                    const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                                    const std::vector<int>& sub_by_edge_long,
                                    const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                    const std::vector<int>& prod_by_edge_long,
                                    const std::vector<std::vector<int>>& prod_by_edge_bounds,
                                    const std::vector<int>& ci_ix_long,
                                    const std::vector<std::vector<int>>& ci_ix_bounds,
                                    const std::vector<int>& allostery_ix_long,
                                    const std::vector<std::vector<int>>& allostery_ix_bounds,
                                    const std::vector<int>& allostery_type,
                                    const std::vector<int>& allostery_mic,
                                    const std::vector<int>& edge_to_tc,
                                    const std::vector<int>& phos_ix_long,
                                    const std::vector<std::vector<int>>& phos_ix_bounds,
                                    const std::vector<int>& phosphorylation_type,
                                    std::ostream* pstream__)  const
{
  return get_edge_flux(conc, enzyme, dgr, kcat, km, ki, tc, dc, kcat_phos,
           conc_phos, drain, S, subunits, edge_type, edge_to_enzyme,
           edge_to_drain, sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
           prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
           sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
           prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
           allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
           phos_ix_long, phos_ix_bounds, phosphorylation_type, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_eigen_matrix_dynamic_t<T1__>*,
          stan::require_col_vector_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, 1>
get_reversibility_functor__::operator()(const T0__& dgr, const T1__& S,
                                        const T2__& conc,
                                        const std::vector<int>& edge_type,
                                        std::ostream* pstream__)  const
{
  return get_reversibility(dgr, S, conc, edge_type, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T0__>*,
          stan::require_eigen_matrix_dynamic_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T3__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T3__>>, -1, 1>
get_free_enzyme_ratio_functor__::operator()(const T0__& conc, const T1__& S,
                                            const T2__& km, const T3__& ki,
                                            const std::vector<int>& edge_type,
                                            const std::vector<int>& sub_km_ix_by_edge_long,
                                            const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                                            const std::vector<int>& prod_km_ix_by_edge_long,
                                            const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                                            const std::vector<int>& sub_by_edge_long,
                                            const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                            const std::vector<int>& prod_by_edge_long,
                                            const std::vector<std::vector<int>>& prod_by_edge_bounds,
                                            const std::vector<int>& ci_ix_long,
                                            const std::vector<std::vector<int>>& ci_ix_bounds,
                                            std::ostream* pstream__)  const
{
  return get_free_enzyme_ratio(conc, S, km, ki, edge_type,
           sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
           prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
           sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
           prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, pstream__);
}

template <typename T0__, typename T1__, typename T5__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T5__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T5__>>, -1, 1>
get_phosphorylation_functor__::operator()(const T0__& kcat_phos,
                                          const T1__& conc_phos,
                                          const std::vector<int>& phos_ix_long,
                                          const std::vector<std::vector<int>>& phos_ix_bounds,
                                          const std::vector<int>& phos_type,
                                          const T5__& subunits,
                                          std::ostream* pstream__)  const
{
  return get_phosphorylation(kcat_phos, conc_phos, phos_ix_long,
           phos_ix_bounds, phos_type, subunits, pstream__);
}

template <typename T0__, typename T1__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
unz_2d_functor__::operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
                             const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
                             std::ostream* pstream__)  const
{
  return unz_2d(mnsd, z, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_stan_scalar_t<T2__>*,
          stan::require_stan_scalar_t<T3__>*>
int
check_steady_state_functor__::operator()(const T0__& Sv, const T1__& conc,
                                         const T2__& abs_thresh,
                                         const T3__& rel_thresh,
                                         std::ostream* pstream__)  const
{
  return check_steady_state(Sv, conc, abs_thresh, rel_thresh, pstream__);
}

template <typename T0__, typename T1__, stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
get_vmax_by_edge_functor__::operator()(const T0__& enzyme, const T1__& kcat,
                                       const std::vector<int>& edge_to_enzyme,
                                       const std::vector<int>& edge_type,
                                       std::ostream* pstream__)  const
{
  return get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__);
}

template <typename T0__, typename T1__, typename T3__,
          stan::require_eigen_matrix_dynamic_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T3__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T3__>>, -1, 1>
get_dgrs_functor__::operator()(const T0__& S, const T1__& dgf,
                               const std::vector<int>& mic_to_met,
                               const T3__& water_stoichiometry,
                               std::ostream* pstream__)  const
{
  return get_dgrs(S, dgf, mic_to_met, water_stoichiometry, pstream__);
}

template <typename T0__, typename T1__, typename T2__,
          stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>>, -1, 1>
get_saturation_functor__::operator()(const T0__& conc, const T1__& km,
                                     const T2__& free_enzyme_ratio,
                                     const std::vector<int>& sub_km_ix_by_edge_long,
                                     const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                                     const std::vector<int>& sub_by_edge_long,
                                     const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                     const std::vector<int>& edge_type,
                                     std::ostream* pstream__)  const
{
  return get_saturation(conc, km, free_enzyme_ratio, sub_km_ix_by_edge_long,
           sub_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
           edge_type, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T5__>*,
          stan::require_col_vector_t<T6__>*,
          stan::require_col_vector_t<T7__>*,
          stan::require_col_vector_t<T8__>*,
          stan::require_col_vector_t<T9__>*,
          stan::require_col_vector_t<T10__>*,
          stan::require_col_vector_t<T11__>*,
          stan::require_col_vector_t<T12__>*,
          stan::require_col_vector_t<T13__>*,
          stan::require_col_vector_t<T14__>*,
          stan::require_eigen_matrix_dynamic_t<T15__>*,
          stan::require_col_vector_t<T16__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T5__>,
                     stan::value_type_t<T6__>,
                     stan::promote_args_t<stan::value_type_t<T7__>,
                                          stan::value_type_t<T8__>,
                                          stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::promote_args_t<stan::value_type_t<T12__>,
                                                               stan::value_type_t<T13__>,
                                                               stan::value_type_t<T14__>,
                                                               stan::value_type_t<T15__>,
                                                               stan::value_type_t<T16__>>>>, -1, 1>
dbalanced_dt_functor__::operator()(const T0__& time,
                                   const T1__& current_balanced,
                                   const T2__& unbalanced,
                                   const std::vector<int>& balanced_ix,
                                   const std::vector<int>& unbalanced_ix,
                                   const T5__& enzyme, const T6__& dgr,
                                   const T7__& kcat, const T8__& km,
                                   const T9__& ki, const T10__& tc,
                                   const T11__& dc, const T12__& kcat_phos,
                                   const T13__& conc_phos,
                                   const T14__& drain, const T15__& S,
                                   const T16__& subunits,
                                   const std::vector<int>& edge_type,
                                   const std::vector<int>& edge_to_enzyme,
                                   const std::vector<int>& edge_to_drain,
                                   const std::vector<int>& sub_km_ix_by_edge_long,
                                   const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                                   const std::vector<int>& prod_km_ix_by_edge_long,
                                   const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                                   const std::vector<int>& sub_by_edge_long,
                                   const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                   const std::vector<int>& prod_by_edge_long,
                                   const std::vector<std::vector<int>>& prod_by_edge_bounds,
                                   const std::vector<int>& ci_ix_long,
                                   const std::vector<std::vector<int>>& ci_ix_bounds,
                                   const std::vector<int>& allostery_ix_long,
                                   const std::vector<std::vector<int>>& allostery_ix_bounds,
                                   const std::vector<int>& allostery_type,
                                   const std::vector<int>& allostery_mic,
                                   const std::vector<int>& edge_to_tc,
                                   const std::vector<int>& phosphorylation_ix_long,
                                   const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
                                   const std::vector<int>& phosphorylation_type,
                                   std::ostream* pstream__)  const
{
  return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
           unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dc, kcat_phos,
           conc_phos, drain, S, subunits, edge_type, edge_to_enzyme,
           edge_to_drain, sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
           prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
           sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
           prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
           allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
           phosphorylation_ix_long, phosphorylation_ix_bounds,
           phosphorylation_type, pstream__);
}

template <typename T0__, typename T1__, stan::require_stan_scalar_t<T0__>*,
          stan::require_stan_scalar_t<T1__>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>, -1, 1>>
unz_log_2d_functor__::operator()(const std::vector<std::vector<Eigen::Matrix<T0__, -1, 1>>>& mnsd,
                                 const std::vector<Eigen::Matrix<T1__, -1, 1>>& z,
                                 std::ostream* pstream__)  const
{
  return unz_log_2d(mnsd, z, pstream__);
}

template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__,
          stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T2__>*,
          stan::require_col_vector_t<T5__>*,
          stan::require_col_vector_t<T6__>*,
          stan::require_col_vector_t<T7__>*,
          stan::require_col_vector_t<T8__>*,
          stan::require_col_vector_t<T9__>*,
          stan::require_col_vector_t<T10__>*,
          stan::require_col_vector_t<T11__>*,
          stan::require_col_vector_t<T12__>*,
          stan::require_col_vector_t<T13__>*,
          stan::require_col_vector_t<T14__>*,
          stan::require_eigen_matrix_dynamic_t<T15__>*,
          stan::require_col_vector_t<T16__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>,
                     stan::value_type_t<T2__>, stan::value_type_t<T5__>,
                     stan::value_type_t<T6__>,
                     stan::promote_args_t<stan::value_type_t<T7__>,
                                          stan::value_type_t<T8__>,
                                          stan::value_type_t<T9__>,
                                          stan::value_type_t<T10__>,
                                          stan::value_type_t<T11__>,
                                          stan::promote_args_t<stan::value_type_t<T12__>,
                                                               stan::value_type_t<T13__>,
                                                               stan::value_type_t<T14__>,
                                                               stan::value_type_t<T15__>,
                                                               stan::value_type_t<T16__>>>>, -1, 1>
dbalanced_dt_odefunctor__::operator()(const T0__& time,
                                      const T1__& current_balanced,
                                      std::ostream* pstream__,
                                      const T2__& unbalanced,
                                      const std::vector<int>& balanced_ix,
                                      const std::vector<int>& unbalanced_ix,
                                      const T5__& enzyme, const T6__& dgr,
                                      const T7__& kcat, const T8__& km,
                                      const T9__& ki, const T10__& tc,
                                      const T11__& dc,
                                      const T12__& kcat_phos,
                                      const T13__& conc_phos,
                                      const T14__& drain, const T15__& S,
                                      const T16__& subunits,
                                      const std::vector<int>& edge_type,
                                      const std::vector<int>& edge_to_enzyme,
                                      const std::vector<int>& edge_to_drain,
                                      const std::vector<int>& sub_km_ix_by_edge_long,
                                      const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
                                      const std::vector<int>& prod_km_ix_by_edge_long,
                                      const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
                                      const std::vector<int>& sub_by_edge_long,
                                      const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                      const std::vector<int>& prod_by_edge_long,
                                      const std::vector<std::vector<int>>& prod_by_edge_bounds,
                                      const std::vector<int>& ci_ix_long,
                                      const std::vector<std::vector<int>>& ci_ix_bounds,
                                      const std::vector<int>& allostery_ix_long,
                                      const std::vector<std::vector<int>>& allostery_ix_bounds,
                                      const std::vector<int>& allostery_type,
                                      const std::vector<int>& allostery_mic,
                                      const std::vector<int>& edge_to_tc,
                                      const std::vector<int>& phosphorylation_ix_long,
                                      const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
                                      const std::vector<int>& phosphorylation_type) 
const
{
  return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
           unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dc, kcat_phos,
           conc_phos, drain, S, subunits, edge_type, edge_to_enzyme,
           edge_to_drain, sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
           prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
           sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
           prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
           allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
           phosphorylation_ix_long, phosphorylation_ix_bounds,
           phosphorylation_type, pstream__);
}

template <typename T0__, typename T1__, stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
unz_log_1d_functor__::operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
                                 const T1__& z, std::ostream* pstream__) 
const
{
  return unz_log_1d(mnsd, z, pstream__);
}

template <typename T0__, typename T1__, stan::require_col_vector_t<T0__>*,
          stan::require_col_vector_t<T1__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>>, -1, 1>
get_drain_by_edge_functor__::operator()(const T0__& drain, const T1__& conc,
                                        const std::vector<int>& edge_to_drain,
                                        const std::vector<int>& sub_by_edge_long,
                                        const std::vector<std::vector<int>>& sub_by_edge_bounds,
                                        const std::vector<int>& edge_type,
                                        std::ostream* pstream__)  const
{
  return get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
           sub_by_edge_bounds, edge_type, pstream__);
}

template <typename T0__, typename T1__, typename T3__,
          stan::require_eigen_matrix_dynamic_t<T0__>*,
          stan::require_col_vector_t<T1__>*,
          stan::require_col_vector_t<T3__>*>
Eigen::Matrix<stan::promote_args_t<stan::value_type_t<T0__>, stan::value_type_t<T1__>,
                     stan::value_type_t<T3__>>, -1, 1>
get_keq_functor__::operator()(const T0__& S, const T1__& dgf,
                              const std::vector<int>& mic_to_met,
                              const T3__& water_stoichiometry,
                              std::ostream* pstream__)  const
{
  return get_keq(S, dgf, mic_to_met, water_stoichiometry, pstream__);
}

template <typename T0__, typename T1__, stan::require_stan_scalar_t<T0__>*,
          stan::require_col_vector_t<T1__>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::value_type_t<T1__>>, -1, 1>
unz_1d_functor__::operator()(const std::vector<Eigen::Matrix<T0__, -1, 1>>& mnsd,
                             const T1__& z, std::ostream* pstream__)  const
{
  return unz_1d(mnsd, z, pstream__);
}


class out_of_sample_model_model final : public model_base_crtp<out_of_sample_model_model> {

 private:
  int N_mic;
  int N_edge_sub;
  int N_edge_prod;
  int N_unbalanced;
  int N_metabolite;
  int N_km;
  int N_reaction;
  int N_enzyme;
  int N_drain;
  int N_edge;
  int N_allostery;
  int N_allosteric_enzyme;
  int N_phosphorylation;
  int N_competitive_inhibition;
  int N_experiment;
  int N_enzyme_knockout;
  int N_phosphorylation_knockout;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_phos;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_unbalanced;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_conc_enzyme;
  std::vector<std::vector<Eigen::Matrix<double, -1, 1>>> priors_drain;
  Eigen::Matrix<double, -1, -1> S__;
  std::vector<int> balanced_mic_ix;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> edge_type;
  std::vector<int> edge_to_enzyme;
  std::vector<int> edge_to_tc;
  std::vector<int> edge_to_drain;
  std::vector<int> edge_to_reaction;
  std::vector<int> allostery_type;
  std::vector<int> allostery_mic;
  std::vector<int> phosphorylation_type;
  std::vector<int> sub_by_edge_long;
  std::vector<std::vector<int>> sub_by_edge_bounds;
  std::vector<int> prod_by_edge_long;
  std::vector<std::vector<int>> prod_by_edge_bounds;
  std::vector<int> sub_km_ix_by_edge_long;
  std::vector<std::vector<int>> sub_km_ix_by_edge_bounds;
  std::vector<int> prod_km_ix_by_edge_long;
  std::vector<std::vector<int>> prod_km_ix_by_edge_bounds;
  std::vector<int> ci_ix_long;
  std::vector<std::vector<int>> ci_ix_bounds;
  std::vector<int> allostery_ix_long;
  std::vector<std::vector<int>> allostery_ix_bounds;
  std::vector<int> phosphorylation_ix_long;
  std::vector<std::vector<int>> phosphorylation_ix_bounds;
  std::vector<int> mic_to_met;
  Eigen::Matrix<double, -1, 1> water_stoichiometry__;
  std::vector<int> enzyme_knockout_long;
  std::vector<std::vector<int>> enzyme_knockout_bounds;
  std::vector<int> phosphorylation_knockout_long;
  std::vector<std::vector<int>> phosphorylation_knockout_bounds;
  Eigen::Matrix<double, -1, 1> subunits__;
  std::vector<Eigen::Matrix<double, -1, 1>> conc_init;
  double rel_tol;
  double abs_tol;
  int max_num_steps;
  int likelihood;
  double timepoint;
  double initial_time; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> water_stoichiometry{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double, -1, 1>> subunits{nullptr, 0};
 
 public:
  ~out_of_sample_model_model() { }
  
  inline std::string model_name() const final { return "out_of_sample_model_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.29.2", "stancflags = --include-paths=/Users/tedgro/Code/Maud/src/maud/stan"};
  }
  
  
  out_of_sample_model_model(stan::io::var_context& context__,
                            unsigned int random_seed__ = 0,
                            std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "out_of_sample_model_model_namespace::out_of_sample_model_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 61;
      context__.validate_dims("data initialization","N_mic","int",
           std::vector<size_t>{});
      N_mic = std::numeric_limits<int>::min();
      
      
      current_statement__ = 61;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      current_statement__ = 61;
      stan::math::check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 62;
      context__.validate_dims("data initialization","N_edge_sub","int",
           std::vector<size_t>{});
      N_edge_sub = std::numeric_limits<int>::min();
      
      
      current_statement__ = 62;
      N_edge_sub = context__.vals_i("N_edge_sub")[(1 - 1)];
      current_statement__ = 62;
      stan::math::check_greater_or_equal(function__, "N_edge_sub",
                                            N_edge_sub, 1);
      current_statement__ = 63;
      context__.validate_dims("data initialization","N_edge_prod","int",
           std::vector<size_t>{});
      N_edge_prod = std::numeric_limits<int>::min();
      
      
      current_statement__ = 63;
      N_edge_prod = context__.vals_i("N_edge_prod")[(1 - 1)];
      current_statement__ = 63;
      stan::math::check_greater_or_equal(function__, "N_edge_prod",
                                            N_edge_prod, 1);
      current_statement__ = 64;
      context__.validate_dims("data initialization","N_unbalanced","int",
           std::vector<size_t>{});
      N_unbalanced = std::numeric_limits<int>::min();
      
      
      current_statement__ = 64;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      current_statement__ = 64;
      stan::math::check_greater_or_equal(function__, "N_unbalanced",
                                            N_unbalanced, 1);
      current_statement__ = 65;
      context__.validate_dims("data initialization","N_metabolite","int",
           std::vector<size_t>{});
      N_metabolite = std::numeric_limits<int>::min();
      
      
      current_statement__ = 65;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      current_statement__ = 65;
      stan::math::check_greater_or_equal(function__, "N_metabolite",
                                            N_metabolite, 1);
      current_statement__ = 66;
      context__.validate_dims("data initialization","N_km","int",
           std::vector<size_t>{});
      N_km = std::numeric_limits<int>::min();
      
      
      current_statement__ = 66;
      N_km = context__.vals_i("N_km")[(1 - 1)];
      current_statement__ = 66;
      stan::math::check_greater_or_equal(function__, "N_km", N_km, 1);
      current_statement__ = 67;
      context__.validate_dims("data initialization","N_reaction","int",
           std::vector<size_t>{});
      N_reaction = std::numeric_limits<int>::min();
      
      
      current_statement__ = 67;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      current_statement__ = 67;
      stan::math::check_greater_or_equal(function__, "N_reaction",
                                            N_reaction, 1);
      current_statement__ = 68;
      context__.validate_dims("data initialization","N_enzyme","int",
           std::vector<size_t>{});
      N_enzyme = std::numeric_limits<int>::min();
      
      
      current_statement__ = 68;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      current_statement__ = 68;
      stan::math::check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 69;
      context__.validate_dims("data initialization","N_drain","int",
           std::vector<size_t>{});
      N_drain = std::numeric_limits<int>::min();
      
      
      current_statement__ = 69;
      N_drain = context__.vals_i("N_drain")[(1 - 1)];
      current_statement__ = 69;
      stan::math::check_greater_or_equal(function__, "N_drain", N_drain, 0);
      current_statement__ = 70;
      context__.validate_dims("data initialization","N_edge","int",
           std::vector<size_t>{});
      N_edge = std::numeric_limits<int>::min();
      
      
      current_statement__ = 70;
      N_edge = context__.vals_i("N_edge")[(1 - 1)];
      current_statement__ = 70;
      stan::math::check_greater_or_equal(function__, "N_edge", N_edge, 1);
      current_statement__ = 71;
      context__.validate_dims("data initialization","N_allostery","int",
           std::vector<size_t>{});
      N_allostery = std::numeric_limits<int>::min();
      
      
      current_statement__ = 71;
      N_allostery = context__.vals_i("N_allostery")[(1 - 1)];
      current_statement__ = 71;
      stan::math::check_greater_or_equal(function__, "N_allostery",
                                            N_allostery, 0);
      current_statement__ = 72;
      context__.validate_dims("data initialization","N_allosteric_enzyme",
          "int", std::vector<size_t>{});
      N_allosteric_enzyme = std::numeric_limits<int>::min();
      
      
      current_statement__ = 72;
      N_allosteric_enzyme = context__.vals_i("N_allosteric_enzyme")[(1 - 1)];
      current_statement__ = 72;
      stan::math::check_greater_or_equal(function__, "N_allosteric_enzyme",
                                            N_allosteric_enzyme, 0);
      current_statement__ = 73;
      context__.validate_dims("data initialization","N_phosphorylation",
          "int", std::vector<size_t>{});
      N_phosphorylation = std::numeric_limits<int>::min();
      
      
      current_statement__ = 73;
      N_phosphorylation = context__.vals_i("N_phosphorylation")[(1 - 1)];
      current_statement__ = 73;
      stan::math::check_greater_or_equal(function__, "N_phosphorylation",
                                            N_phosphorylation, 0);
      current_statement__ = 74;
      context__.validate_dims("data initialization",
          "N_competitive_inhibition","int", std::vector<size_t>{});
      N_competitive_inhibition = std::numeric_limits<int>::min();
      
      
      current_statement__ = 74;
      N_competitive_inhibition = context__.vals_i("N_competitive_inhibition")[
          (1 - 1)];
      current_statement__ = 74;
      stan::math::check_greater_or_equal(function__, "N_competitive_inhibition",
                                            N_competitive_inhibition, 0);
      current_statement__ = 75;
      context__.validate_dims("data initialization","N_experiment","int",
           std::vector<size_t>{});
      N_experiment = std::numeric_limits<int>::min();
      
      
      current_statement__ = 75;
      N_experiment = context__.vals_i("N_experiment")[(1 - 1)];
      current_statement__ = 75;
      stan::math::check_greater_or_equal(function__, "N_experiment",
                                            N_experiment, 1);
      current_statement__ = 76;
      context__.validate_dims("data initialization","N_enzyme_knockout",
          "int", std::vector<size_t>{});
      N_enzyme_knockout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 76;
      N_enzyme_knockout = context__.vals_i("N_enzyme_knockout")[(1 - 1)];
      current_statement__ = 76;
      stan::math::check_greater_or_equal(function__, "N_enzyme_knockout",
                                            N_enzyme_knockout, 0);
      current_statement__ = 77;
      context__.validate_dims("data initialization",
          "N_phosphorylation_knockout","int", std::vector<size_t>{});
      N_phosphorylation_knockout = std::numeric_limits<int>::min();
      
      
      current_statement__ = 77;
      N_phosphorylation_knockout = context__.vals_i("N_phosphorylation_knockout")[
          (1 - 1)];
      current_statement__ = 77;
      stan::math::check_greater_or_equal(function__, "N_phosphorylation_knockout",
                                            N_phosphorylation_knockout, 0);
      current_statement__ = 78;
      stan::math::validate_non_negative_index("priors_conc_phos",
                                              "N_experiment", N_experiment);
      current_statement__ = 79;
      stan::math::validate_non_negative_index("priors_conc_phos",
                                              "N_phosphorylation",
                                              N_phosphorylation);
      current_statement__ = 80;
      context__.validate_dims("data initialization","priors_conc_phos",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_phosphorylation)});
      priors_conc_phos = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, 
          std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
            Eigen::Matrix<double, -1, 1>::Constant(N_phosphorylation,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_phos_flat__;
        current_statement__ = 80;
        priors_conc_phos_flat__ = context__.vals_r("priors_conc_phos");
        current_statement__ = 80;
        pos__ = 1;
        current_statement__ = 80;
        for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
          current_statement__ = 80;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 80;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 80;
              stan::model::assign(priors_conc_phos,
                priors_conc_phos_flat__[(pos__ - 1)],
                "assigning variable priors_conc_phos", stan::model::index_uni(sym3__),
                                                         stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
              current_statement__ = 80;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 81;
      stan::math::validate_non_negative_index("priors_conc_unbalanced",
                                              "N_experiment", N_experiment);
      current_statement__ = 82;
      stan::math::validate_non_negative_index("priors_conc_unbalanced",
                                              "N_unbalanced", N_unbalanced);
      current_statement__ = 83;
      context__.validate_dims("data initialization","priors_conc_unbalanced",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_unbalanced)});
      priors_conc_unbalanced = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, 
          std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
            Eigen::Matrix<double, -1, 1>::Constant(N_unbalanced,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_unbalanced_flat__;
        current_statement__ = 83;
        priors_conc_unbalanced_flat__ = context__.vals_r("priors_conc_unbalanced");
        current_statement__ = 83;
        pos__ = 1;
        current_statement__ = 83;
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 83;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 83;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 83;
              stan::model::assign(priors_conc_unbalanced,
                priors_conc_unbalanced_flat__[(pos__ - 1)],
                "assigning variable priors_conc_unbalanced", stan::model::index_uni(sym3__),
                                                               stan::model::index_uni(sym2__),
                                                               stan::model::index_uni(sym1__));
              current_statement__ = 83;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 84;
      stan::math::validate_non_negative_index("priors_conc_enzyme",
                                              "N_experiment", N_experiment);
      current_statement__ = 85;
      stan::math::validate_non_negative_index("priors_conc_enzyme",
                                              "N_enzyme", N_enzyme);
      current_statement__ = 86;
      context__.validate_dims("data initialization","priors_conc_enzyme",
          "double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment), static_cast<size_t>(N_enzyme)});
      priors_conc_enzyme = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, 
          std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
            Eigen::Matrix<double, -1, 1>::Constant(N_enzyme,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> priors_conc_enzyme_flat__;
        current_statement__ = 86;
        priors_conc_enzyme_flat__ = context__.vals_r("priors_conc_enzyme");
        current_statement__ = 86;
        pos__ = 1;
        current_statement__ = 86;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 86;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 86;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 86;
              stan::model::assign(priors_conc_enzyme,
                priors_conc_enzyme_flat__[(pos__ - 1)],
                "assigning variable priors_conc_enzyme", stan::model::index_uni(sym3__),
                                                           stan::model::index_uni(sym2__),
                                                           stan::model::index_uni(sym1__));
              current_statement__ = 86;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 87;
      stan::math::validate_non_negative_index("priors_drain", "N_experiment",
                                              N_experiment);
      current_statement__ = 88;
      stan::math::validate_non_negative_index("priors_drain", "N_drain",
                                              N_drain);
      current_statement__ = 89;
      context__.validate_dims("data initialization","priors_drain","double",
           std::vector<size_t>{static_cast<size_t>(2),
            static_cast<size_t>(N_experiment), static_cast<size_t>(N_drain)});
      priors_drain = 
        std::vector<std::vector<Eigen::Matrix<double, -1, 1>>>(2, 
          std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
            Eigen::Matrix<double, -1, 1>::Constant(N_drain,
              std::numeric_limits<double>::quiet_NaN())));
      
      
      {
        std::vector<local_scalar_t__> priors_drain_flat__;
        current_statement__ = 89;
        priors_drain_flat__ = context__.vals_r("priors_drain");
        current_statement__ = 89;
        pos__ = 1;
        current_statement__ = 89;
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          current_statement__ = 89;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 89;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 89;
              stan::model::assign(priors_drain,
                priors_drain_flat__[(pos__ - 1)],
                "assigning variable priors_drain", stan::model::index_uni(sym3__),
                                                     stan::model::index_uni(sym2__),
                                                     stan::model::index_uni(sym1__));
              current_statement__ = 89;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 90;
      stan::math::validate_non_negative_index("S", "N_mic", N_mic);
      current_statement__ = 91;
      stan::math::validate_non_negative_index("S", "N_edge", N_edge);
      current_statement__ = 92;
      context__.validate_dims("data initialization","S","double",
           std::vector<size_t>{static_cast<size_t>(N_mic),
            static_cast<size_t>(N_edge)});
      S__ = 
        Eigen::Matrix<double, -1, -1>::Constant(N_mic, N_edge,
          std::numeric_limits<double>::quiet_NaN());
      new (&S) Eigen::Map<Eigen::Matrix<double, -1, -1>>(S__.data(), N_mic, N_edge);
        
      
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 92;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 92;
        pos__ = 1;
        current_statement__ = 92;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 92;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 92;
            stan::model::assign(S, S_flat__[(pos__ - 1)],
              "assigning variable S", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 92;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 93;
      stan::math::validate_non_negative_index("balanced_mic_ix",
                                              "N_mic - N_unbalanced",
                                              (N_mic - N_unbalanced));
      current_statement__ = 94;
      context__.validate_dims("data initialization","balanced_mic_ix","int",
           std::vector<size_t>{static_cast<size_t>((N_mic - N_unbalanced))});
      balanced_mic_ix = 
        std::vector<int>((N_mic - N_unbalanced), 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 94;
      balanced_mic_ix = context__.vals_i("balanced_mic_ix");
      current_statement__ = 94;
      stan::math::check_greater_or_equal(function__, "balanced_mic_ix",
                                            balanced_mic_ix, 1);
      current_statement__ = 94;
      stan::math::check_less_or_equal(function__, "balanced_mic_ix",
                                         balanced_mic_ix, N_mic);
      current_statement__ = 95;
      stan::math::validate_non_negative_index("unbalanced_mic_ix",
                                              "N_unbalanced", N_unbalanced);
      current_statement__ = 96;
      context__.validate_dims("data initialization","unbalanced_mic_ix",
          "int", std::vector<size_t>{static_cast<size_t>(N_unbalanced)});
      unbalanced_mic_ix = 
        std::vector<int>(N_unbalanced, std::numeric_limits<int>::min());
      
      
      current_statement__ = 96;
      unbalanced_mic_ix = context__.vals_i("unbalanced_mic_ix");
      current_statement__ = 96;
      stan::math::check_greater_or_equal(function__, "unbalanced_mic_ix",
                                            unbalanced_mic_ix, 1);
      current_statement__ = 96;
      stan::math::check_less_or_equal(function__, "unbalanced_mic_ix",
                                         unbalanced_mic_ix, N_mic);
      current_statement__ = 97;
      stan::math::validate_non_negative_index("edge_type", "N_edge", N_edge);
      current_statement__ = 98;
      context__.validate_dims("data initialization","edge_type","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_type = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 98;
      edge_type = context__.vals_i("edge_type");
      current_statement__ = 98;
      stan::math::check_greater_or_equal(function__, "edge_type", edge_type,
                                            1);
      current_statement__ = 98;
      stan::math::check_less_or_equal(function__, "edge_type", edge_type, 3);
      current_statement__ = 99;
      stan::math::validate_non_negative_index("edge_to_enzyme", "N_edge",
                                              N_edge);
      current_statement__ = 100;
      context__.validate_dims("data initialization","edge_to_enzyme","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_enzyme = 
        std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 100;
      edge_to_enzyme = context__.vals_i("edge_to_enzyme");
      current_statement__ = 100;
      stan::math::check_greater_or_equal(function__, "edge_to_enzyme",
                                            edge_to_enzyme, 0);
      current_statement__ = 100;
      stan::math::check_less_or_equal(function__, "edge_to_enzyme",
                                         edge_to_enzyme, N_enzyme);
      current_statement__ = 101;
      stan::math::validate_non_negative_index("edge_to_tc", "N_edge", N_edge);
      current_statement__ = 102;
      context__.validate_dims("data initialization","edge_to_tc","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_tc = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 102;
      edge_to_tc = context__.vals_i("edge_to_tc");
      current_statement__ = 102;
      stan::math::check_greater_or_equal(function__, "edge_to_tc",
                                            edge_to_tc, 0);
      current_statement__ = 102;
      stan::math::check_less_or_equal(function__, "edge_to_tc", edge_to_tc,
                                         N_allostery);
      current_statement__ = 103;
      stan::math::validate_non_negative_index("edge_to_drain", "N_edge",
                                              N_edge);
      current_statement__ = 104;
      context__.validate_dims("data initialization","edge_to_drain","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_drain = 
        std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 104;
      edge_to_drain = context__.vals_i("edge_to_drain");
      current_statement__ = 104;
      stan::math::check_greater_or_equal(function__, "edge_to_drain",
                                            edge_to_drain, 0);
      current_statement__ = 104;
      stan::math::check_less_or_equal(function__, "edge_to_drain",
                                         edge_to_drain, N_drain);
      current_statement__ = 105;
      stan::math::validate_non_negative_index("edge_to_reaction", "N_edge",
                                              N_edge);
      current_statement__ = 106;
      context__.validate_dims("data initialization","edge_to_reaction","int",
           std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_reaction = 
        std::vector<int>(N_edge, std::numeric_limits<int>::min());
      
      
      current_statement__ = 106;
      edge_to_reaction = context__.vals_i("edge_to_reaction");
      current_statement__ = 106;
      stan::math::check_greater_or_equal(function__, "edge_to_reaction",
                                            edge_to_reaction, 0);
      current_statement__ = 106;
      stan::math::check_less_or_equal(function__, "edge_to_reaction",
                                         edge_to_reaction, N_reaction);
      current_statement__ = 107;
      stan::math::validate_non_negative_index("allostery_type",
                                              "N_allostery", N_allostery);
      current_statement__ = 108;
      context__.validate_dims("data initialization","allostery_type","int",
           std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_type = 
        std::vector<int>(N_allostery, std::numeric_limits<int>::min());
      
      
      current_statement__ = 108;
      allostery_type = context__.vals_i("allostery_type");
      current_statement__ = 108;
      stan::math::check_greater_or_equal(function__, "allostery_type",
                                            allostery_type, 1);
      current_statement__ = 108;
      stan::math::check_less_or_equal(function__, "allostery_type",
                                         allostery_type, 2);
      current_statement__ = 109;
      stan::math::validate_non_negative_index("allostery_mic", "N_allostery",
                                              N_allostery);
      current_statement__ = 110;
      context__.validate_dims("data initialization","allostery_mic","int",
           std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_mic = 
        std::vector<int>(N_allostery, std::numeric_limits<int>::min());
      
      
      current_statement__ = 110;
      allostery_mic = context__.vals_i("allostery_mic");
      current_statement__ = 110;
      stan::math::check_greater_or_equal(function__, "allostery_mic",
                                            allostery_mic, 1);
      current_statement__ = 110;
      stan::math::check_less_or_equal(function__, "allostery_mic",
                                         allostery_mic, N_mic);
      current_statement__ = 111;
      stan::math::validate_non_negative_index("phosphorylation_type",
                                              "N_phosphorylation",
                                              N_phosphorylation);
      current_statement__ = 112;
      context__.validate_dims("data initialization","phosphorylation_type",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_type = 
        std::vector<int>(N_phosphorylation, std::numeric_limits<int>::min());
      
      
      current_statement__ = 112;
      phosphorylation_type = context__.vals_i("phosphorylation_type");
      current_statement__ = 112;
      stan::math::check_greater_or_equal(function__, "phosphorylation_type",
                                            phosphorylation_type, 1);
      current_statement__ = 112;
      stan::math::check_less_or_equal(function__, "phosphorylation_type",
                                         phosphorylation_type, 2);
      current_statement__ = 113;
      stan::math::validate_non_negative_index("sub_by_edge_long",
                                              "N_edge_sub", N_edge_sub);
      current_statement__ = 114;
      context__.validate_dims("data initialization","sub_by_edge_long","int",
           std::vector<size_t>{static_cast<size_t>(N_edge_sub)});
      sub_by_edge_long = 
        std::vector<int>(N_edge_sub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 114;
      sub_by_edge_long = context__.vals_i("sub_by_edge_long");
      current_statement__ = 115;
      stan::math::validate_non_negative_index("sub_by_edge_bounds", "N_edge",
                                              N_edge);
      current_statement__ = 116;
      context__.validate_dims("data initialization","sub_by_edge_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      sub_by_edge_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> sub_by_edge_bounds_flat__;
        current_statement__ = 116;
        sub_by_edge_bounds_flat__ = context__.vals_i("sub_by_edge_bounds");
        current_statement__ = 116;
        pos__ = 1;
        current_statement__ = 116;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 116;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 116;
            stan::model::assign(sub_by_edge_bounds,
              sub_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_by_edge_bounds", stan::model::index_uni(sym2__),
                                                         stan::model::index_uni(sym1__));
            current_statement__ = 116;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 117;
      stan::math::validate_non_negative_index("prod_by_edge_long",
                                              "N_edge_prod", N_edge_prod);
      current_statement__ = 118;
      context__.validate_dims("data initialization","prod_by_edge_long",
          "int", std::vector<size_t>{static_cast<size_t>(N_edge_prod)});
      prod_by_edge_long = 
        std::vector<int>(N_edge_prod, std::numeric_limits<int>::min());
      
      
      current_statement__ = 118;
      prod_by_edge_long = context__.vals_i("prod_by_edge_long");
      current_statement__ = 119;
      stan::math::validate_non_negative_index("prod_by_edge_bounds",
                                              "N_edge", N_edge);
      current_statement__ = 120;
      context__.validate_dims("data initialization","prod_by_edge_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      prod_by_edge_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> prod_by_edge_bounds_flat__;
        current_statement__ = 120;
        prod_by_edge_bounds_flat__ = context__.vals_i("prod_by_edge_bounds");
        current_statement__ = 120;
        pos__ = 1;
        current_statement__ = 120;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 120;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 120;
            stan::model::assign(prod_by_edge_bounds,
              prod_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_by_edge_bounds", stan::model::index_uni(sym2__),
                                                          stan::model::index_uni(sym1__));
            current_statement__ = 120;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 121;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_long",
                                              "N_edge_sub", N_edge_sub);
      current_statement__ = 122;
      context__.validate_dims("data initialization","sub_km_ix_by_edge_long",
          "int", std::vector<size_t>{static_cast<size_t>(N_edge_sub)});
      sub_km_ix_by_edge_long = 
        std::vector<int>(N_edge_sub, std::numeric_limits<int>::min());
      
      
      current_statement__ = 122;
      sub_km_ix_by_edge_long = context__.vals_i("sub_km_ix_by_edge_long");
      current_statement__ = 123;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_bounds",
                                              "N_edge", N_edge);
      current_statement__ = 124;
      context__.validate_dims("data initialization",
          "sub_km_ix_by_edge_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      sub_km_ix_by_edge_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> sub_km_ix_by_edge_bounds_flat__;
        current_statement__ = 124;
        sub_km_ix_by_edge_bounds_flat__ = context__.vals_i("sub_km_ix_by_edge_bounds");
        current_statement__ = 124;
        pos__ = 1;
        current_statement__ = 124;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 124;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 124;
            stan::model::assign(sub_km_ix_by_edge_bounds,
              sub_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_km_ix_by_edge_bounds", stan::model::index_uni(sym2__),
                                                               stan::model::index_uni(sym1__));
            current_statement__ = 124;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 125;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_long",
                                              "N_edge_prod", N_edge_prod);
      current_statement__ = 126;
      context__.validate_dims("data initialization",
          "prod_km_ix_by_edge_long","int",
           std::vector<size_t>{static_cast<size_t>(N_edge_prod)});
      prod_km_ix_by_edge_long = 
        std::vector<int>(N_edge_prod, std::numeric_limits<int>::min());
      
      
      current_statement__ = 126;
      prod_km_ix_by_edge_long = context__.vals_i("prod_km_ix_by_edge_long");
      current_statement__ = 127;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_bounds",
                                              "N_edge", N_edge);
      current_statement__ = 128;
      context__.validate_dims("data initialization",
          "prod_km_ix_by_edge_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      prod_km_ix_by_edge_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> prod_km_ix_by_edge_bounds_flat__;
        current_statement__ = 128;
        prod_km_ix_by_edge_bounds_flat__ = context__.vals_i("prod_km_ix_by_edge_bounds");
        current_statement__ = 128;
        pos__ = 1;
        current_statement__ = 128;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 128;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 128;
            stan::model::assign(prod_km_ix_by_edge_bounds,
              prod_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_km_ix_by_edge_bounds", stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(sym1__));
            current_statement__ = 128;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 129;
      stan::math::validate_non_negative_index("ci_ix_long",
                                              "N_competitive_inhibition",
                                              N_competitive_inhibition);
      current_statement__ = 130;
      context__.validate_dims("data initialization","ci_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      ci_ix_long = 
        std::vector<int>(N_competitive_inhibition, 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 130;
      ci_ix_long = context__.vals_i("ci_ix_long");
      current_statement__ = 131;
      stan::math::validate_non_negative_index("ci_ix_bounds", "N_edge",
                                              N_edge);
      current_statement__ = 132;
      context__.validate_dims("data initialization","ci_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      ci_ix_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> ci_ix_bounds_flat__;
        current_statement__ = 132;
        ci_ix_bounds_flat__ = context__.vals_i("ci_ix_bounds");
        current_statement__ = 132;
        pos__ = 1;
        current_statement__ = 132;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 132;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 132;
            stan::model::assign(ci_ix_bounds,
              ci_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable ci_ix_bounds", stan::model::index_uni(sym2__),
                                                   stan::model::index_uni(sym1__));
            current_statement__ = 132;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 133;
      stan::math::validate_non_negative_index("allostery_ix_long",
                                              "N_allostery", N_allostery);
      current_statement__ = 134;
      context__.validate_dims("data initialization","allostery_ix_long",
          "int", std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_ix_long = 
        std::vector<int>(N_allostery, std::numeric_limits<int>::min());
      
      
      current_statement__ = 134;
      allostery_ix_long = context__.vals_i("allostery_ix_long");
      current_statement__ = 135;
      stan::math::validate_non_negative_index("allostery_ix_bounds",
                                              "N_edge", N_edge);
      current_statement__ = 136;
      context__.validate_dims("data initialization","allostery_ix_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      allostery_ix_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> allostery_ix_bounds_flat__;
        current_statement__ = 136;
        allostery_ix_bounds_flat__ = context__.vals_i("allostery_ix_bounds");
        current_statement__ = 136;
        pos__ = 1;
        current_statement__ = 136;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 136;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 136;
            stan::model::assign(allostery_ix_bounds,
              allostery_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable allostery_ix_bounds", stan::model::index_uni(sym2__),
                                                          stan::model::index_uni(sym1__));
            current_statement__ = 136;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 137;
      stan::math::validate_non_negative_index("phosphorylation_ix_long",
                                              "N_phosphorylation",
                                              N_phosphorylation);
      current_statement__ = 138;
      context__.validate_dims("data initialization",
          "phosphorylation_ix_long","int",
           std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_ix_long = 
        std::vector<int>(N_phosphorylation, std::numeric_limits<int>::min());
      
      
      current_statement__ = 138;
      phosphorylation_ix_long = context__.vals_i("phosphorylation_ix_long");
      current_statement__ = 139;
      stan::math::validate_non_negative_index("phosphorylation_ix_bounds",
                                              "N_edge", N_edge);
      current_statement__ = 140;
      context__.validate_dims("data initialization",
          "phosphorylation_ix_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_edge),
            static_cast<size_t>(2)});
      phosphorylation_ix_bounds = 
        std::vector<std::vector<int>>(N_edge, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> phosphorylation_ix_bounds_flat__;
        current_statement__ = 140;
        phosphorylation_ix_bounds_flat__ = context__.vals_i("phosphorylation_ix_bounds");
        current_statement__ = 140;
        pos__ = 1;
        current_statement__ = 140;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 140;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 140;
            stan::model::assign(phosphorylation_ix_bounds,
              phosphorylation_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable phosphorylation_ix_bounds", stan::model::index_uni(sym2__),
                                                                stan::model::index_uni(sym1__));
            current_statement__ = 140;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 141;
      stan::math::validate_non_negative_index("mic_to_met", "N_mic", N_mic);
      current_statement__ = 142;
      context__.validate_dims("data initialization","mic_to_met","int",
           std::vector<size_t>{static_cast<size_t>(N_mic)});
      mic_to_met = std::vector<int>(N_mic, std::numeric_limits<int>::min());
      
      
      current_statement__ = 142;
      mic_to_met = context__.vals_i("mic_to_met");
      current_statement__ = 142;
      stan::math::check_greater_or_equal(function__, "mic_to_met",
                                            mic_to_met, 1);
      current_statement__ = 142;
      stan::math::check_less_or_equal(function__, "mic_to_met", mic_to_met,
                                         N_metabolite);
      current_statement__ = 143;
      stan::math::validate_non_negative_index("water_stoichiometry",
                                              "N_edge", N_edge);
      current_statement__ = 144;
      context__.validate_dims("data initialization","water_stoichiometry",
          "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      water_stoichiometry__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_edge,
          std::numeric_limits<double>::quiet_NaN());
      new (&water_stoichiometry) Eigen::Map<Eigen::Matrix<double, -1, 1>>(water_stoichiometry__.data(), N_edge);
        
      
      {
        std::vector<local_scalar_t__> water_stoichiometry_flat__;
        current_statement__ = 144;
        water_stoichiometry_flat__ = context__.vals_r("water_stoichiometry");
        current_statement__ = 144;
        pos__ = 1;
        current_statement__ = 144;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 144;
          stan::model::assign(water_stoichiometry,
            water_stoichiometry_flat__[(pos__ - 1)],
            "assigning variable water_stoichiometry", stan::model::index_uni(sym1__));
          current_statement__ = 144;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 145;
      stan::math::validate_non_negative_index("enzyme_knockout_long",
                                              "N_enzyme_knockout",
                                              N_enzyme_knockout);
      current_statement__ = 146;
      context__.validate_dims("data initialization","enzyme_knockout_long",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_enzyme_knockout)});
      enzyme_knockout_long = 
        std::vector<int>(N_enzyme_knockout, std::numeric_limits<int>::min());
      
      
      current_statement__ = 146;
      enzyme_knockout_long = context__.vals_i("enzyme_knockout_long");
      current_statement__ = 146;
      stan::math::check_greater_or_equal(function__, "enzyme_knockout_long",
                                            enzyme_knockout_long, 0);
      current_statement__ = 146;
      stan::math::check_less_or_equal(function__, "enzyme_knockout_long",
                                         enzyme_knockout_long, N_enzyme);
      current_statement__ = 147;
      stan::math::validate_non_negative_index("enzyme_knockout_bounds",
                                              "N_experiment", N_experiment);
      current_statement__ = 148;
      context__.validate_dims("data initialization","enzyme_knockout_bounds",
          "int",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(2)});
      enzyme_knockout_bounds = 
        std::vector<std::vector<int>>(N_experiment, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> enzyme_knockout_bounds_flat__;
        current_statement__ = 148;
        enzyme_knockout_bounds_flat__ = context__.vals_i("enzyme_knockout_bounds");
        current_statement__ = 148;
        pos__ = 1;
        current_statement__ = 148;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 148;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 148;
            stan::model::assign(enzyme_knockout_bounds,
              enzyme_knockout_bounds_flat__[(pos__ - 1)],
              "assigning variable enzyme_knockout_bounds", stan::model::index_uni(sym2__),
                                                             stan::model::index_uni(sym1__));
            current_statement__ = 148;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 149;
      stan::math::validate_non_negative_index("phosphorylation_knockout_long",
                                              "N_phosphorylation_knockout",
                                              N_phosphorylation_knockout);
      current_statement__ = 150;
      context__.validate_dims("data initialization",
          "phosphorylation_knockout_long","int",
           std::vector<size_t>{
            static_cast<size_t>(N_phosphorylation_knockout)});
      phosphorylation_knockout_long = 
        std::vector<int>(N_phosphorylation_knockout, 
          std::numeric_limits<int>::min());
      
      
      current_statement__ = 150;
      phosphorylation_knockout_long = context__.vals_i("phosphorylation_knockout_long");
      current_statement__ = 150;
      stan::math::check_greater_or_equal(function__, "phosphorylation_knockout_long",
                                            phosphorylation_knockout_long, 0);
      current_statement__ = 150;
      stan::math::check_less_or_equal(function__, "phosphorylation_knockout_long",
                                         phosphorylation_knockout_long,
                                         N_phosphorylation);
      current_statement__ = 151;
      stan::math::validate_non_negative_index("phosphorylation_knockout_bounds",
                                              "N_experiment", N_experiment);
      current_statement__ = 152;
      context__.validate_dims("data initialization",
          "phosphorylation_knockout_bounds","int",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(2)});
      phosphorylation_knockout_bounds = 
        std::vector<std::vector<int>>(N_experiment, 
          std::vector<int>(2, std::numeric_limits<int>::min()));
      
      
      {
        std::vector<int> phosphorylation_knockout_bounds_flat__;
        current_statement__ = 152;
        phosphorylation_knockout_bounds_flat__ = context__.vals_i("phosphorylation_knockout_bounds");
        current_statement__ = 152;
        pos__ = 1;
        current_statement__ = 152;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 152;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 152;
            stan::model::assign(phosphorylation_knockout_bounds,
              phosphorylation_knockout_bounds_flat__[(pos__ - 1)],
              "assigning variable phosphorylation_knockout_bounds", stan::model::index_uni(sym2__),
                                                                    stan::model::index_uni(sym1__));
            current_statement__ = 152;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 153;
      stan::math::validate_non_negative_index("subunits", "N_enzyme",
                                              N_enzyme);
      current_statement__ = 154;
      context__.validate_dims("data initialization","subunits","double",
           std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      subunits__ = 
        Eigen::Matrix<double, -1, 1>::Constant(N_enzyme,
          std::numeric_limits<double>::quiet_NaN());
      new (&subunits) Eigen::Map<Eigen::Matrix<double, -1, 1>>(subunits__.data(), N_enzyme);
        
      
      {
        std::vector<local_scalar_t__> subunits_flat__;
        current_statement__ = 154;
        subunits_flat__ = context__.vals_r("subunits");
        current_statement__ = 154;
        pos__ = 1;
        current_statement__ = 154;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 154;
          stan::model::assign(subunits, subunits_flat__[(pos__ - 1)],
            "assigning variable subunits", stan::model::index_uni(sym1__));
          current_statement__ = 154;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 154;
      stan::math::check_greater_or_equal(function__, "subunits", subunits, 1);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("conc_init", "N_experiment",
                                              N_experiment);
      current_statement__ = 156;
      stan::math::validate_non_negative_index("conc_init", "N_mic", N_mic);
      current_statement__ = 157;
      context__.validate_dims("data initialization","conc_init","double",
           std::vector<size_t>{static_cast<size_t>(N_experiment),
            static_cast<size_t>(N_mic)});
      conc_init = 
        std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
          Eigen::Matrix<double, -1, 1>::Constant(N_mic,
            std::numeric_limits<double>::quiet_NaN()));
      
      
      {
        std::vector<local_scalar_t__> conc_init_flat__;
        current_statement__ = 157;
        conc_init_flat__ = context__.vals_r("conc_init");
        current_statement__ = 157;
        pos__ = 1;
        current_statement__ = 157;
        for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          current_statement__ = 157;
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            current_statement__ = 157;
            stan::model::assign(conc_init, conc_init_flat__[(pos__ - 1)],
              "assigning variable conc_init", stan::model::index_uni(sym2__),
                                                stan::model::index_uni(sym1__));
            current_statement__ = 157;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 157;
      stan::math::check_greater_or_equal(function__, "conc_init", conc_init,
                                            0);
      current_statement__ = 158;
      context__.validate_dims("data initialization","rel_tol","double",
           std::vector<size_t>{});
      rel_tol = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 158;
      rel_tol = context__.vals_r("rel_tol")[(1 - 1)];
      current_statement__ = 159;
      context__.validate_dims("data initialization","abs_tol","double",
           std::vector<size_t>{});
      abs_tol = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 159;
      abs_tol = context__.vals_r("abs_tol")[(1 - 1)];
      current_statement__ = 160;
      context__.validate_dims("data initialization","max_num_steps","int",
           std::vector<size_t>{});
      max_num_steps = std::numeric_limits<int>::min();
      
      
      current_statement__ = 160;
      max_num_steps = context__.vals_i("max_num_steps")[(1 - 1)];
      current_statement__ = 161;
      context__.validate_dims("data initialization","likelihood","int",
           std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      
      
      current_statement__ = 161;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 161;
      stan::math::check_greater_or_equal(function__, "likelihood",
                                            likelihood, 0);
      current_statement__ = 161;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 162;
      context__.validate_dims("data initialization","timepoint","double",
           std::vector<size_t>{});
      timepoint = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 162;
      timepoint = context__.vals_r("timepoint")[(1 - 1)];
      current_statement__ = 162;
      stan::math::check_greater_or_equal(function__, "timepoint", timepoint,
                                            0);
      current_statement__ = 163;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 163;
      initial_time = 0;
      current_statement__ = 164;
      stan::math::validate_non_negative_index("km", "N_km", N_km);
      current_statement__ = 165;
      stan::math::validate_non_negative_index("ki",
                                              "N_competitive_inhibition",
                                              N_competitive_inhibition);
      current_statement__ = 166;
      stan::math::validate_non_negative_index("kcat", "N_enzyme", N_enzyme);
      current_statement__ = 167;
      stan::math::validate_non_negative_index("dissociation_constant",
                                              "N_allostery", N_allostery);
      current_statement__ = 168;
      stan::math::validate_non_negative_index("transfer_constant",
                                              "N_allosteric_enzyme",
                                              N_allosteric_enzyme);
      current_statement__ = 169;
      stan::math::validate_non_negative_index("kcat_phos",
                                              "N_phosphorylation",
                                              N_phosphorylation);
      current_statement__ = 170;
      stan::math::validate_non_negative_index("dgrs", "N_edge", N_edge);
      current_statement__ = 171;
      stan::math::validate_non_negative_index("conc", "N_experiment",
                                              N_experiment);
      current_statement__ = 172;
      stan::math::validate_non_negative_index("conc", "N_mic", N_mic);
      current_statement__ = 173;
      stan::math::validate_non_negative_index("flux", "N_experiment",
                                              N_experiment);
      current_statement__ = 174;
      stan::math::validate_non_negative_index("flux", "N_reaction",
                                              N_reaction);
      current_statement__ = 175;
      stan::math::validate_non_negative_index("conc_phos", "N_experiment",
                                              N_experiment);
      current_statement__ = 176;
      stan::math::validate_non_negative_index("conc_phos",
                                              "N_phosphorylation",
                                              N_phosphorylation);
      current_statement__ = 177;
      stan::math::validate_non_negative_index("conc_unbalanced",
                                              "N_experiment", N_experiment);
      current_statement__ = 178;
      stan::math::validate_non_negative_index("conc_unbalanced",
                                              "N_unbalanced", N_unbalanced);
      current_statement__ = 179;
      stan::math::validate_non_negative_index("conc_enzyme", "N_experiment",
                                              N_experiment);
      current_statement__ = 180;
      stan::math::validate_non_negative_index("conc_enzyme", "N_enzyme",
                                              N_enzyme);
      current_statement__ = 181;
      stan::math::validate_non_negative_index("drain", "N_experiment",
                                              N_experiment);
      current_statement__ = 182;
      stan::math::validate_non_negative_index("drain", "N_drain", N_drain);
      current_statement__ = 183;
      stan::math::validate_non_negative_index("free_enzyme_ratio",
                                              "N_experiment", N_experiment);
      current_statement__ = 184;
      stan::math::validate_non_negative_index("free_enzyme_ratio", "N_edge",
                                              N_edge);
      current_statement__ = 185;
      stan::math::validate_non_negative_index("saturation", "N_experiment",
                                              N_experiment);
      current_statement__ = 186;
      stan::math::validate_non_negative_index("saturation", "N_edge", N_edge);
      current_statement__ = 187;
      stan::math::validate_non_negative_index("allostery", "N_experiment",
                                              N_experiment);
      current_statement__ = 188;
      stan::math::validate_non_negative_index("allostery", "N_edge", N_edge);
      current_statement__ = 189;
      stan::math::validate_non_negative_index("phosphorylation",
                                              "N_experiment", N_experiment);
      current_statement__ = 190;
      stan::math::validate_non_negative_index("phosphorylation", "N_edge",
                                              N_edge);
      current_statement__ = 191;
      stan::math::validate_non_negative_index("reversibility",
                                              "N_experiment", N_experiment);
      current_statement__ = 192;
      stan::math::validate_non_negative_index("reversibility", "N_edge",
                                              N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_km + N_competitive_inhibition + N_enzyme + N_allostery
       + N_allosteric_enzyme + N_phosphorylation + N_edge;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "out_of_sample_model_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> km =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_km, DUMMY_VAR__);
      current_statement__ = 1;
      km = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_km);
      Eigen::Matrix<local_scalar_t__, -1, 1> ki =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_competitive_inhibition, DUMMY_VAR__);
      current_statement__ = 2;
      ki = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
             N_competitive_inhibition);
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_enzyme,
           DUMMY_VAR__);
      current_statement__ = 3;
      kcat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               N_enzyme);
      Eigen::Matrix<local_scalar_t__, -1, 1> dissociation_constant =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_allostery,
           DUMMY_VAR__);
      current_statement__ = 4;
      dissociation_constant = in__.template read<
                                Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                N_allostery);
      Eigen::Matrix<local_scalar_t__, -1, 1> transfer_constant =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_allosteric_enzyme, DUMMY_VAR__);
      current_statement__ = 5;
      transfer_constant = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_allosteric_enzyme);
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat_phos =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_phosphorylation,
           DUMMY_VAR__);
      current_statement__ = 6;
      kcat_phos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N_phosphorylation);
      Eigen::Matrix<local_scalar_t__, -1, 1> dgrs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      current_statement__ = 7;
      dgrs = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "out_of_sample_model_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> km =
         Eigen::Matrix<double, -1, 1>::Constant(N_km,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      km = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(N_km);
      Eigen::Matrix<double, -1, 1> ki =
         Eigen::Matrix<double, -1, 1>::Constant(N_competitive_inhibition,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      ki = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
             N_competitive_inhibition);
      Eigen::Matrix<double, -1, 1> kcat =
         Eigen::Matrix<double, -1, 1>::Constant(N_enzyme,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      kcat = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               N_enzyme);
      Eigen::Matrix<double, -1, 1> dissociation_constant =
         Eigen::Matrix<double, -1, 1>::Constant(N_allostery,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 4;
      dissociation_constant = in__.template read<
                                Eigen::Matrix<local_scalar_t__, -1, 1>>(
                                N_allostery);
      Eigen::Matrix<double, -1, 1> transfer_constant =
         Eigen::Matrix<double, -1, 1>::Constant(N_allosteric_enzyme,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 5;
      transfer_constant = in__.template read<
                            Eigen::Matrix<local_scalar_t__, -1, 1>>(
                            N_allosteric_enzyme);
      Eigen::Matrix<double, -1, 1> kcat_phos =
         Eigen::Matrix<double, -1, 1>::Constant(N_phosphorylation,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 6;
      kcat_phos = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
                    N_phosphorylation);
      Eigen::Matrix<double, -1, 1> dgrs =
         Eigen::Matrix<double, -1, 1>::Constant(N_edge,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 7;
      dgrs = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(
               N_edge);
      out__.write(km);
      out__.write(ki);
      out__.write(kcat);
      out__.write(dissociation_constant);
      out__.write(transfer_constant);
      out__.write(kcat_phos);
      out__.write(dgrs);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      std::vector<Eigen::Matrix<double, -1, 1>> conc =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_mic,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> flux =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_reaction,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> conc_phos =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_phosphorylation,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> conc_unbalanced =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_unbalanced,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> conc_enzyme =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_enzyme,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> drain =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_drain,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> free_enzyme_ratio =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> saturation =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> allostery =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> phosphorylation =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double, -1, 1>> reversibility =
         std::vector<Eigen::Matrix<double, -1, 1>>(N_experiment, 
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 24;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 19;
        stan::model::assign(drain,
          stan::math::to_vector(
            stan::math::normal_rng(
              stan::model::rvalue(priors_drain, "priors_drain",
                stan::model::index_uni(1), stan::model::index_uni(e)),
              stan::model::rvalue(priors_drain, "priors_drain",
                stan::model::index_uni(2), stan::model::index_uni(e)),
              base_rng__)),
          "assigning variable drain", stan::model::index_uni(e));
        current_statement__ = 20;
        stan::model::assign(conc_phos,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_phos, "priors_conc_phos",
                  stan::model::index_uni(1), stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_phos, "priors_conc_phos",
                stan::model::index_uni(2), stan::model::index_uni(e)),
              base_rng__)),
          "assigning variable conc_phos", stan::model::index_uni(e));
        current_statement__ = 21;
        stan::model::assign(conc_unbalanced,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_unbalanced,
                  "priors_conc_unbalanced",
                  stan::model::index_uni(1), stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_unbalanced,
                "priors_conc_unbalanced",
                stan::model::index_uni(2), stan::model::index_uni(e)),
              base_rng__)),
          "assigning variable conc_unbalanced", stan::model::index_uni(e));
        current_statement__ = 22;
        stan::model::assign(conc_enzyme,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_enzyme, "priors_conc_enzyme",
                  stan::model::index_uni(1), stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_enzyme, "priors_conc_enzyme",
                stan::model::index_uni(2), stan::model::index_uni(e)),
              base_rng__)),
          "assigning variable conc_enzyme", stan::model::index_uni(e));
      }
      current_statement__ = 53;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 25;
        stan::model::assign(flux, stan::math::rep_vector(0, N_reaction),
          "assigning variable flux", stan::model::index_uni(e));
        current_statement__ = 26;
        stan::math::validate_non_negative_index("conc_enzyme_experiment",
                                                "N_enzyme", N_enzyme);
        Eigen::Matrix<double, -1, 1> conc_enzyme_experiment =
           Eigen::Matrix<double, -1, 1>::Constant(N_enzyme,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 27;
        stan::model::assign(conc_enzyme_experiment,
          stan::model::rvalue(conc_enzyme, "conc_enzyme",
            stan::model::index_uni(e)),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 28;
        stan::math::validate_non_negative_index("conc_phos_experiment",
                                                "N_phosphorylation",
                                                N_phosphorylation);
        Eigen::Matrix<double, -1, 1> conc_phos_experiment =
           Eigen::Matrix<double, -1, 1>::Constant(N_phosphorylation,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 29;
        stan::model::assign(conc_phos_experiment,
          stan::model::rvalue(conc_phos, "conc_phos",
            stan::model::index_uni(e)),
          "assigning variable conc_phos_experiment");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("conc_balanced",
                                                "N_mic - N_unbalanced",
                                                (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<double, -1, 1>> conc_balanced =
           std::vector<Eigen::Matrix<double, -1, 1>>(1, 
             Eigen::Matrix<double, -1, 1>::Constant((N_mic - N_unbalanced),
               std::numeric_limits<double>::quiet_NaN()));
        int N_eko_experiment = std::numeric_limits<int>::min();
        current_statement__ = 32;
        N_eko_experiment = measure_ragged(enzyme_knockout_bounds,
                             e, pstream__);
        int N_pko_experiment = std::numeric_limits<int>::min();
        current_statement__ = 33;
        N_pko_experiment = measure_ragged(phosphorylation_knockout_bounds,
                             e, pstream__);
        current_statement__ = 38;
        if (stan::math::logical_gt(N_eko_experiment, 0)) {
          current_statement__ = 34;
          stan::math::validate_non_negative_index("eko_experiment",
                                                  "N_eko_experiment",
                                                  N_eko_experiment);
          std::vector<int> eko_experiment =
             std::vector<int>(N_eko_experiment, 
               std::numeric_limits<int>::min());
          current_statement__ = 35;
          stan::model::assign(eko_experiment,
            extract_ragged(enzyme_knockout_long, enzyme_knockout_bounds,
              e, pstream__), "assigning variable eko_experiment");
          current_statement__ = 36;
          stan::model::assign(conc_enzyme_experiment,
            stan::math::rep_vector(0, N_eko_experiment),
            "assigning variable conc_enzyme_experiment", stan::model::index_multi(eko_experiment));
        } 
        current_statement__ = 43;
        if (stan::math::logical_gt(N_pko_experiment, 0)) {
          current_statement__ = 39;
          stan::math::validate_non_negative_index("pko_experiment",
                                                  "N_pko_experiment",
                                                  N_pko_experiment);
          std::vector<int> pko_experiment =
             std::vector<int>(N_pko_experiment, 
               std::numeric_limits<int>::min());
          current_statement__ = 40;
          stan::model::assign(pko_experiment,
            extract_ragged(phosphorylation_knockout_long,
              phosphorylation_knockout_bounds, e, pstream__),
            "assigning variable pko_experiment");
          current_statement__ = 41;
          stan::model::assign(conc_phos_experiment,
            stan::math::rep_vector(0, N_pko_experiment),
            "assigning variable conc_phos_experiment", stan::model::index_multi(pko_experiment));
        } 
        current_statement__ = 44;
        stan::model::assign(conc_balanced,
          stan::math::ode_bdf_tol(dbalanced_dt_odefunctor__(),
            stan::model::rvalue(conc_init, "conc_init",
              stan::model::index_uni(e),
                stan::model::index_multi(balanced_mic_ix)), initial_time,
            std::vector<double>{timepoint}, rel_tol, abs_tol, max_num_steps,
            pstream__,
            stan::model::rvalue(conc_unbalanced, "conc_unbalanced",
              stan::model::index_uni(e)), balanced_mic_ix, unbalanced_mic_ix,
            conc_enzyme_experiment, dgrs, kcat, km, ki, transfer_constant,
            dissociation_constant, kcat_phos, conc_phos_experiment,
            stan::model::rvalue(drain, "drain", stan::model::index_uni(e)),
            S, subunits, edge_type, edge_to_enzyme, edge_to_drain,
            sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
            prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
            phosphorylation_ix_long, phosphorylation_ix_bounds,
            phosphorylation_type), "assigning variable conc_balanced");
        current_statement__ = 45;
        stan::model::assign(conc,
          stan::model::rvalue(conc_balanced, "conc_balanced",
            stan::model::index_uni(1)),
          "assigning variable conc", stan::model::index_uni(e),
                                       stan::model::index_multi(balanced_mic_ix));
        current_statement__ = 46;
        stan::model::assign(conc,
          stan::model::rvalue(conc_unbalanced, "conc_unbalanced",
            stan::model::index_uni(e)),
          "assigning variable conc", stan::model::index_uni(e),
                                       stan::model::index_multi(unbalanced_mic_ix));
        current_statement__ = 47;
        stan::math::validate_non_negative_index("edge_flux", "N_edge", N_edge);
        Eigen::Matrix<double, -1, 1> edge_flux =
           Eigen::Matrix<double, -1, 1>::Constant(N_edge,
             std::numeric_limits<double>::quiet_NaN());
        current_statement__ = 48;
        stan::model::assign(edge_flux,
          get_edge_flux(
            stan::model::rvalue(conc, "conc", stan::model::index_uni(e)),
            conc_enzyme_experiment, dgrs, kcat, km, ki, transfer_constant,
            dissociation_constant, kcat_phos, conc_phos_experiment,
            stan::model::rvalue(drain, "drain", stan::model::index_uni(e)),
            S, subunits, edge_type, edge_to_enzyme, edge_to_drain,
            sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
            prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
            phosphorylation_ix_long, phosphorylation_ix_bounds,
            phosphorylation_type, pstream__), "assigning variable edge_flux");
        current_statement__ = 51;
        for (int j = 1; j <= N_edge; ++j) {
          current_statement__ = 49;
          stan::model::assign(flux,
            (stan::model::rvalue(flux, "flux",
               stan::model::index_uni(e),
                 stan::model::index_uni(stan::model::rvalue(edge_to_reaction,
                                          "edge_to_reaction",
                                          stan::model::index_uni(j)))) +
              stan::model::rvalue(edge_flux, "edge_flux",
                stan::model::index_uni(j))),
            "assigning variable flux", stan::model::index_uni(e),
                                         stan::model::index_uni(stan::model::rvalue(
                                                                  edge_to_reaction,
                                                                  "edge_to_reaction",
                                                                  stan::model::index_uni(j))));
        }
      }
      current_statement__ = 60;
      for (int e = 1; e <= N_experiment; ++e) {
        current_statement__ = 54;
        stan::model::assign(free_enzyme_ratio,
          get_free_enzyme_ratio(
            stan::model::rvalue(conc, "conc", stan::model::index_uni(e)), S,
            km, ki, edge_type, sub_km_ix_by_edge_long,
            sub_km_ix_by_edge_bounds, prod_km_ix_by_edge_long,
            prod_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
            prod_by_edge_long, prod_by_edge_bounds, ci_ix_long,
            ci_ix_bounds, pstream__),
          "assigning variable free_enzyme_ratio", stan::model::index_uni(e));
        current_statement__ = 55;
        stan::model::assign(saturation,
          get_saturation(
            stan::model::rvalue(conc, "conc", stan::model::index_uni(e)), km,
            stan::model::rvalue(free_enzyme_ratio, "free_enzyme_ratio",
              stan::model::index_uni(e)), sub_km_ix_by_edge_long,
            sub_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
            edge_type, pstream__),
          "assigning variable saturation", stan::model::index_uni(e));
        current_statement__ = 56;
        stan::model::assign(allostery,
          get_allostery(
            stan::model::rvalue(conc, "conc", stan::model::index_uni(e)),
            stan::model::rvalue(free_enzyme_ratio, "free_enzyme_ratio",
              stan::model::index_uni(e)), transfer_constant,
            dissociation_constant, subunits, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic,
            edge_to_tc, pstream__),
          "assigning variable allostery", stan::model::index_uni(e));
        current_statement__ = 57;
        stan::model::assign(phosphorylation,
          get_phosphorylation(kcat_phos,
            stan::model::rvalue(conc_phos, "conc_phos",
              stan::model::index_uni(e)), phosphorylation_ix_long,
            phosphorylation_ix_bounds, phosphorylation_type,
            subunits, pstream__),
          "assigning variable phosphorylation", stan::model::index_uni(e));
        current_statement__ = 58;
        stan::model::assign(reversibility,
          get_reversibility(dgrs, S,
            stan::model::rvalue(conc, "conc", stan::model::index_uni(e)),
            edge_type, pstream__),
          "assigning variable reversibility", stan::model::index_uni(e));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "conc", conc, 0);
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(conc[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(flux[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(conc_phos[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(conc_unbalanced[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(conc_enzyme[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(drain[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(free_enzyme_ratio[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(saturation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(allostery[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(phosphorylation[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
          out__.write(reversibility[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_std_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> km =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_km, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
        stan::model::assign(km, in__.read<local_scalar_t__>(),
          "assigning variable km", stan::model::index_uni(sym1__));
      }
      out__.write(km);
      Eigen::Matrix<local_scalar_t__, -1, 1> ki =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_competitive_inhibition, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
        stan::model::assign(ki, in__.read<local_scalar_t__>(),
          "assigning variable ki", stan::model::index_uni(sym1__));
      }
      out__.write(ki);
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_enzyme,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        stan::model::assign(kcat, in__.read<local_scalar_t__>(),
          "assigning variable kcat", stan::model::index_uni(sym1__));
      }
      out__.write(kcat);
      Eigen::Matrix<local_scalar_t__, -1, 1> dissociation_constant =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_allostery,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
        stan::model::assign(dissociation_constant,
          in__.read<local_scalar_t__>(),
          "assigning variable dissociation_constant", stan::model::index_uni(sym1__));
      }
      out__.write(dissociation_constant);
      Eigen::Matrix<local_scalar_t__, -1, 1> transfer_constant =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(
           N_allosteric_enzyme, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
        stan::model::assign(transfer_constant, in__.read<local_scalar_t__>(),
          "assigning variable transfer_constant", stan::model::index_uni(sym1__));
      }
      out__.write(transfer_constant);
      Eigen::Matrix<local_scalar_t__, -1, 1> kcat_phos =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_phosphorylation,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
        stan::model::assign(kcat_phos, in__.read<local_scalar_t__>(),
          "assigning variable kcat_phos", stan::model::index_uni(sym1__));
      }
      out__.write(kcat_phos);
      Eigen::Matrix<local_scalar_t__, -1, 1> dgrs =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(N_edge,
           DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        stan::model::assign(dgrs, in__.read<local_scalar_t__>(),
          "assigning variable dgrs", stan::model::index_uni(sym1__));
      }
      out__.write(dgrs);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"km", "ki", "kcat",
      "dissociation_constant", "transfer_constant", "kcat_phos", "dgrs",
      "conc", "flux", "conc_phos", "conc_unbalanced", "conc_enzyme", "drain",
      "free_enzyme_ratio", "saturation", "allostery", "phosphorylation",
      "reversibility"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(N_km)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)},
      std::vector<size_t>{static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_allostery)},
      std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_phosphorylation)},
      std::vector<size_t>{static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_mic)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_reaction)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_phosphorylation)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_unbalanced)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_enzyme)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_drain)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)},
      std::vector<size_t>{static_cast<size_t>(N_experiment),
                          static_cast<size_t>(N_edge)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "km" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ki" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kcat" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dissociation_constant" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "transfer_constant" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kcat_phos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dgrs" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_phos" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_enzyme" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "drain" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "free_enzyme_ratio" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "saturation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "allostery" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phosphorylation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reversibility" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "km" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "ki" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kcat" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dissociation_constant" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "transfer_constant" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "kcat_phos" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "dgrs" + '.' + std::to_string(sym1__));
      } 
    }
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "flux" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_phosphorylation; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_phos" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_unbalanced" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "conc_enzyme" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "drain" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "free_enzyme_ratio" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "saturation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "allostery" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "phosphorylation" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        {
          for (int sym2__ = 1; sym2__ <= N_experiment; ++sym2__) {
            {
              param_names__.emplace_back(std::string() + "reversibility" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
            } 
          }
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"kcat_phos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation) + "},\"block\":\"parameters\"},{\"name\":\"dgrs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"generated_quantities\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_phos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_enzyme\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"drain\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"kcat_phos\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation) + "},\"block\":\"parameters\"},{\"name\":\"dgrs\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "},\"block\":\"parameters\"},{\"name\":\"conc\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"generated_quantities\"},{\"name\":\"flux\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_phos\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_phosphorylation) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_unbalanced\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_enzyme\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"drain\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((N_km + N_competitive_inhibition) + N_enzyme) + N_allostery) +
      N_allosteric_enzyme) + N_phosphorylation) + N_edge);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((((((((N_experiment * N_mic) + (N_experiment * N_reaction)) +
            (N_experiment * N_phosphorylation)) +
           (N_experiment * N_unbalanced)) + (N_experiment * N_enzyme)) +
         (N_experiment * N_drain)) + (N_experiment * N_edge)) +
       (N_experiment * N_edge)) + (N_experiment * N_edge)) +
     (N_experiment * N_edge)) + (N_experiment * N_edge));
      std::vector<double> vars_vec(num_params__
       + (emit_transformed_parameters * num_transformed)
       + (emit_generated_quantities * num_gen_quantities));
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        vars_vec.data(), vars_vec.size());
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  ((((((N_km + N_competitive_inhibition) + N_enzyme) + N_allostery) +
      N_allosteric_enzyme) + N_phosphorylation) + N_edge);
      const size_t num_transformed = 0;
      const size_t num_gen_quantities = 
  (((((((((((N_experiment * N_mic) + (N_experiment * N_reaction)) +
            (N_experiment * N_phosphorylation)) +
           (N_experiment * N_unbalanced)) + (N_experiment * N_enzyme)) +
         (N_experiment * N_drain)) + (N_experiment * N_edge)) +
       (N_experiment * N_edge)) + (N_experiment * N_edge)) +
     (N_experiment * N_edge)) + (N_experiment * N_edge));
      vars.resize(num_params__
        + (emit_transformed_parameters * num_transformed)
        + (emit_generated_quantities * num_gen_quantities));
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 7> names__{"km", "ki", "kcat",
      "dissociation_constant", "transfer_constant", "kcat_phos", "dgrs"};
      const std::array<Eigen::Index, 7> constrain_param_sizes__{N_km,
       N_competitive_inhibition, N_enzyme, N_allostery, N_allosteric_enzyme,
       N_phosphorylation, N_edge};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
     }; } 
using stan_model = out_of_sample_model_model_namespace::out_of_sample_model_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return out_of_sample_model_model_namespace::profiles__;
}

#endif


