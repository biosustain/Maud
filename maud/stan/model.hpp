// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 550> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 108, column 2 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 109, column 2 to column 30)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 110, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 111, column 2 to column 31)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 112, column 2 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 113, column 2 to column 50)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 114, column 2 to column 54)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 115, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 116, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 117, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 118, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 119, column 2 to column 77)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 123, column 2 to column 52)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 124, column 2 to column 72)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 125, column 2 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 126, column 2 to column 116)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 127, column 2 to column 112)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 128, column 2 to column 71)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 129, column 2 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 130, column 2 to column 100)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 131, column 2 to column 127)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 132, column 2 to column 143)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 133, column 2 to column 115)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 135, column 2 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 136, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 137, column 2 to column 53)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 306, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 307, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 308, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 309, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 310, column 2 to column 67)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 311, column 2 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 312, column 2 to column 59)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 313, column 2 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 314, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 315, column 2 to column 53)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 17, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 8, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 27, column 25, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 27, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 30, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 40, column 25, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 40, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 43, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 51, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 52, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 53, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 54, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 54, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 55, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 140, column 4 to column 46)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 141, column 11 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 141, column 4 to column 67)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 142, column 11 to column 16)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 142, column 4 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 143, column 20 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 143, column 4 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 144, column 4 to column 75)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 79, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 145, column 4 to column 72)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 147, column 12 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 147, column 6 to line 148, column 84)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 90, column 2, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 149, column 6 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 146, column 29 to line 150, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 146, column 4 to line 150, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 152, column 12 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 152, column 6 to line 153, column 78)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 154, column 6 to column 76)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 151, column 29 to line 155, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 151, column 4 to line 155, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 156, column 4 to line 203, column 39)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 204, column 4 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 205, column 4 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 207, column 11 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 207, column 4 to line 244, column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 308, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 309, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 309, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 260, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 261, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 261, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 264, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 263, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 263, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 262, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 262, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 267, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 310, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 310, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 162, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 163, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 164, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 164, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 165, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 165, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 170, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 168, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 167, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 166, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 166, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 172, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 311, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 311, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 133, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 134, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 134, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 137, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 138, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 136, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 136, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 140, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 141, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 142, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 143, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 143, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 144, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 144, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 145, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 145, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 146, column 13, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 146, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 147, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 149, column 14, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 149, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 150, column 15, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 150, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 151, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 148, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 148, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 154, column 14, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 154, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 155, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 153, column 19, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 153, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 135, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 135, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 158, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 327, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 327, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 101, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 102, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 102, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 105, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 106, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 104, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 104, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 108, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 109, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 109, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 110, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 110, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 111, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 103, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 103, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 113, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 335, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 335, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 186, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 187, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 187, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 189, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 191, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 190, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 190, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 193, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 194, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 195, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 196, column 24, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 196, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 197, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 202, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 201, column 13, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 199, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 198, column 43, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 198, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 205, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 188, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 188, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 207, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 345, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 345, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 217, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 218, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 218, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 220, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 222, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 221, column 22, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 221, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 224, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 225, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 226, column 19, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 226, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 227, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 232, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 231, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 229, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 228, column 33, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 228, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 235, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 219, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 219, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 237, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 352, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 352, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 247, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 248, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 248, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 251, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 252, column 17, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 252, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 253, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 250, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 250, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 249, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 249, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 256, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 359, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 246, column 6 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 245, column 4 to line 246, column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 70, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 70, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 71, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 72, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 73, column 31, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 73, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 74, column 31, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 74, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 249, column 8 to column 52)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 250, column 8 to column 80)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 251, column 8 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 252, column 8 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 253, column 8 to column 67)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 254, column 8 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 255, column 8 to column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 256, column 8 to column 71)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 257, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 258, column 8 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 259, column 8 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 260, column 8 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 261, column 8 to column 30)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 262, column 8 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 263, column 8 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 264, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 265, column 8 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 266, column 8 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 267, column 8 to column 76)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 268, column 8 to column 56)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 269, column 8 to column 68)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 270, column 8 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 271, column 8 to column 50)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 272, column 8 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 273, column 8 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 274, column 8 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 275, column 8 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 276, column 8 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 248, column 151 to line 277, column 7)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 206, column 4 to line 278, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 138, column 33 to line 279, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 138, column 2 to line 279, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 317, column 4 to column 128)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 318, column 4 to column 146)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 316, column 39 to line 319, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 316, column 2 to line 319, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 321, column 4 to column 122)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 322, column 4 to column 140)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 320, column 39 to line 323, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 320, column 2 to line 323, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 63, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 64, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 64, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 65, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 324, column 33 to line 368, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 324, column 2 to line 368, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 282, column 2 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 283, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 284, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 285, column 2 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 286, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 287, column 2 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 288, column 2 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 290, column 4 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 291, column 4 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 292, column 4 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 293, column 4 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 294, column 4 to column 35)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 289, column 34 to line 295, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 289, column 2 to line 295, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 298, column 6 to column 122)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 297, column 4 to line 298, column 122)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 300, column 6 to column 125)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 299, column 4 to line 300, column 125)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 302, column 6 to column 116)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 301, column 4 to line 302, column 116)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 296, column 22 to line 303, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 296, column 2 to line 303, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 4, column 2 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 5, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 6, column 2 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 7, column 2 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 8, column 2 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 9, column 2 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 10, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 11, column 2 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 12, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 13, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 14, column 2 to column 23)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 15, column 2 to column 22)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 16, column 2 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 17, column 2 to column 35)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 18, column 2 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 19, column 2 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 20, column 2 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 21, column 9 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 21, column 16 to column 22)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 21, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 22, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 22, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 23, column 8 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 23, column 2 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 24, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 24, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 25, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 25, column 2 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 26, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 26, column 2 to column 59)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 27, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 27, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 28, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 28, column 2 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 29, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 29, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 30, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 30, column 2 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 31, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 31, column 2 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 32, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 32, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 33, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 33, column 2 to column 72)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 34, column 8 to column 18)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 34, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 35, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 35, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 36, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 36, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 37, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 37, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 38, column 8 to column 16)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 38, column 2 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 39, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 39, column 2 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 40, column 8 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 40, column 2 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 41, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 41, column 2 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 42, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 42, column 2 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 43, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 43, column 2 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 44, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 44, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 45, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 45, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 46, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 46, column 2 to column 55)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 47, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 47, column 2 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 48, column 8 to column 13)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 48, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 49, column 9 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 49, column 2 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 50, column 9 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 50, column 2 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 51, column 18 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 51, column 2 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 53, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 54, column 2 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 55, column 2 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 56, column 2 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 57, column 2 to column 39)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 58, column 2 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 59, column 8 to column 31)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 59, column 2 to column 88)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 60, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 60, column 2 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 61, column 8 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 61, column 2 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 62, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 62, column 2 to column 61)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 63, column 9 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 63, column 2 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 64, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 64, column 2 to column 95)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 65, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 65, column 2 to column 78)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 66, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 66, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 67, column 18 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 67, column 2 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 68, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 68, column 2 to column 95)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 69, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 69, column 2 to column 85)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 70, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 70, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 71, column 18 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 71, column 2 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 72, column 8 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 72, column 2 to column 96)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 73, column 8 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 73, column 2 to column 82)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 74, column 8 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 74, column 2 to column 52)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 75, column 18 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 75, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 77, column 9 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 77, column 2 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 78, column 13 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 78, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 79, column 18 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 79, column 2 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 80, column 18 to column 22)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 80, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 81, column 18 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 81, column 2 to column 54)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 82, column 18 to column 29)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 82, column 2 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 83, column 18 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 83, column 2 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 84, column 18 to column 23)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 84, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 86, column 18 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 86, column 2 to column 55)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 87, column 11 to column 29)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 87, column 38 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 87, column 2 to column 67)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 88, column 11 to column 29)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 88, column 38 to column 50)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 88, column 2 to column 81)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 89, column 11 to column 29)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 89, column 38 to column 46)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 89, column 2 to column 73)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 90, column 11 to column 29)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 90, column 38 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 90, column 2 to column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 92, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 92, column 44 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 92, column 2 to column 74)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 93, column 2 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 94, column 2 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 95, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 96, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 97, column 2 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 98, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 99, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 100, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 101, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 104, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 105, column 9 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 105, column 23 to column 35)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 105, column 2 to column 92)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 108, column 9 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 109, column 9 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 110, column 9 to column 13)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 111, column 9 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 112, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 113, column 9 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 114, column 9 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 115, column 9 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 116, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 116, column 35 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 117, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 117, column 35 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 118, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 118, column 35 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 119, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 119, column 35 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 123, column 9 to column 13)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 124, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 125, column 9 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 126, column 9 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 127, column 9 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 128, column 9 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 129, column 9 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 130, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 130, column 35 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 131, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 131, column 35 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 132, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 132, column 35 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 133, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 133, column 35 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 135, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 135, column 44 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 136, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 136, column 35 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 137, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 137, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 306, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 307, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 308, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 309, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 310, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 310, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 311, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 311, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 312, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 312, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 313, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 313, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 314, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 314, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 315, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 315, column 35 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 2, column 40, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 11, column 44, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 28, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 20, column 45, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 41, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 33, column 49, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 46, column 133, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 58, column 133, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 75, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 68, column 82, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 78, column 42, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 82, column 59, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 100, column 46, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 131, column 51, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 161, column 96, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 185, column 3, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 216, column 45, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 246, column 59, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 259, column 92, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 307, column 55, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 404, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 404, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 405, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 406, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 407, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 407, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 445, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 403, column 54, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/model.stan', line 1, column 0)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
       z_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_log_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
           z_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
       const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
       pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
           pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_dgr(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_keq(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
int
check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__, const T2__&
                   abs_thresh, const T3__& rel_thresh, std::ostream*
                   pstream__);
int
measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__);
std::vector<int>
extract_ragged(const std::vector<int>& ix_long,
               const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
get_saturation(const T0__& conc_arg__, const T1__& km_arg__, const T2__&
               free_enzyme_ratio_arg__, const std::vector<int>&
               sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
               sub_km_ix_by_edge_bounds, const std::vector<int>&
               sub_by_edge_long, const std::vector<std::vector<int>>&
               sub_by_edge_bounds, const std::vector<int>& edge_type,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                      const T2__& km_arg__, const T3__& ki_arg__,
                      const std::vector<int>& edge_type,
                      const std::vector<int>& ci_mic_ix,
                      const std::vector<int>& sub_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      sub_km_ix_by_edge_bounds, const std::vector<int>&
                      prod_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      prod_km_ix_by_edge_bounds, const std::vector<int>&
                      sub_by_edge_long, const std::vector<std::vector<int>>&
                      sub_by_edge_bounds, const std::vector<int>&
                      prod_by_edge_long, const std::vector<std::vector<int>>&
                      prod_by_edge_bounds, const std::vector<int>&
                      ci_ix_long, const std::vector<std::vector<int>>&
                      ci_ix_bounds, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>>,-1,1>
get_reversibility(const T0__& dgr_arg__, const T1__& temperature, const T2__&
                  S_arg__, const T3__& conc_arg__, const std::vector<int>&
                  edge_type, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
              const T2__& tc_arg__, const T3__& dc_arg__, const T4__&
              subunits_arg__, const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              std::ostream* pstream__);
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T6__>>,-1,1>
get_phosphorylation(const T0__& kcat_pme_arg__, const T1__& conc_pme_arg__,
                    const std::vector<int>& phos_ix_long,
                    const std::vector<std::vector<int>>& phos_ix_bounds,
                    const std::vector<int>& phos_type,
                    const std::vector<int>& phos_pme, const T6__&
                    subunits_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T6__>,-1,1>
get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                  const std::vector<int>& edge_to_drain,
                  const std::vector<int>& sub_by_edge_long,
                  const std::vector<std::vector<int>>& sub_by_edge_bounds,
                  const std::vector<int>& edge_type, const T6__&
                  drain_small_conc_corrector, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                 const std::vector<int>& edge_to_enzyme,
                 const std::vector<int>& edge_type, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::promote_args_t<stan::base_type_t<T10__>, T11__,
                    T12__, stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,1>
get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__, const T2__&
              dgr_arg__, const T3__& kcat_arg__, const T4__& km_arg__,
              const T5__& ki_arg__, const T6__& tc_arg__, const T7__&
              dc_arg__, const T8__& kcat_pme_arg__, const T9__&
              conc_pme_arg__, const T10__& drain_arg__, const T11__&
              temperature, const T12__& drain_small_conc_corrector,
              const T13__& S_arg__, const T14__& subunits_arg__,
              const std::vector<int>& edge_type, const std::vector<int>&
              edge_to_enzyme, const std::vector<int>& edge_to_drain,
              const std::vector<int>& ci_mic_ix, const std::vector<int>&
              sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              sub_km_ix_by_edge_bounds, const std::vector<int>&
              prod_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              prod_km_ix_by_edge_bounds, const std::vector<int>&
              sub_by_edge_long, const std::vector<std::vector<int>>&
              sub_by_edge_bounds, const std::vector<int>& prod_by_edge_long,
              const std::vector<std::vector<int>>& prod_by_edge_bounds,
              const std::vector<int>& ci_ix_long,
              const std::vector<std::vector<int>>& ci_ix_bounds,
              const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              const std::vector<int>& phos_ix_long,
              const std::vector<std::vector<int>>& phos_ix_bounds,
              const std::vector<int>& phosphorylation_type,
              const std::vector<int>& phosphorylation_pme, std::ostream*
              pstream__);
template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_eigen_matrix_dynamic<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                  stan::promote_args_t<stan::base_type_t<T12__>,
                    stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                    T15__, T16__,
                    stan::promote_args_t<stan::base_type_t<T17__>,
                      stan::base_type_t<T18__>>>>>,-1,1>
dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
             const T2__& unbalanced_arg__, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme_arg__, const T6__& dgr_arg__, const T7__& kcat_arg__,
             const T8__& km_arg__, const T9__& ki_arg__, const T10__&
             tc_arg__, const T11__& dc_arg__, const T12__& kcat_pme_arg__,
             const T13__& conc_pme_arg__, const T14__& drain_arg__,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S_arg__, const T18__&
             subunits_arg__, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme, std::ostream*
             pstream__);
struct dbalanced_dt_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            typename T10__, typename T11__, typename T12__, typename T13__,
            typename T14__, typename T15__, typename T16__, typename T17__,
            typename T18__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_col_vector<T6__>,
                                stan::is_vt_not_complex<T6__>,
                                stan::is_col_vector<T7__>,
                                stan::is_vt_not_complex<T7__>,
                                stan::is_col_vector<T8__>,
                                stan::is_vt_not_complex<T8__>,
                                stan::is_col_vector<T9__>,
                                stan::is_vt_not_complex<T9__>,
                                stan::is_col_vector<T10__>,
                                stan::is_vt_not_complex<T10__>,
                                stan::is_col_vector<T11__>,
                                stan::is_vt_not_complex<T11__>,
                                stan::is_col_vector<T12__>,
                                stan::is_vt_not_complex<T12__>,
                                stan::is_col_vector<T13__>,
                                stan::is_vt_not_complex<T13__>,
                                stan::is_col_vector<T14__>,
                                stan::is_vt_not_complex<T14__>,
                                stan::is_stan_scalar<T15__>,
                                stan::is_stan_scalar<T16__>,
                                stan::is_eigen_matrix_dynamic<T17__>,
                                stan::is_vt_not_complex<T17__>,
                                stan::is_col_vector<T18__>,
                                stan::is_vt_not_complex<T18__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>,
                  stan::promote_args_t<stan::base_type_t<T7__>,
                    stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                    stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                    stan::promote_args_t<stan::base_type_t<T12__>,
                      stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                      T15__, T16__,
                      stan::promote_args_t<stan::base_type_t<T17__>,
                        stan::base_type_t<T18__>>>>>,-1,1>
  operator()(const T0__& time, const T1__& current_balanced, std::ostream*
             pstream__, const T2__& unbalanced, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme, const T6__& dgr, const T7__& kcat, const T8__& km,
             const T9__& ki, const T10__& tc, const T11__& dc, const T12__&
             kcat_pme, const T13__& conc_pme, const T14__& drain,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S, const T18__&
             subunits, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme) const {
    return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
             unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dc, kcat_pme,
             conc_pme, drain, temperature, drain_small_conc_corrector, S,
             subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
             sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
             prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
             sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
             prod_by_edge_bounds, ci_ix_long, ci_ix_bounds,
             allostery_ix_long, allostery_ix_bounds, allostery_type,
             allostery_mic, edge_to_tc, phosphorylation_ix_long,
             phosphorylation_ix_bounds, phosphorylation_type,
             phosphorylation_pme, pstream__);
  }
};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
       z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 38;
    return stan::math::fma(
             stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(2)), z,
             stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_log_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
           z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 37;
    return stan::math::exp(
             stan::math::fma(
               stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(2)),
               z,
               stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(1))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
       const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 39;
    stan::math::validate_non_negative_index("out", "size(z)",
      stan::math::size(z));
    current_statement__ = 40;
    stan::math::validate_non_negative_index("out", "rows(z[1])",
      stan::math::rows(stan::model::rvalue(z, "z", stan::model::index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> out =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(z),
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                         stan::model::rvalue(
                                                           z, "z",
                                                           stan::model::index_uni(
                                                             1))),
          DUMMY_VAR__));
    current_statement__ = 43;
    for (int ex = 1; ex <= stan::math::size(z); ++ex) {
      current_statement__ = 524;
      stan::model::assign(out,
        unz_1d(
          stan::model::rvalue(mnsd, "mnsd", stan::model::index_omni(),
            stan::model::index_uni(ex)),
          stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
        "assigning variable out", stan::model::index_uni(ex));
    }
    current_statement__ = 44;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 45;
    stan::math::validate_non_negative_index("out", "size(z)",
      stan::math::size(z));
    current_statement__ = 46;
    stan::math::validate_non_negative_index("out", "rows(z[1])",
      stan::math::rows(stan::model::rvalue(z, "z", stan::model::index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> out =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(z),
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                         stan::model::rvalue(
                                                           z, "z",
                                                           stan::model::index_uni(
                                                             1))),
          DUMMY_VAR__));
    current_statement__ = 49;
    for (int ex = 1; ex <= stan::math::size(z); ++ex) {
      current_statement__ = 526;
      stan::model::assign(out,
        unz_log_1d(
          stan::model::rvalue(mnsd, "mnsd", stan::model::index_omni(),
            stan::model::index_uni(ex)),
          stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
        "assigning variable out", stan::model::index_uni(ex));
    }
    current_statement__ = 50;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_dgr(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T6__>>;
  int current_statement__ = 0;
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& dgf = stan::math::to_ref(dgf_arg__);
  const auto& water_stoichiometry =
    stan::math::to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = stan::math::to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ minus_RT = DUMMY_VAR__;
    local_scalar_t__ dgf_water = DUMMY_VAR__;
    local_scalar_t__ F = DUMMY_VAR__;
    current_statement__ = 54;
    stan::math::validate_non_negative_index("dgrs", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> dgrs;
    current_statement__ = 55;
    stan::model::assign(dgrs,
      stan::math::fma(stan::math::multiply(trans_charge, psi), 96.5,
        stan::math::fma(water_stoichiometry, -150.9,
          stan::math::multiply(stan::math::transpose(S),
            stan::model::rvalue(dgf, "dgf",
              stan::model::index_multi(mic_to_met))))),
      "assigning variable dgrs");
    current_statement__ = 56;
    return dgrs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_keq(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T6__>>;
  int current_statement__ = 0;
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& dgf = stan::math::to_ref(dgf_arg__);
  const auto& water_stoichiometry =
    stan::math::to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = stan::math::to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ minus_RT;
    current_statement__ = 275;
    minus_RT = (-0.008314 * temperature);
    current_statement__ = 276;
    stan::math::validate_non_negative_index("dgrs", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> dgrs;
    current_statement__ = 277;
    stan::model::assign(dgrs,
      get_dgr(S, dgf, temperature, mic_to_met, water_stoichiometry,
        trans_charge, psi, pstream__), "assigning variable dgrs");
    current_statement__ = 278;
    return stan::math::exp(stan::math::divide(dgrs, minus_RT));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
int
check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__, const T2__&
                   abs_thresh, const T3__& rel_thresh, std::ostream*
                   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__, T3__>;
  int current_statement__ = 0;
  const auto& Sv = stan::math::to_ref(Sv_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 227;
    stan::math::validate_non_negative_index("rel_thresh_per_conc",
      "rows(conc)", stan::math::rows(conc));
    Eigen::Matrix<local_scalar_t__,-1,1> rel_thresh_per_conc;
    current_statement__ = 228;
    stan::model::assign(rel_thresh_per_conc,
      stan::math::multiply(conc, rel_thresh),
      "assigning variable rel_thresh_per_conc");
    int relative_check_failed;
    current_statement__ = 229;
    relative_check_failed = stan::math::logical_gt(
                              stan::math::max(
                                stan::math::subtract(stan::math::fabs(Sv),
                                  rel_thresh_per_conc)), 0);
    int absolute_check_failed;
    current_statement__ = 230;
    absolute_check_failed = stan::math::logical_gt(
                              stan::math::max(stan::math::fabs(Sv)),
                              abs_thresh);
    current_statement__ = 232;
    if (relative_check_failed) {
      current_statement__ = 231;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Sv ");
        stan::math::stan_print(pstream__, Sv);
        stan::math::stan_print(pstream__, " not within ");
        stan::math::stan_print(pstream__, rel_thresh_per_conc);
        stan::math::stan_print(pstream__, " of zero.");
        *(pstream__) << std::endl;
      }
    }
    current_statement__ = 234;
    if (absolute_check_failed) {
      current_statement__ = 233;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Sv ");
        stan::math::stan_print(pstream__, Sv);
        stan::math::stan_print(pstream__, " not within ");
        stan::math::stan_print(pstream__, abs_thresh);
        stan::math::stan_print(pstream__, " of zero.");
        *(pstream__) << std::endl;
      }
    }
    current_statement__ = 530;
    return ((stan::math::primitive_value(relative_check_failed) ||
           stan::math::primitive_value(absolute_check_failed)) ? 0 : 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 65;
    return ((stan::model::rvalue(bounds, "bounds", stan::model::index_uni(i),
               stan::model::index_uni(2))
           -
           stan::model::rvalue(bounds, "bounds", stan::model::index_uni(i),
             stan::model::index_uni(1)))
           + 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
extract_ragged(const std::vector<int>& ix_long,
               const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 69;
    return stan::model::rvalue(ix_long, "ix_long",
             stan::model::index_min_max(
               stan::model::rvalue(bounds, "bounds",
                 stan::model::index_uni(i), stan::model::index_uni(1)),
               stan::model::rvalue(bounds, "bounds",
                 stan::model::index_uni(i), stan::model::index_uni(2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
get_saturation(const T0__& conc_arg__, const T1__& km_arg__, const T2__&
               free_enzyme_ratio_arg__, const std::vector<int>&
               sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
               sub_km_ix_by_edge_bounds, const std::vector<int>&
               sub_by_edge_long, const std::vector<std::vector<int>>&
               sub_by_edge_bounds, const std::vector<int>& edge_type,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 147;
    N_edge = stan::math::size(sub_by_edge_bounds);
    current_statement__ = 148;
    stan::math::validate_non_negative_index("prod_conc_over_km", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> prod_conc_over_km =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 161;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 153;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 150;
        stan::model::assign(prod_conc_over_km, 1,
          "assigning variable prod_conc_over_km", stan::model::index_uni(f));
        continue;
      }
      int N_sub;
      current_statement__ = 154;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      current_statement__ = 155;
      stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 156;
      stan::model::assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 157;
      stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
      std::vector<int> sub_km_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 158;
      stan::model::assign(sub_km_ix,
        extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds, f,
          pstream__), "assigning variable sub_km_ix");
      current_statement__ = 159;
      stan::model::assign(prod_conc_over_km,
        stan::math::prod(
          stan::math::elt_divide(
            stan::model::rvalue(conc, "conc",
              stan::model::index_multi(sub_ix)),
            stan::model::rvalue(km, "km", stan::model::index_multi(sub_km_ix)))),
        "assigning variable prod_conc_over_km", stan::model::index_uni(f));
    }
    current_statement__ = 162;
    return stan::math::elt_multiply(prod_conc_over_km, free_enzyme_ratio);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                      const T2__& km_arg__, const T3__& ki_arg__,
                      const std::vector<int>& edge_type,
                      const std::vector<int>& ci_mic_ix,
                      const std::vector<int>& sub_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      sub_km_ix_by_edge_bounds, const std::vector<int>&
                      prod_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      prod_km_ix_by_edge_bounds, const std::vector<int>&
                      sub_by_edge_long, const std::vector<std::vector<int>>&
                      sub_by_edge_bounds, const std::vector<int>&
                      prod_by_edge_long, const std::vector<std::vector<int>>&
                      prod_by_edge_bounds, const std::vector<int>&
                      ci_ix_long, const std::vector<std::vector<int>>&
                      ci_ix_bounds, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 111;
    N_edge = stan::math::cols(S);
    current_statement__ = 112;
    stan::math::validate_non_negative_index("denom", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> denom =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 143;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 117;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 114;
        stan::model::assign(denom, 1, "assigning variable denom",
          stan::model::index_uni(f));
        continue;
      }
      int N_sub;
      current_statement__ = 118;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      int N_prod;
      current_statement__ = 119;
      N_prod = measure_ragged(prod_by_edge_bounds, f, pstream__);
      int N_ci;
      current_statement__ = 120;
      N_ci = measure_ragged(ci_ix_bounds, f, pstream__);
      current_statement__ = 121;
      stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 122;
      stan::model::assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 123;
      stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
      std::vector<int> sub_km_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 124;
      stan::model::assign(sub_km_ix,
        extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds, f,
          pstream__), "assigning variable sub_km_ix");
      current_statement__ = 125;
      stan::math::validate_non_negative_index("prod_ix", "N_prod", N_prod);
      std::vector<int> prod_ix =
        std::vector<int>(N_prod, std::numeric_limits<int>::min());
      current_statement__ = 126;
      stan::model::assign(prod_ix,
        extract_ragged(prod_by_edge_long, prod_by_edge_bounds, f, pstream__),
        "assigning variable prod_ix");
      current_statement__ = 127;
      stan::math::validate_non_negative_index("sub_over_km", "N_sub", N_sub);
      Eigen::Matrix<local_scalar_t__,-1,1> sub_over_km;
      current_statement__ = 128;
      stan::model::assign(sub_over_km,
        stan::math::elt_divide(
          stan::model::rvalue(conc, "conc", stan::model::index_multi(sub_ix)),
          stan::model::rvalue(km, "km", stan::model::index_multi(sub_km_ix))),
        "assigning variable sub_over_km");
      current_statement__ = 129;
      stan::model::assign(denom,
        stan::math::prod(
          stan::math::pow(
            stan::math::add(stan::math::rep_vector(1, N_sub), sub_over_km),
            stan::math::fabs(
              stan::model::rvalue(S, "S", stan::model::index_multi(sub_ix),
                stan::model::index_uni(f))))), "assigning variable denom",
        stan::model::index_uni(f));
      current_statement__ = 136;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 1)) {
        current_statement__ = 130;
        stan::math::validate_non_negative_index("prod_km_ix", "N_prod",
          N_prod);
        std::vector<int> prod_km_ix =
          std::vector<int>(N_prod, std::numeric_limits<int>::min());
        current_statement__ = 131;
        stan::model::assign(prod_km_ix,
          extract_ragged(prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            f, pstream__), "assigning variable prod_km_ix");
        current_statement__ = 132;
        stan::math::validate_non_negative_index("prod_over_km", "N_prod",
          N_prod);
        Eigen::Matrix<local_scalar_t__,-1,1> prod_over_km;
        current_statement__ = 133;
        stan::model::assign(prod_over_km,
          stan::math::elt_divide(
            stan::model::rvalue(conc, "conc",
              stan::model::index_multi(prod_ix)),
            stan::model::rvalue(km, "km",
              stan::model::index_multi(prod_km_ix))),
          "assigning variable prod_over_km");
        current_statement__ = 134;
        stan::model::assign(denom,
          (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
          (stan::math::prod(
             stan::math::pow(
               stan::math::add(stan::math::rep_vector(1, N_prod),
                 prod_over_km),
               stan::math::fabs(
                 stan::model::rvalue(S, "S",
                   stan::model::index_multi(prod_ix),
                   stan::model::index_uni(f))))) - 1)),
          "assigning variable denom", stan::model::index_uni(f));
      }
      current_statement__ = 141;
      if (stan::math::logical_gt(N_ci, 0)) {
        current_statement__ = 137;
        stan::math::validate_non_negative_index("ci_ix", "N_ci", N_ci);
        std::vector<int> ci_ix =
          std::vector<int>(N_ci, std::numeric_limits<int>::min());
        current_statement__ = 138;
        stan::model::assign(ci_ix,
          extract_ragged(ci_ix_long, ci_ix_bounds, f, pstream__),
          "assigning variable ci_ix");
        current_statement__ = 139;
        stan::model::assign(denom,
          (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
          stan::math::sum(
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(
                  stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                    stan::model::index_multi(ci_ix)))),
              stan::model::rvalue(ki, "ki", stan::model::index_multi(ci_ix))))),
          "assigning variable denom", stan::model::index_uni(f));
      }
    }
    current_statement__ = 144;
    return stan::math::inv(denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>>,-1,1>
get_reversibility(const T0__& dgr_arg__, const T1__& temperature, const T2__&
                  S_arg__, const T3__& conc_arg__, const std::vector<int>&
                  edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ RT;
    current_statement__ = 97;
    RT = (0.008314 * temperature);
    int N_edge;
    current_statement__ = 98;
    N_edge = stan::math::cols(S);
    current_statement__ = 99;
    stan::math::validate_non_negative_index("reaction_quotient", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> reaction_quotient;
    current_statement__ = 100;
    stan::model::assign(reaction_quotient,
      stan::math::multiply(stan::math::transpose(S), stan::math::log(conc)),
      "assigning variable reaction_quotient");
    current_statement__ = 101;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 107;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 105;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 1)) {
        current_statement__ = 104;
        stan::model::assign(out, (1 -
          stan::math::exp(
            (stan::math::fma(RT,
               stan::model::rvalue(reaction_quotient, "reaction_quotient",
                 stan::model::index_uni(f)),
               stan::model::rvalue(dgr, "dgr", stan::model::index_uni(f))) /
            RT))), "assigning variable out", stan::model::index_uni(f));
      } else {
        current_statement__ = 103;
        stan::model::assign(out, 1, "assigning variable out",
          stan::model::index_uni(f));
      }
    }
    current_statement__ = 108;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
              const T2__& tc_arg__, const T3__& dc_arg__, const T4__&
              subunits_arg__, const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 165;
    N_edge = stan::math::size(allostery_ix_bounds);
    current_statement__ = 166;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 167;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 185;
    for (int f = 1; f <= N_edge; ++f) {
      int N_allostery;
      current_statement__ = 168;
      N_allostery = measure_ragged(allostery_ix_bounds, f, pstream__);
      current_statement__ = 171;
      if (stan::math::logical_eq(N_allostery, 0)) {
        continue;
      }
      local_scalar_t__ Q_num;
      current_statement__ = 172;
      Q_num = 1;
      local_scalar_t__ Q_denom;
      current_statement__ = 173;
      Q_denom = 1;
      local_scalar_t__ tc_edge;
      current_statement__ = 174;
      tc_edge = stan::model::rvalue(tc, "tc",
                  stan::model::index_uni(
                    stan::model::rvalue(edge_to_tc, "edge_to_tc",
                      stan::model::index_uni(f))));
      {
        std::vector<int> sym1__;
        current_statement__ = 175;
        stan::model::assign(sym1__,
          extract_ragged(allostery_ix_long, allostery_ix_bounds, f, pstream__),
          "assigning variable sym1__");
        current_statement__ = 176;
        for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
          int allostery;
          current_statement__ = 176;
          allostery = sym1__[(sym3__ - 1)];
          local_scalar_t__ conc_over_dc;
          current_statement__ = 177;
          conc_over_dc = (stan::model::rvalue(conc, "conc",
                            stan::model::index_uni(
                              stan::model::rvalue(allostery_mic,
                                "allostery_mic",
                                stan::model::index_uni(allostery))))
            /
            stan::model::rvalue(dc, "dc", stan::model::index_uni(allostery)));
          current_statement__ = 182;
          if (stan::math::logical_eq(
                stan::model::rvalue(allostery_type, "allostery_type",
                  stan::model::index_uni(allostery)), 1)) {
            current_statement__ = 180;
            Q_denom = (Q_denom + conc_over_dc);
          } else {
            current_statement__ = 178;
            Q_num = (Q_num + conc_over_dc);
          }
        }
      }
      current_statement__ = 183;
      stan::model::assign(out,
        stan::math::inv(
          stan::math::fma(tc_edge,
            stan::math::pow(
              ((stan::model::rvalue(free_enzyme_ratio, "free_enzyme_ratio",
                  stan::model::index_uni(f)) * Q_num) / Q_denom),
              stan::model::rvalue(subunits, "subunits",
                stan::model::index_uni(f))), 1)), "assigning variable out",
        stan::model::index_uni(f));
    }
    current_statement__ = 186;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T6__>>,-1,1>
get_phosphorylation(const T0__& kcat_pme_arg__, const T1__& conc_pme_arg__,
                    const std::vector<int>& phos_ix_long,
                    const std::vector<std::vector<int>>& phos_ix_bounds,
                    const std::vector<int>& phos_type,
                    const std::vector<int>& phos_pme, const T6__&
                    subunits_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 189;
    N_edge = stan::math::size(phos_ix_bounds);
    current_statement__ = 190;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 191;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 208;
    for (int f = 1; f <= N_edge; ++f) {
      int N_phos;
      current_statement__ = 192;
      N_phos = measure_ragged(phos_ix_bounds, f, pstream__);
      current_statement__ = 195;
      if (stan::math::logical_eq(N_phos, 0)) {
        continue;
      }
      local_scalar_t__ alpha;
      current_statement__ = 196;
      alpha = 0;
      local_scalar_t__ beta;
      current_statement__ = 197;
      beta = 0;
      {
        std::vector<int> sym1__;
        current_statement__ = 198;
        stan::model::assign(sym1__,
          extract_ragged(phos_ix_long, phos_ix_bounds, f, pstream__),
          "assigning variable sym1__");
        current_statement__ = 199;
        for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
          int phos;
          current_statement__ = 199;
          phos = sym1__[(sym3__ - 1)];
          local_scalar_t__ kcat_times_conc;
          current_statement__ = 200;
          kcat_times_conc = (stan::model::rvalue(kcat_pme, "kcat_pme",
                               stan::model::index_uni(
                                 stan::model::rvalue(phos_pme, "phos_pme",
                                   stan::model::index_uni(phos))))
            *
            stan::model::rvalue(conc_pme, "conc_pme",
              stan::model::index_uni(
                stan::model::rvalue(phos_pme, "phos_pme",
                  stan::model::index_uni(phos)))));
          current_statement__ = 205;
          if (stan::math::logical_eq(
                stan::model::rvalue(phos_type, "phos_type",
                  stan::model::index_uni(phos)), 2)) {
            current_statement__ = 203;
            alpha = (alpha + kcat_times_conc);
          } else {
            current_statement__ = 201;
            beta = (beta + kcat_times_conc);
          }
        }
      }
      current_statement__ = 206;
      stan::model::assign(out,
        stan::math::pow((beta / (alpha + beta)),
          stan::model::rvalue(subunits, "subunits", stan::model::index_uni(f))),
        "assigning variable out", stan::model::index_uni(f));
    }
    current_statement__ = 209;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T6__>,-1,1>
get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                  const std::vector<int>& edge_to_drain,
                  const std::vector<int>& sub_by_edge_long,
                  const std::vector<std::vector<int>>& sub_by_edge_bounds,
                  const std::vector<int>& edge_type, const T6__&
                  drain_small_conc_corrector, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T6__>;
  int current_statement__ = 0;
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 212;
    N_edge = stan::math::size(edge_type);
    current_statement__ = 213;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 214;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 222;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 220;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        int N_sub;
        current_statement__ = 215;
        N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
        current_statement__ = 216;
        stan::math::validate_non_negative_index("subs", "N_sub", N_sub);
        std::vector<int> subs =
          std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 217;
        stan::model::assign(subs,
          extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
          "assigning variable subs");
        current_statement__ = 218;
        stan::model::assign(out,
          (stan::model::rvalue(drain, "drain",
             stan::model::index_uni(
               stan::model::rvalue(edge_to_drain, "edge_to_drain",
                 stan::model::index_uni(f)))) *
          stan::math::prod(
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(subs)),
              stan::math::add(
                stan::model::rvalue(conc, "conc",
                  stan::model::index_multi(subs)), drain_small_conc_corrector)))),
          "assigning variable out", stan::model::index_uni(f));
      }
    }
    current_statement__ = 223;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                 const std::vector<int>& edge_to_enzyme,
                 const std::vector<int>& edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 86;
    N_edge = stan::math::size(edge_to_enzyme);
    current_statement__ = 87;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 88;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 93;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 91;
      if (stan::math::logical_neq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 89;
        stan::model::assign(out,
          (stan::model::rvalue(enzyme, "enzyme",
             stan::model::index_uni(
               stan::model::rvalue(edge_to_enzyme, "edge_to_enzyme",
                 stan::model::index_uni(f)))) *
          stan::model::rvalue(kcat, "kcat",
            stan::model::index_uni(
              stan::model::rvalue(edge_to_enzyme, "edge_to_enzyme",
                stan::model::index_uni(f))))), "assigning variable out",
          stan::model::index_uni(f));
      }
    }
    current_statement__ = 94;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::promote_args_t<stan::base_type_t<T10__>, T11__,
                    T12__, stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,1>
get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__, const T2__&
              dgr_arg__, const T3__& kcat_arg__, const T4__& km_arg__,
              const T5__& ki_arg__, const T6__& tc_arg__, const T7__&
              dc_arg__, const T8__& kcat_pme_arg__, const T9__&
              conc_pme_arg__, const T10__& drain_arg__, const T11__&
              temperature, const T12__& drain_small_conc_corrector,
              const T13__& S_arg__, const T14__& subunits_arg__,
              const std::vector<int>& edge_type, const std::vector<int>&
              edge_to_enzyme, const std::vector<int>& edge_to_drain,
              const std::vector<int>& ci_mic_ix, const std::vector<int>&
              sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              sub_km_ix_by_edge_bounds, const std::vector<int>&
              prod_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              prod_km_ix_by_edge_bounds, const std::vector<int>&
              sub_by_edge_long, const std::vector<std::vector<int>>&
              sub_by_edge_bounds, const std::vector<int>& prod_by_edge_long,
              const std::vector<std::vector<int>>& prod_by_edge_bounds,
              const std::vector<int>& ci_ix_long,
              const std::vector<std::vector<int>>& ci_ix_bounds,
              const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              const std::vector<int>& phos_ix_long,
              const std::vector<std::vector<int>>& phos_ix_bounds,
              const std::vector<int>& phosphorylation_type,
              const std::vector<int>& phosphorylation_pme, std::ostream*
              pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>,
                               stan::base_type_t<T6__>,
                               stan::base_type_t<T7__>,
                               stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>,
                               stan::promote_args_t<stan::base_type_t<T10__>,
                                 T11__, T12__, stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>>>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 83;
    N_edge = stan::math::cols(S);
    current_statement__ = 84;
    stan::math::validate_non_negative_index("vmax", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> vmax;
    current_statement__ = 85;
    stan::model::assign(vmax,
      get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__),
      "assigning variable vmax");
    current_statement__ = 95;
    stan::math::validate_non_negative_index("reversibility", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> reversibility;
    current_statement__ = 96;
    stan::model::assign(reversibility,
      get_reversibility(dgr, temperature, S, conc, edge_type, pstream__),
      "assigning variable reversibility");
    current_statement__ = 109;
    stan::math::validate_non_negative_index("free_enzyme_ratio", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> free_enzyme_ratio;
    current_statement__ = 110;
    stan::model::assign(free_enzyme_ratio,
      get_free_enzyme_ratio(conc, S, km, ki, edge_type, ci_mic_ix,
        sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
        prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds, sub_by_edge_long,
        sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
        ci_ix_long, ci_ix_bounds, pstream__),
      "assigning variable free_enzyme_ratio");
    current_statement__ = 145;
    stan::math::validate_non_negative_index("saturation", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> saturation;
    current_statement__ = 146;
    stan::model::assign(saturation,
      get_saturation(conc, km, free_enzyme_ratio, sub_km_ix_by_edge_long,
        sub_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
        edge_type, pstream__), "assigning variable saturation");
    current_statement__ = 163;
    stan::math::validate_non_negative_index("allostery", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> allostery;
    current_statement__ = 164;
    stan::model::assign(allostery,
      get_allostery(conc, free_enzyme_ratio, tc, dc, subunits,
        allostery_ix_long, allostery_ix_bounds, allostery_type,
        allostery_mic, edge_to_tc, pstream__), "assigning variable allostery");
    current_statement__ = 187;
    stan::math::validate_non_negative_index("phosphorylation", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> phosphorylation;
    current_statement__ = 188;
    stan::model::assign(phosphorylation,
      get_phosphorylation(kcat_pme, conc_pme, phos_ix_long, phos_ix_bounds,
        phosphorylation_type, phosphorylation_pme, subunits, pstream__),
      "assigning variable phosphorylation");
    current_statement__ = 210;
    stan::math::validate_non_negative_index("drain_by_edge", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> drain_by_edge;
    current_statement__ = 211;
    stan::model::assign(drain_by_edge,
      get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
        sub_by_edge_bounds, edge_type, drain_small_conc_corrector, pstream__),
      "assigning variable drain_by_edge");
    current_statement__ = 224;
    return stan::math::elt_multiply(
             stan::math::elt_multiply(
               stan::math::elt_multiply(
                 stan::math::elt_multiply(
                   stan::math::elt_multiply(vmax, saturation), reversibility),
                 allostery), phosphorylation), drain_by_edge);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_eigen_matrix_dynamic<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                  stan::promote_args_t<stan::base_type_t<T12__>,
                    stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                    T15__, T16__,
                    stan::promote_args_t<stan::base_type_t<T17__>,
                      stan::base_type_t<T18__>>>>>,-1,1>
dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
             const T2__& unbalanced_arg__, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme_arg__, const T6__& dgr_arg__, const T7__& kcat_arg__,
             const T8__& km_arg__, const T9__& ki_arg__, const T10__&
             tc_arg__, const T11__& dc_arg__, const T12__& kcat_pme_arg__,
             const T13__& conc_pme_arg__, const T14__& drain_arg__,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S_arg__, const T18__&
             subunits_arg__, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>,
                               stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>,
                               stan::base_type_t<T10__>,
                               stan::base_type_t<T11__>,
                               stan::promote_args_t<stan::base_type_t<T12__>,
                                 stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>, T15__, T16__,
                                 stan::promote_args_t<stan::base_type_t<T17__>,
                                   stan::base_type_t<T18__>>>>>;
  int current_statement__ = 0;
  const auto& current_balanced = stan::math::to_ref(current_balanced_arg__);
  const auto& unbalanced = stan::math::to_ref(unbalanced_arg__);
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 542;
    stan::math::validate_non_negative_index("current_concentration",
      "rows(current_balanced) + rows(unbalanced)",
      (stan::math::rows(current_balanced) + stan::math::rows(unbalanced)));
    Eigen::Matrix<local_scalar_t__,-1,1> current_concentration =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::rows(
                                                        current_balanced) +
        stan::math::rows(unbalanced)), DUMMY_VAR__);
    current_statement__ = 544;
    stan::model::assign(current_concentration, current_balanced,
      "assigning variable current_concentration",
      stan::model::index_multi(balanced_ix));
    current_statement__ = 545;
    stan::model::assign(current_concentration, unbalanced,
      "assigning variable current_concentration",
      stan::model::index_multi(unbalanced_ix));
    current_statement__ = 546;
    stan::math::validate_non_negative_index("edge_flux", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> edge_flux;
    current_statement__ = 547;
    stan::model::assign(edge_flux,
      get_edge_flux(current_concentration, enzyme, dgr, kcat, km, ki, tc, dc,
        kcat_pme, conc_pme, drain, temperature, drain_small_conc_corrector,
        S, subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
        sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
        prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds, sub_by_edge_long,
        sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
        ci_ix_long, ci_ix_bounds, allostery_ix_long, allostery_ix_bounds,
        allostery_type, allostery_mic, edge_to_tc, phosphorylation_ix_long,
        phosphorylation_ix_bounds, phosphorylation_type, phosphorylation_pme,
        pstream__), "assigning variable edge_flux");
    current_statement__ = 548;
    return stan::model::rvalue(stan::math::multiply(S, edge_flux),
             "(S * edge_flux)", stan::model::index_multi(balanced_ix));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class model_model final : public model_base_crtp<model_model> {
 private:
  int N_mic;
  int N_edge_sub;
  int N_edge_prod;
  int N_unbalanced;
  int N_metabolite;
  int N_km;
  int N_sub_km;
  int N_prod_km;
  int N_reaction;
  int N_enzyme;
  int N_drain;
  int N_edge;
  int N_allostery;
  int N_allosteric_enzyme;
  int N_phosphorylation;
  int N_pme;
  int N_competitive_inhibition;
  Eigen::Matrix<double,-1,-1> S_data__;
  std::vector<int> balanced_mic_ix;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> ci_mic_ix;
  std::vector<int> edge_type;
  std::vector<int> edge_to_enzyme;
  std::vector<int> edge_to_tc;
  std::vector<int> edge_to_drain;
  std::vector<int> edge_to_reaction;
  std::vector<int> allostery_type;
  std::vector<int> allostery_mic;
  std::vector<int> phosphorylation_type;
  std::vector<int> phosphorylation_pme;
  std::vector<int> sub_by_edge_long;
  std::vector<std::vector<int>> sub_by_edge_bounds;
  std::vector<int> prod_by_edge_long;
  std::vector<std::vector<int>> prod_by_edge_bounds;
  std::vector<int> sub_km_ix_by_edge_long;
  std::vector<std::vector<int>> sub_km_ix_by_edge_bounds;
  std::vector<int> prod_km_ix_by_edge_long;
  std::vector<std::vector<int>> prod_km_ix_by_edge_bounds;
  std::vector<int> ci_ix_long;
  std::vector<std::vector<int>> ci_ix_bounds;
  std::vector<int> allostery_ix_long;
  std::vector<std::vector<int>> allostery_ix_bounds;
  std::vector<int> phosphorylation_ix_long;
  std::vector<std::vector<int>> phosphorylation_ix_bounds;
  std::vector<int> mic_to_met;
  Eigen::Matrix<double,-1,1> water_stoichiometry_data__;
  Eigen::Matrix<double,-1,1> transported_charge_data__;
  Eigen::Matrix<double,-1,1> subunits_data__;
  int N_experiment_train;
  int N_flux_measurement_train;
  int N_enzyme_measurement_train;
  int N_conc_measurement_train;
  int N_enzyme_knockout_train;
  int N_pme_knockout_train;
  std::vector<int> enzyme_knockout_train_long;
  std::vector<std::vector<int>> enzyme_knockout_train_bounds;
  std::vector<int> pme_knockout_train_long;
  std::vector<std::vector<int>> pme_knockout_train_bounds;
  Eigen::Matrix<double,-1,1> temperature_train_data__;
  std::vector<int> experiment_yconc_train;
  std::vector<int> mic_ix_yconc_train;
  std::vector<double> yconc_train;
  Eigen::Matrix<double,-1,1> sigma_yconc_train_data__;
  std::vector<int> experiment_yflux_train;
  std::vector<int> reaction_yflux_train;
  std::vector<double> yflux_train;
  Eigen::Matrix<double,-1,1> sigma_yflux_train_data__;
  std::vector<int> experiment_yenz_train;
  std::vector<int> enzyme_yenz_train;
  std::vector<double> yenz_train;
  Eigen::Matrix<double,-1,1> sigma_yenz_train_data__;
  Eigen::Matrix<double,-1,1> prior_loc_dgf_data__;
  Eigen::Matrix<double,-1,-1> prior_cov_dgf_data__;
  std::vector<Eigen::Matrix<double,-1,1>> priors_kcat;
  std::vector<Eigen::Matrix<double,-1,1>> priors_km;
  std::vector<Eigen::Matrix<double,-1,1>> priors_ki;
  std::vector<Eigen::Matrix<double,-1,1>> priors_dissociation_constant;
  std::vector<Eigen::Matrix<double,-1,1>> priors_transfer_constant;
  std::vector<Eigen::Matrix<double,-1,1>> priors_kcat_pme;
  std::vector<Eigen::Matrix<double,-1,1>> priors_psi_train;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> priors_conc_pme_train;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>>
    priors_conc_unbalanced_train;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>>
    priors_conc_enzyme_train;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> priors_drain_train;
  std::vector<Eigen::Matrix<double,-1,1>> conc_init;
  double rel_tol;
  double abs_tol;
  double steady_state_threshold_abs;
  double steady_state_threshold_rel;
  int max_num_steps;
  int likelihood;
  double drain_small_conc_corrector;
  double timepoint;
  int reject_non_steady;
  double initial_time;
  Eigen::Matrix<double,-1,-1> prior_cov_dgf_chol_data__;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> water_stoichiometry{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> transported_charge{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> subunits{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> temperature_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_yconc_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_yflux_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> sigma_yenz_train{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> prior_loc_dgf{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_cov_dgf{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,-1>> prior_cov_dgf_chol{nullptr, 0, 0};
 public:
  ~model_model() {}
  model_model(stan::io::var_context& context__, unsigned int
              random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_model_namespace::model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 303;
      context__.validate_dims("data initialization", "N_mic", "int",
        std::vector<size_t>{});
      N_mic = std::numeric_limits<int>::min();
      current_statement__ = 303;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      current_statement__ = 303;
      stan::math::check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 304;
      context__.validate_dims("data initialization", "N_edge_sub", "int",
        std::vector<size_t>{});
      N_edge_sub = std::numeric_limits<int>::min();
      current_statement__ = 304;
      N_edge_sub = context__.vals_i("N_edge_sub")[(1 - 1)];
      current_statement__ = 304;
      stan::math::check_greater_or_equal(function__, "N_edge_sub",
        N_edge_sub, 1);
      current_statement__ = 305;
      context__.validate_dims("data initialization", "N_edge_prod", "int",
        std::vector<size_t>{});
      N_edge_prod = std::numeric_limits<int>::min();
      current_statement__ = 305;
      N_edge_prod = context__.vals_i("N_edge_prod")[(1 - 1)];
      current_statement__ = 305;
      stan::math::check_greater_or_equal(function__, "N_edge_prod",
        N_edge_prod, 1);
      current_statement__ = 306;
      context__.validate_dims("data initialization", "N_unbalanced", "int",
        std::vector<size_t>{});
      N_unbalanced = std::numeric_limits<int>::min();
      current_statement__ = 306;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      current_statement__ = 306;
      stan::math::check_greater_or_equal(function__, "N_unbalanced",
        N_unbalanced, 1);
      current_statement__ = 307;
      context__.validate_dims("data initialization", "N_metabolite", "int",
        std::vector<size_t>{});
      N_metabolite = std::numeric_limits<int>::min();
      current_statement__ = 307;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      current_statement__ = 307;
      stan::math::check_greater_or_equal(function__, "N_metabolite",
        N_metabolite, 1);
      current_statement__ = 308;
      context__.validate_dims("data initialization", "N_km", "int",
        std::vector<size_t>{});
      N_km = std::numeric_limits<int>::min();
      current_statement__ = 308;
      N_km = context__.vals_i("N_km")[(1 - 1)];
      current_statement__ = 308;
      stan::math::check_greater_or_equal(function__, "N_km", N_km, 1);
      current_statement__ = 309;
      context__.validate_dims("data initialization", "N_sub_km", "int",
        std::vector<size_t>{});
      N_sub_km = std::numeric_limits<int>::min();
      current_statement__ = 309;
      N_sub_km = context__.vals_i("N_sub_km")[(1 - 1)];
      current_statement__ = 309;
      stan::math::check_greater_or_equal(function__, "N_sub_km", N_sub_km, 1);
      current_statement__ = 310;
      context__.validate_dims("data initialization", "N_prod_km", "int",
        std::vector<size_t>{});
      N_prod_km = std::numeric_limits<int>::min();
      current_statement__ = 310;
      N_prod_km = context__.vals_i("N_prod_km")[(1 - 1)];
      current_statement__ = 310;
      stan::math::check_greater_or_equal(function__, "N_prod_km", N_prod_km,
        1);
      current_statement__ = 311;
      context__.validate_dims("data initialization", "N_reaction", "int",
        std::vector<size_t>{});
      N_reaction = std::numeric_limits<int>::min();
      current_statement__ = 311;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      current_statement__ = 311;
      stan::math::check_greater_or_equal(function__, "N_reaction",
        N_reaction, 1);
      current_statement__ = 312;
      context__.validate_dims("data initialization", "N_enzyme", "int",
        std::vector<size_t>{});
      N_enzyme = std::numeric_limits<int>::min();
      current_statement__ = 312;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      current_statement__ = 312;
      stan::math::check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 313;
      context__.validate_dims("data initialization", "N_drain", "int",
        std::vector<size_t>{});
      N_drain = std::numeric_limits<int>::min();
      current_statement__ = 313;
      N_drain = context__.vals_i("N_drain")[(1 - 1)];
      current_statement__ = 313;
      stan::math::check_greater_or_equal(function__, "N_drain", N_drain, 0);
      current_statement__ = 314;
      context__.validate_dims("data initialization", "N_edge", "int",
        std::vector<size_t>{});
      N_edge = std::numeric_limits<int>::min();
      current_statement__ = 314;
      N_edge = context__.vals_i("N_edge")[(1 - 1)];
      current_statement__ = 314;
      stan::math::check_greater_or_equal(function__, "N_edge", N_edge, 1);
      current_statement__ = 315;
      context__.validate_dims("data initialization", "N_allostery", "int",
        std::vector<size_t>{});
      N_allostery = std::numeric_limits<int>::min();
      current_statement__ = 315;
      N_allostery = context__.vals_i("N_allostery")[(1 - 1)];
      current_statement__ = 315;
      stan::math::check_greater_or_equal(function__, "N_allostery",
        N_allostery, 0);
      current_statement__ = 316;
      context__.validate_dims("data initialization", "N_allosteric_enzyme",
        "int", std::vector<size_t>{});
      N_allosteric_enzyme = std::numeric_limits<int>::min();
      current_statement__ = 316;
      N_allosteric_enzyme = context__.vals_i("N_allosteric_enzyme")[(1 - 1)];
      current_statement__ = 316;
      stan::math::check_greater_or_equal(function__, "N_allosteric_enzyme",
        N_allosteric_enzyme, 0);
      current_statement__ = 317;
      context__.validate_dims("data initialization", "N_phosphorylation",
        "int", std::vector<size_t>{});
      N_phosphorylation = std::numeric_limits<int>::min();
      current_statement__ = 317;
      N_phosphorylation = context__.vals_i("N_phosphorylation")[(1 - 1)];
      current_statement__ = 317;
      stan::math::check_greater_or_equal(function__, "N_phosphorylation",
        N_phosphorylation, 0);
      current_statement__ = 318;
      context__.validate_dims("data initialization", "N_pme", "int",
        std::vector<size_t>{});
      N_pme = std::numeric_limits<int>::min();
      current_statement__ = 318;
      N_pme = context__.vals_i("N_pme")[(1 - 1)];
      current_statement__ = 318;
      stan::math::check_greater_or_equal(function__, "N_pme", N_pme, 0);
      current_statement__ = 319;
      context__.validate_dims("data initialization",
        "N_competitive_inhibition", "int", std::vector<size_t>{});
      N_competitive_inhibition = std::numeric_limits<int>::min();
      current_statement__ = 319;
      N_competitive_inhibition = context__.vals_i("N_competitive_inhibition")[(1
        - 1)];
      current_statement__ = 319;
      stan::math::check_greater_or_equal(function__,
        "N_competitive_inhibition", N_competitive_inhibition, 0);
      current_statement__ = 320;
      stan::math::validate_non_negative_index("S", "N_mic", N_mic);
      current_statement__ = 321;
      stan::math::validate_non_negative_index("S", "N_edge", N_edge);
      current_statement__ = 322;
      context__.validate_dims("data initialization", "S", "double",
        std::vector<size_t>{static_cast<size_t>(N_mic),
          static_cast<size_t>(N_edge)});
      S_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_mic, N_edge,
                   std::numeric_limits<double>::quiet_NaN());
      new (&S) Eigen::Map<Eigen::Matrix<double,-1,-1>>(S_data__.data(),
        N_mic, N_edge);
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 322;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 322;
        pos__ = 1;
        current_statement__ = 322;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 322;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 322;
            stan::model::assign(S, S_flat__[(pos__ - 1)],
              "assigning variable S", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 322;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 323;
      stan::math::validate_non_negative_index("balanced_mic_ix",
        "N_mic - N_unbalanced", (N_mic - N_unbalanced));
      current_statement__ = 324;
      context__.validate_dims("data initialization", "balanced_mic_ix",
        "int",
        std::vector<size_t>{static_cast<size_t>((N_mic - N_unbalanced))});
      balanced_mic_ix = std::vector<int>((N_mic - N_unbalanced),
                          std::numeric_limits<int>::min());
      current_statement__ = 324;
      balanced_mic_ix = context__.vals_i("balanced_mic_ix");
      current_statement__ = 324;
      stan::math::check_greater_or_equal(function__, "balanced_mic_ix",
        balanced_mic_ix, 1);
      current_statement__ = 324;
      stan::math::check_less_or_equal(function__, "balanced_mic_ix",
        balanced_mic_ix, N_mic);
      current_statement__ = 325;
      stan::math::validate_non_negative_index("unbalanced_mic_ix",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 326;
      context__.validate_dims("data initialization", "unbalanced_mic_ix",
        "int", std::vector<size_t>{static_cast<size_t>(N_unbalanced)});
      unbalanced_mic_ix = std::vector<int>(N_unbalanced,
                            std::numeric_limits<int>::min());
      current_statement__ = 326;
      unbalanced_mic_ix = context__.vals_i("unbalanced_mic_ix");
      current_statement__ = 326;
      stan::math::check_greater_or_equal(function__, "unbalanced_mic_ix",
        unbalanced_mic_ix, 1);
      current_statement__ = 326;
      stan::math::check_less_or_equal(function__, "unbalanced_mic_ix",
        unbalanced_mic_ix, N_mic);
      current_statement__ = 327;
      stan::math::validate_non_negative_index("ci_mic_ix",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 328;
      context__.validate_dims("data initialization", "ci_mic_ix", "int",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      ci_mic_ix = std::vector<int>(N_competitive_inhibition,
                    std::numeric_limits<int>::min());
      current_statement__ = 328;
      ci_mic_ix = context__.vals_i("ci_mic_ix");
      current_statement__ = 328;
      stan::math::check_greater_or_equal(function__, "ci_mic_ix", ci_mic_ix,
        1);
      current_statement__ = 328;
      stan::math::check_less_or_equal(function__, "ci_mic_ix", ci_mic_ix,
        N_mic);
      current_statement__ = 329;
      stan::math::validate_non_negative_index("edge_type", "N_edge", N_edge);
      current_statement__ = 330;
      context__.validate_dims("data initialization", "edge_type", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_type = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      current_statement__ = 330;
      edge_type = context__.vals_i("edge_type");
      current_statement__ = 330;
      stan::math::check_greater_or_equal(function__, "edge_type", edge_type,
        1);
      current_statement__ = 330;
      stan::math::check_less_or_equal(function__, "edge_type", edge_type, 3);
      current_statement__ = 331;
      stan::math::validate_non_negative_index("edge_to_enzyme", "N_edge",
        N_edge);
      current_statement__ = 332;
      context__.validate_dims("data initialization", "edge_to_enzyme", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_enzyme = std::vector<int>(N_edge,
                         std::numeric_limits<int>::min());
      current_statement__ = 332;
      edge_to_enzyme = context__.vals_i("edge_to_enzyme");
      current_statement__ = 332;
      stan::math::check_greater_or_equal(function__, "edge_to_enzyme",
        edge_to_enzyme, 0);
      current_statement__ = 332;
      stan::math::check_less_or_equal(function__, "edge_to_enzyme",
        edge_to_enzyme, N_enzyme);
      current_statement__ = 333;
      stan::math::validate_non_negative_index("edge_to_tc", "N_edge", N_edge);
      current_statement__ = 334;
      context__.validate_dims("data initialization", "edge_to_tc", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_tc = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      current_statement__ = 334;
      edge_to_tc = context__.vals_i("edge_to_tc");
      current_statement__ = 334;
      stan::math::check_greater_or_equal(function__, "edge_to_tc",
        edge_to_tc, 0);
      current_statement__ = 334;
      stan::math::check_less_or_equal(function__, "edge_to_tc", edge_to_tc,
        N_allostery);
      current_statement__ = 335;
      stan::math::validate_non_negative_index("edge_to_drain", "N_edge",
        N_edge);
      current_statement__ = 336;
      context__.validate_dims("data initialization", "edge_to_drain", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_drain = std::vector<int>(N_edge,
                        std::numeric_limits<int>::min());
      current_statement__ = 336;
      edge_to_drain = context__.vals_i("edge_to_drain");
      current_statement__ = 336;
      stan::math::check_greater_or_equal(function__, "edge_to_drain",
        edge_to_drain, 0);
      current_statement__ = 336;
      stan::math::check_less_or_equal(function__, "edge_to_drain",
        edge_to_drain, N_drain);
      current_statement__ = 337;
      stan::math::validate_non_negative_index("edge_to_reaction", "N_edge",
        N_edge);
      current_statement__ = 338;
      context__.validate_dims("data initialization", "edge_to_reaction",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_reaction = std::vector<int>(N_edge,
                           std::numeric_limits<int>::min());
      current_statement__ = 338;
      edge_to_reaction = context__.vals_i("edge_to_reaction");
      current_statement__ = 338;
      stan::math::check_greater_or_equal(function__, "edge_to_reaction",
        edge_to_reaction, 0);
      current_statement__ = 338;
      stan::math::check_less_or_equal(function__, "edge_to_reaction",
        edge_to_reaction, N_reaction);
      current_statement__ = 339;
      stan::math::validate_non_negative_index("allostery_type",
        "N_allostery", N_allostery);
      current_statement__ = 340;
      context__.validate_dims("data initialization", "allostery_type", "int",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_type = std::vector<int>(N_allostery,
                         std::numeric_limits<int>::min());
      current_statement__ = 340;
      allostery_type = context__.vals_i("allostery_type");
      current_statement__ = 340;
      stan::math::check_greater_or_equal(function__, "allostery_type",
        allostery_type, 1);
      current_statement__ = 340;
      stan::math::check_less_or_equal(function__, "allostery_type",
        allostery_type, 2);
      current_statement__ = 341;
      stan::math::validate_non_negative_index("allostery_mic", "N_allostery",
        N_allostery);
      current_statement__ = 342;
      context__.validate_dims("data initialization", "allostery_mic", "int",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_mic = std::vector<int>(N_allostery,
                        std::numeric_limits<int>::min());
      current_statement__ = 342;
      allostery_mic = context__.vals_i("allostery_mic");
      current_statement__ = 342;
      stan::math::check_greater_or_equal(function__, "allostery_mic",
        allostery_mic, 1);
      current_statement__ = 342;
      stan::math::check_less_or_equal(function__, "allostery_mic",
        allostery_mic, N_mic);
      current_statement__ = 343;
      stan::math::validate_non_negative_index("phosphorylation_type",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 344;
      context__.validate_dims("data initialization", "phosphorylation_type",
        "int", std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_type = std::vector<int>(N_phosphorylation,
                               std::numeric_limits<int>::min());
      current_statement__ = 344;
      phosphorylation_type = context__.vals_i("phosphorylation_type");
      current_statement__ = 344;
      stan::math::check_greater_or_equal(function__, "phosphorylation_type",
        phosphorylation_type, 1);
      current_statement__ = 344;
      stan::math::check_less_or_equal(function__, "phosphorylation_type",
        phosphorylation_type, 2);
      current_statement__ = 345;
      stan::math::validate_non_negative_index("phosphorylation_pme",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 346;
      context__.validate_dims("data initialization", "phosphorylation_pme",
        "int", std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_pme = std::vector<int>(N_phosphorylation,
                              std::numeric_limits<int>::min());
      current_statement__ = 346;
      phosphorylation_pme = context__.vals_i("phosphorylation_pme");
      current_statement__ = 346;
      stan::math::check_greater_or_equal(function__, "phosphorylation_pme",
        phosphorylation_pme, 1);
      current_statement__ = 346;
      stan::math::check_less_or_equal(function__, "phosphorylation_pme",
        phosphorylation_pme, N_pme);
      current_statement__ = 347;
      stan::math::validate_non_negative_index("sub_by_edge_long",
        "N_edge_sub", N_edge_sub);
      current_statement__ = 348;
      context__.validate_dims("data initialization", "sub_by_edge_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge_sub)});
      sub_by_edge_long = std::vector<int>(N_edge_sub,
                           std::numeric_limits<int>::min());
      current_statement__ = 348;
      sub_by_edge_long = context__.vals_i("sub_by_edge_long");
      current_statement__ = 349;
      stan::math::validate_non_negative_index("sub_by_edge_bounds", "N_edge",
        N_edge);
      current_statement__ = 350;
      context__.validate_dims("data initialization", "sub_by_edge_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      sub_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                             std::vector<int>(2,
                               std::numeric_limits<int>::min()));
      {
        std::vector<int> sub_by_edge_bounds_flat__;
        current_statement__ = 350;
        sub_by_edge_bounds_flat__ = context__.vals_i("sub_by_edge_bounds");
        current_statement__ = 350;
        pos__ = 1;
        current_statement__ = 350;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 350;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 350;
            stan::model::assign(sub_by_edge_bounds,
              sub_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 350;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 351;
      stan::math::validate_non_negative_index("prod_by_edge_long",
        "N_edge_prod", N_edge_prod);
      current_statement__ = 352;
      context__.validate_dims("data initialization", "prod_by_edge_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge_prod)});
      prod_by_edge_long = std::vector<int>(N_edge_prod,
                            std::numeric_limits<int>::min());
      current_statement__ = 352;
      prod_by_edge_long = context__.vals_i("prod_by_edge_long");
      current_statement__ = 353;
      stan::math::validate_non_negative_index("prod_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 354;
      context__.validate_dims("data initialization", "prod_by_edge_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      prod_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                              std::vector<int>(2,
                                std::numeric_limits<int>::min()));
      {
        std::vector<int> prod_by_edge_bounds_flat__;
        current_statement__ = 354;
        prod_by_edge_bounds_flat__ = context__.vals_i("prod_by_edge_bounds");
        current_statement__ = 354;
        pos__ = 1;
        current_statement__ = 354;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 354;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 354;
            stan::model::assign(prod_by_edge_bounds,
              prod_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 354;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 355;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_long",
        "N_sub_km", N_sub_km);
      current_statement__ = 356;
      context__.validate_dims("data initialization",
        "sub_km_ix_by_edge_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_sub_km)});
      sub_km_ix_by_edge_long = std::vector<int>(N_sub_km,
                                 std::numeric_limits<int>::min());
      current_statement__ = 356;
      sub_km_ix_by_edge_long = context__.vals_i("sub_km_ix_by_edge_long");
      current_statement__ = 357;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 358;
      context__.validate_dims("data initialization",
        "sub_km_ix_by_edge_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      sub_km_ix_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                                   std::vector<int>(2,
                                     std::numeric_limits<int>::min()));
      {
        std::vector<int> sub_km_ix_by_edge_bounds_flat__;
        current_statement__ = 358;
        sub_km_ix_by_edge_bounds_flat__ = context__.vals_i("sub_km_ix_by_edge_bounds");
        current_statement__ = 358;
        pos__ = 1;
        current_statement__ = 358;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 358;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 358;
            stan::model::assign(sub_km_ix_by_edge_bounds,
              sub_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_km_ix_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 358;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 359;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_long",
        "N_prod_km", N_prod_km);
      current_statement__ = 360;
      context__.validate_dims("data initialization",
        "prod_km_ix_by_edge_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_prod_km)});
      prod_km_ix_by_edge_long = std::vector<int>(N_prod_km,
                                  std::numeric_limits<int>::min());
      current_statement__ = 360;
      prod_km_ix_by_edge_long = context__.vals_i("prod_km_ix_by_edge_long");
      current_statement__ = 361;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 362;
      context__.validate_dims("data initialization",
        "prod_km_ix_by_edge_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      prod_km_ix_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                                    std::vector<int>(2,
                                      std::numeric_limits<int>::min()));
      {
        std::vector<int> prod_km_ix_by_edge_bounds_flat__;
        current_statement__ = 362;
        prod_km_ix_by_edge_bounds_flat__ = context__.vals_i("prod_km_ix_by_edge_bounds");
        current_statement__ = 362;
        pos__ = 1;
        current_statement__ = 362;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 362;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 362;
            stan::model::assign(prod_km_ix_by_edge_bounds,
              prod_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_km_ix_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 362;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 363;
      stan::math::validate_non_negative_index("ci_ix_long",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 364;
      context__.validate_dims("data initialization", "ci_ix_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      ci_ix_long = std::vector<int>(N_competitive_inhibition,
                     std::numeric_limits<int>::min());
      current_statement__ = 364;
      ci_ix_long = context__.vals_i("ci_ix_long");
      current_statement__ = 365;
      stan::math::validate_non_negative_index("ci_ix_bounds", "N_edge",
        N_edge);
      current_statement__ = 366;
      context__.validate_dims("data initialization", "ci_ix_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      ci_ix_bounds = std::vector<std::vector<int>>(N_edge,
                       std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> ci_ix_bounds_flat__;
        current_statement__ = 366;
        ci_ix_bounds_flat__ = context__.vals_i("ci_ix_bounds");
        current_statement__ = 366;
        pos__ = 1;
        current_statement__ = 366;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 366;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 366;
            stan::model::assign(ci_ix_bounds, ci_ix_bounds_flat__[(pos__ -
              1)], "assigning variable ci_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 366;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 367;
      stan::math::validate_non_negative_index("allostery_ix_long",
        "N_allostery", N_allostery);
      current_statement__ = 368;
      context__.validate_dims("data initialization", "allostery_ix_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_ix_long = std::vector<int>(N_allostery,
                            std::numeric_limits<int>::min());
      current_statement__ = 368;
      allostery_ix_long = context__.vals_i("allostery_ix_long");
      current_statement__ = 369;
      stan::math::validate_non_negative_index("allostery_ix_bounds",
        "N_edge", N_edge);
      current_statement__ = 370;
      context__.validate_dims("data initialization", "allostery_ix_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      allostery_ix_bounds = std::vector<std::vector<int>>(N_edge,
                              std::vector<int>(2,
                                std::numeric_limits<int>::min()));
      {
        std::vector<int> allostery_ix_bounds_flat__;
        current_statement__ = 370;
        allostery_ix_bounds_flat__ = context__.vals_i("allostery_ix_bounds");
        current_statement__ = 370;
        pos__ = 1;
        current_statement__ = 370;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 370;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 370;
            stan::model::assign(allostery_ix_bounds,
              allostery_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable allostery_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 370;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 371;
      stan::math::validate_non_negative_index("phosphorylation_ix_long",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 372;
      context__.validate_dims("data initialization",
        "phosphorylation_ix_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_ix_long = std::vector<int>(N_phosphorylation,
                                  std::numeric_limits<int>::min());
      current_statement__ = 372;
      phosphorylation_ix_long = context__.vals_i("phosphorylation_ix_long");
      current_statement__ = 373;
      stan::math::validate_non_negative_index("phosphorylation_ix_bounds",
        "N_edge", N_edge);
      current_statement__ = 374;
      context__.validate_dims("data initialization",
        "phosphorylation_ix_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      phosphorylation_ix_bounds = std::vector<std::vector<int>>(N_edge,
                                    std::vector<int>(2,
                                      std::numeric_limits<int>::min()));
      {
        std::vector<int> phosphorylation_ix_bounds_flat__;
        current_statement__ = 374;
        phosphorylation_ix_bounds_flat__ = context__.vals_i("phosphorylation_ix_bounds");
        current_statement__ = 374;
        pos__ = 1;
        current_statement__ = 374;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 374;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 374;
            stan::model::assign(phosphorylation_ix_bounds,
              phosphorylation_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable phosphorylation_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 374;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 375;
      stan::math::validate_non_negative_index("mic_to_met", "N_mic", N_mic);
      current_statement__ = 376;
      context__.validate_dims("data initialization", "mic_to_met", "int",
        std::vector<size_t>{static_cast<size_t>(N_mic)});
      mic_to_met = std::vector<int>(N_mic, std::numeric_limits<int>::min());
      current_statement__ = 376;
      mic_to_met = context__.vals_i("mic_to_met");
      current_statement__ = 376;
      stan::math::check_greater_or_equal(function__, "mic_to_met",
        mic_to_met, 1);
      current_statement__ = 376;
      stan::math::check_less_or_equal(function__, "mic_to_met", mic_to_met,
        N_metabolite);
      current_statement__ = 377;
      stan::math::validate_non_negative_index("water_stoichiometry",
        "N_edge", N_edge);
      current_statement__ = 378;
      context__.validate_dims("data initialization", "water_stoichiometry",
        "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      water_stoichiometry_data__ = Eigen::Matrix<double,-1,1>::Constant(N_edge,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&water_stoichiometry)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(water_stoichiometry_data__.data(),
        N_edge);
      {
        std::vector<local_scalar_t__> water_stoichiometry_flat__;
        current_statement__ = 378;
        water_stoichiometry_flat__ = context__.vals_r("water_stoichiometry");
        current_statement__ = 378;
        pos__ = 1;
        current_statement__ = 378;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 378;
          stan::model::assign(water_stoichiometry,
            water_stoichiometry_flat__[(pos__ - 1)],
            "assigning variable water_stoichiometry",
            stan::model::index_uni(sym1__));
          current_statement__ = 378;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 379;
      stan::math::validate_non_negative_index("transported_charge", "N_edge",
        N_edge);
      current_statement__ = 380;
      context__.validate_dims("data initialization", "transported_charge",
        "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      transported_charge_data__ = Eigen::Matrix<double,-1,1>::Constant(N_edge,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&transported_charge)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(transported_charge_data__.data(),
        N_edge);
      {
        std::vector<local_scalar_t__> transported_charge_flat__;
        current_statement__ = 380;
        transported_charge_flat__ = context__.vals_r("transported_charge");
        current_statement__ = 380;
        pos__ = 1;
        current_statement__ = 380;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 380;
          stan::model::assign(transported_charge,
            transported_charge_flat__[(pos__ - 1)],
            "assigning variable transported_charge",
            stan::model::index_uni(sym1__));
          current_statement__ = 380;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 381;
      stan::math::validate_non_negative_index("subunits", "N_enzyme",
        N_enzyme);
      current_statement__ = 382;
      context__.validate_dims("data initialization", "subunits", "double",
        std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      subunits_data__ = Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
                          std::numeric_limits<double>::quiet_NaN());
      new (&subunits)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(subunits_data__.data(),
        N_enzyme);
      {
        std::vector<local_scalar_t__> subunits_flat__;
        current_statement__ = 382;
        subunits_flat__ = context__.vals_r("subunits");
        current_statement__ = 382;
        pos__ = 1;
        current_statement__ = 382;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 382;
          stan::model::assign(subunits, subunits_flat__[(pos__ - 1)],
            "assigning variable subunits", stan::model::index_uni(sym1__));
          current_statement__ = 382;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 382;
      stan::math::check_greater_or_equal(function__, "subunits", subunits, 1);
      current_statement__ = 383;
      context__.validate_dims("data initialization", "N_experiment_train",
        "int", std::vector<size_t>{});
      N_experiment_train = std::numeric_limits<int>::min();
      current_statement__ = 383;
      N_experiment_train = context__.vals_i("N_experiment_train")[(1 - 1)];
      current_statement__ = 383;
      stan::math::check_greater_or_equal(function__, "N_experiment_train",
        N_experiment_train, 1);
      current_statement__ = 384;
      context__.validate_dims("data initialization",
        "N_flux_measurement_train", "int", std::vector<size_t>{});
      N_flux_measurement_train = std::numeric_limits<int>::min();
      current_statement__ = 384;
      N_flux_measurement_train = context__.vals_i("N_flux_measurement_train")[(1
        - 1)];
      current_statement__ = 384;
      stan::math::check_greater_or_equal(function__,
        "N_flux_measurement_train", N_flux_measurement_train, 0);
      current_statement__ = 385;
      context__.validate_dims("data initialization",
        "N_enzyme_measurement_train", "int", std::vector<size_t>{});
      N_enzyme_measurement_train = std::numeric_limits<int>::min();
      current_statement__ = 385;
      N_enzyme_measurement_train = context__.vals_i("N_enzyme_measurement_train")[(1
        - 1)];
      current_statement__ = 385;
      stan::math::check_greater_or_equal(function__,
        "N_enzyme_measurement_train", N_enzyme_measurement_train, 0);
      current_statement__ = 386;
      context__.validate_dims("data initialization",
        "N_conc_measurement_train", "int", std::vector<size_t>{});
      N_conc_measurement_train = std::numeric_limits<int>::min();
      current_statement__ = 386;
      N_conc_measurement_train = context__.vals_i("N_conc_measurement_train")[(1
        - 1)];
      current_statement__ = 386;
      stan::math::check_greater_or_equal(function__,
        "N_conc_measurement_train", N_conc_measurement_train, 0);
      current_statement__ = 387;
      context__.validate_dims("data initialization",
        "N_enzyme_knockout_train", "int", std::vector<size_t>{});
      N_enzyme_knockout_train = std::numeric_limits<int>::min();
      current_statement__ = 387;
      N_enzyme_knockout_train = context__.vals_i("N_enzyme_knockout_train")[(1
        - 1)];
      current_statement__ = 387;
      stan::math::check_greater_or_equal(function__,
        "N_enzyme_knockout_train", N_enzyme_knockout_train, 0);
      current_statement__ = 388;
      context__.validate_dims("data initialization", "N_pme_knockout_train",
        "int", std::vector<size_t>{});
      N_pme_knockout_train = std::numeric_limits<int>::min();
      current_statement__ = 388;
      N_pme_knockout_train = context__.vals_i("N_pme_knockout_train")[(1 -
        1)];
      current_statement__ = 388;
      stan::math::check_greater_or_equal(function__, "N_pme_knockout_train",
        N_pme_knockout_train, 0);
      current_statement__ = 389;
      stan::math::validate_non_negative_index("enzyme_knockout_train_long",
        "N_enzyme_knockout_train", N_enzyme_knockout_train);
      current_statement__ = 390;
      context__.validate_dims("data initialization",
        "enzyme_knockout_train_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_knockout_train)});
      enzyme_knockout_train_long = std::vector<int>(N_enzyme_knockout_train,
                                     std::numeric_limits<int>::min());
      current_statement__ = 390;
      enzyme_knockout_train_long = context__.vals_i("enzyme_knockout_train_long");
      current_statement__ = 390;
      stan::math::check_greater_or_equal(function__,
        "enzyme_knockout_train_long", enzyme_knockout_train_long, 0);
      current_statement__ = 390;
      stan::math::check_less_or_equal(function__,
        "enzyme_knockout_train_long", enzyme_knockout_train_long, N_enzyme);
      current_statement__ = 391;
      stan::math::validate_non_negative_index("enzyme_knockout_train_bounds",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 392;
      context__.validate_dims("data initialization",
        "enzyme_knockout_train_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(2)});
      enzyme_knockout_train_bounds = std::vector<std::vector<int>>(N_experiment_train,
                                       std::vector<int>(2,
                                         std::numeric_limits<int>::min()));
      {
        std::vector<int> enzyme_knockout_train_bounds_flat__;
        current_statement__ = 392;
        enzyme_knockout_train_bounds_flat__ = context__.vals_i("enzyme_knockout_train_bounds");
        current_statement__ = 392;
        pos__ = 1;
        current_statement__ = 392;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 392;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 392;
            stan::model::assign(enzyme_knockout_train_bounds,
              enzyme_knockout_train_bounds_flat__[(pos__ - 1)],
              "assigning variable enzyme_knockout_train_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 392;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 393;
      stan::math::validate_non_negative_index("pme_knockout_train_long",
        "N_pme_knockout_train", N_pme_knockout_train);
      current_statement__ = 394;
      context__.validate_dims("data initialization",
        "pme_knockout_train_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_pme_knockout_train)});
      pme_knockout_train_long = std::vector<int>(N_pme_knockout_train,
                                  std::numeric_limits<int>::min());
      current_statement__ = 394;
      pme_knockout_train_long = context__.vals_i("pme_knockout_train_long");
      current_statement__ = 394;
      stan::math::check_greater_or_equal(function__,
        "pme_knockout_train_long", pme_knockout_train_long, 0);
      current_statement__ = 394;
      stan::math::check_less_or_equal(function__, "pme_knockout_train_long",
        pme_knockout_train_long, N_pme);
      current_statement__ = 395;
      stan::math::validate_non_negative_index("pme_knockout_train_bounds",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 396;
      context__.validate_dims("data initialization",
        "pme_knockout_train_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(2)});
      pme_knockout_train_bounds = std::vector<std::vector<int>>(N_experiment_train,
                                    std::vector<int>(2,
                                      std::numeric_limits<int>::min()));
      {
        std::vector<int> pme_knockout_train_bounds_flat__;
        current_statement__ = 396;
        pme_knockout_train_bounds_flat__ = context__.vals_i("pme_knockout_train_bounds");
        current_statement__ = 396;
        pos__ = 1;
        current_statement__ = 396;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 396;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 396;
            stan::model::assign(pme_knockout_train_bounds,
              pme_knockout_train_bounds_flat__[(pos__ - 1)],
              "assigning variable pme_knockout_train_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 396;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 397;
      stan::math::validate_non_negative_index("temperature_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 398;
      context__.validate_dims("data initialization", "temperature_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train)});
      temperature_train_data__ = Eigen::Matrix<double,-1,1>::Constant(N_experiment_train,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&temperature_train)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(temperature_train_data__.data(),
        N_experiment_train);
      {
        std::vector<local_scalar_t__> temperature_train_flat__;
        current_statement__ = 398;
        temperature_train_flat__ = context__.vals_r("temperature_train");
        current_statement__ = 398;
        pos__ = 1;
        current_statement__ = 398;
        for (int sym1__ = 1; sym1__ <= N_experiment_train; ++sym1__) {
          current_statement__ = 398;
          stan::model::assign(temperature_train,
            temperature_train_flat__[(pos__ - 1)],
            "assigning variable temperature_train",
            stan::model::index_uni(sym1__));
          current_statement__ = 398;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 399;
      stan::math::validate_non_negative_index("experiment_yconc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 400;
      context__.validate_dims("data initialization",
        "experiment_yconc_train", "int",
        std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)});
      experiment_yconc_train = std::vector<int>(N_conc_measurement_train,
                                 std::numeric_limits<int>::min());
      current_statement__ = 400;
      experiment_yconc_train = context__.vals_i("experiment_yconc_train");
      current_statement__ = 400;
      stan::math::check_greater_or_equal(function__,
        "experiment_yconc_train", experiment_yconc_train, 1);
      current_statement__ = 400;
      stan::math::check_less_or_equal(function__, "experiment_yconc_train",
        experiment_yconc_train, N_experiment_train);
      current_statement__ = 401;
      stan::math::validate_non_negative_index("mic_ix_yconc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 402;
      context__.validate_dims("data initialization", "mic_ix_yconc_train",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)});
      mic_ix_yconc_train = std::vector<int>(N_conc_measurement_train,
                             std::numeric_limits<int>::min());
      current_statement__ = 402;
      mic_ix_yconc_train = context__.vals_i("mic_ix_yconc_train");
      current_statement__ = 402;
      stan::math::check_greater_or_equal(function__, "mic_ix_yconc_train",
        mic_ix_yconc_train, 1);
      current_statement__ = 402;
      stan::math::check_less_or_equal(function__, "mic_ix_yconc_train",
        mic_ix_yconc_train, N_mic);
      current_statement__ = 403;
      stan::math::validate_non_negative_index("yconc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 404;
      context__.validate_dims("data initialization", "yconc_train", "double",
        std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)});
      yconc_train = std::vector<double>(N_conc_measurement_train,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 404;
      yconc_train = context__.vals_r("yconc_train");
      current_statement__ = 405;
      stan::math::validate_non_negative_index("sigma_yconc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 406;
      context__.validate_dims("data initialization", "sigma_yconc_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)});
      sigma_yconc_train_data__ = Eigen::Matrix<double,-1,1>::Constant(N_conc_measurement_train,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&sigma_yconc_train)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_yconc_train_data__.data(),
        N_conc_measurement_train);
      {
        std::vector<local_scalar_t__> sigma_yconc_train_flat__;
        current_statement__ = 406;
        sigma_yconc_train_flat__ = context__.vals_r("sigma_yconc_train");
        current_statement__ = 406;
        pos__ = 1;
        current_statement__ = 406;
        for (int sym1__ = 1; sym1__ <= N_conc_measurement_train; ++sym1__) {
          current_statement__ = 406;
          stan::model::assign(sigma_yconc_train,
            sigma_yconc_train_flat__[(pos__ - 1)],
            "assigning variable sigma_yconc_train",
            stan::model::index_uni(sym1__));
          current_statement__ = 406;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 406;
      stan::math::check_greater_or_equal(function__, "sigma_yconc_train",
        sigma_yconc_train, 0);
      current_statement__ = 407;
      stan::math::validate_non_negative_index("experiment_yflux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 408;
      context__.validate_dims("data initialization",
        "experiment_yflux_train", "int",
        std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)});
      experiment_yflux_train = std::vector<int>(N_flux_measurement_train,
                                 std::numeric_limits<int>::min());
      current_statement__ = 408;
      experiment_yflux_train = context__.vals_i("experiment_yflux_train");
      current_statement__ = 408;
      stan::math::check_greater_or_equal(function__,
        "experiment_yflux_train", experiment_yflux_train, 1);
      current_statement__ = 408;
      stan::math::check_less_or_equal(function__, "experiment_yflux_train",
        experiment_yflux_train, N_experiment_train);
      current_statement__ = 409;
      stan::math::validate_non_negative_index("reaction_yflux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 410;
      context__.validate_dims("data initialization", "reaction_yflux_train",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)});
      reaction_yflux_train = std::vector<int>(N_flux_measurement_train,
                               std::numeric_limits<int>::min());
      current_statement__ = 410;
      reaction_yflux_train = context__.vals_i("reaction_yflux_train");
      current_statement__ = 410;
      stan::math::check_greater_or_equal(function__, "reaction_yflux_train",
        reaction_yflux_train, 1);
      current_statement__ = 410;
      stan::math::check_less_or_equal(function__, "reaction_yflux_train",
        reaction_yflux_train, N_reaction);
      current_statement__ = 411;
      stan::math::validate_non_negative_index("yflux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 412;
      context__.validate_dims("data initialization", "yflux_train", "double",
        std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)});
      yflux_train = std::vector<double>(N_flux_measurement_train,
                      std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 412;
      yflux_train = context__.vals_r("yflux_train");
      current_statement__ = 413;
      stan::math::validate_non_negative_index("sigma_yflux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 414;
      context__.validate_dims("data initialization", "sigma_yflux_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)});
      sigma_yflux_train_data__ = Eigen::Matrix<double,-1,1>::Constant(N_flux_measurement_train,
                                   std::numeric_limits<double>::quiet_NaN());
      new (&sigma_yflux_train)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_yflux_train_data__.data(),
        N_flux_measurement_train);
      {
        std::vector<local_scalar_t__> sigma_yflux_train_flat__;
        current_statement__ = 414;
        sigma_yflux_train_flat__ = context__.vals_r("sigma_yflux_train");
        current_statement__ = 414;
        pos__ = 1;
        current_statement__ = 414;
        for (int sym1__ = 1; sym1__ <= N_flux_measurement_train; ++sym1__) {
          current_statement__ = 414;
          stan::model::assign(sigma_yflux_train,
            sigma_yflux_train_flat__[(pos__ - 1)],
            "assigning variable sigma_yflux_train",
            stan::model::index_uni(sym1__));
          current_statement__ = 414;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 414;
      stan::math::check_greater_or_equal(function__, "sigma_yflux_train",
        sigma_yflux_train, 0);
      current_statement__ = 415;
      stan::math::validate_non_negative_index("experiment_yenz_train",
        "N_enzyme_measurement_train", N_enzyme_measurement_train);
      current_statement__ = 416;
      context__.validate_dims("data initialization", "experiment_yenz_train",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement_train)});
      experiment_yenz_train = std::vector<int>(N_enzyme_measurement_train,
                                std::numeric_limits<int>::min());
      current_statement__ = 416;
      experiment_yenz_train = context__.vals_i("experiment_yenz_train");
      current_statement__ = 416;
      stan::math::check_greater_or_equal(function__, "experiment_yenz_train",
        experiment_yenz_train, 0);
      current_statement__ = 416;
      stan::math::check_less_or_equal(function__, "experiment_yenz_train",
        experiment_yenz_train, N_experiment_train);
      current_statement__ = 417;
      stan::math::validate_non_negative_index("enzyme_yenz_train",
        "N_enzyme_measurement_train", N_enzyme_measurement_train);
      current_statement__ = 418;
      context__.validate_dims("data initialization", "enzyme_yenz_train",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement_train)});
      enzyme_yenz_train = std::vector<int>(N_enzyme_measurement_train,
                            std::numeric_limits<int>::min());
      current_statement__ = 418;
      enzyme_yenz_train = context__.vals_i("enzyme_yenz_train");
      current_statement__ = 418;
      stan::math::check_greater_or_equal(function__, "enzyme_yenz_train",
        enzyme_yenz_train, 0);
      current_statement__ = 418;
      stan::math::check_less_or_equal(function__, "enzyme_yenz_train",
        enzyme_yenz_train, N_enzyme);
      current_statement__ = 419;
      stan::math::validate_non_negative_index("yenz_train",
        "N_enzyme_measurement_train", N_enzyme_measurement_train);
      current_statement__ = 420;
      context__.validate_dims("data initialization", "yenz_train", "double",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement_train)});
      yenz_train = std::vector<double>(N_enzyme_measurement_train,
                     std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 420;
      yenz_train = context__.vals_r("yenz_train");
      current_statement__ = 421;
      stan::math::validate_non_negative_index("sigma_yenz_train",
        "N_enzyme_measurement_train", N_enzyme_measurement_train);
      current_statement__ = 422;
      context__.validate_dims("data initialization", "sigma_yenz_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_measurement_train)});
      sigma_yenz_train_data__ = Eigen::Matrix<double,-1,1>::Constant(N_enzyme_measurement_train,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&sigma_yenz_train)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(sigma_yenz_train_data__.data(),
        N_enzyme_measurement_train);
      {
        std::vector<local_scalar_t__> sigma_yenz_train_flat__;
        current_statement__ = 422;
        sigma_yenz_train_flat__ = context__.vals_r("sigma_yenz_train");
        current_statement__ = 422;
        pos__ = 1;
        current_statement__ = 422;
        for (int sym1__ = 1; sym1__ <= N_enzyme_measurement_train; ++sym1__) {
          current_statement__ = 422;
          stan::model::assign(sigma_yenz_train,
            sigma_yenz_train_flat__[(pos__ - 1)],
            "assigning variable sigma_yenz_train",
            stan::model::index_uni(sym1__));
          current_statement__ = 422;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 422;
      stan::math::check_greater_or_equal(function__, "sigma_yenz_train",
        sigma_yenz_train, 0);
      current_statement__ = 423;
      stan::math::validate_non_negative_index("prior_loc_dgf",
        "N_metabolite", N_metabolite);
      current_statement__ = 424;
      context__.validate_dims("data initialization", "prior_loc_dgf",
        "double", std::vector<size_t>{static_cast<size_t>(N_metabolite)});
      prior_loc_dgf_data__ = Eigen::Matrix<double,-1,1>::Constant(N_metabolite,
                               std::numeric_limits<double>::quiet_NaN());
      new (&prior_loc_dgf)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(prior_loc_dgf_data__.data(),
        N_metabolite);
      {
        std::vector<local_scalar_t__> prior_loc_dgf_flat__;
        current_statement__ = 424;
        prior_loc_dgf_flat__ = context__.vals_r("prior_loc_dgf");
        current_statement__ = 424;
        pos__ = 1;
        current_statement__ = 424;
        for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
          current_statement__ = 424;
          stan::model::assign(prior_loc_dgf, prior_loc_dgf_flat__[(pos__ -
            1)], "assigning variable prior_loc_dgf",
            stan::model::index_uni(sym1__));
          current_statement__ = 424;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 425;
      stan::math::validate_non_negative_index("prior_cov_dgf",
        "N_metabolite", N_metabolite);
      current_statement__ = 425;
      stan::math::validate_non_negative_index("prior_cov_dgf",
        "N_metabolite", N_metabolite);
      current_statement__ = 426;
      context__.validate_dims("data initialization", "prior_cov_dgf",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_metabolite),
          static_cast<size_t>(N_metabolite)});
      prior_cov_dgf_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_metabolite,
                               N_metabolite,
                               std::numeric_limits<double>::quiet_NaN());
      new (&prior_cov_dgf)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_cov_dgf_data__.data(),
        N_metabolite, N_metabolite);
      {
        std::vector<local_scalar_t__> prior_cov_dgf_flat__;
        current_statement__ = 426;
        prior_cov_dgf_flat__ = context__.vals_r("prior_cov_dgf");
        current_statement__ = 426;
        pos__ = 1;
        current_statement__ = 426;
        for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
          current_statement__ = 426;
          for (int sym2__ = 1; sym2__ <= N_metabolite; ++sym2__) {
            current_statement__ = 426;
            stan::model::assign(prior_cov_dgf, prior_cov_dgf_flat__[(pos__ -
              1)], "assigning variable prior_cov_dgf",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 426;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 426;
      stan::math::check_cov_matrix(function__, "prior_cov_dgf", prior_cov_dgf);
      current_statement__ = 427;
      stan::math::validate_non_negative_index("priors_kcat", "N_enzyme",
        N_enzyme);
      current_statement__ = 428;
      context__.validate_dims("data initialization", "priors_kcat", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_enzyme)});
      priors_kcat = std::vector<Eigen::Matrix<double,-1,1>>(2,
                      Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
                        std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_kcat_flat__;
        current_statement__ = 428;
        priors_kcat_flat__ = context__.vals_r("priors_kcat");
        current_statement__ = 428;
        pos__ = 1;
        current_statement__ = 428;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 428;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 428;
            stan::model::assign(priors_kcat, priors_kcat_flat__[(pos__ - 1)],
              "assigning variable priors_kcat",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 428;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 429;
      stan::math::validate_non_negative_index("priors_km", "N_km", N_km);
      current_statement__ = 430;
      context__.validate_dims("data initialization", "priors_km", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_km)});
      priors_km = std::vector<Eigen::Matrix<double,-1,1>>(2,
                    Eigen::Matrix<double,-1,1>::Constant(N_km,
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_km_flat__;
        current_statement__ = 430;
        priors_km_flat__ = context__.vals_r("priors_km");
        current_statement__ = 430;
        pos__ = 1;
        current_statement__ = 430;
        for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
          current_statement__ = 430;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 430;
            stan::model::assign(priors_km, priors_km_flat__[(pos__ - 1)],
              "assigning variable priors_km", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 430;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 431;
      stan::math::validate_non_negative_index("priors_ki",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 432;
      context__.validate_dims("data initialization", "priors_ki", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_competitive_inhibition)});
      priors_ki = std::vector<Eigen::Matrix<double,-1,1>>(2,
                    Eigen::Matrix<double,-1,1>::Constant(N_competitive_inhibition,
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_ki_flat__;
        current_statement__ = 432;
        priors_ki_flat__ = context__.vals_r("priors_ki");
        current_statement__ = 432;
        pos__ = 1;
        current_statement__ = 432;
        for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
          current_statement__ = 432;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 432;
            stan::model::assign(priors_ki, priors_ki_flat__[(pos__ - 1)],
              "assigning variable priors_ki", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 432;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 433;
      stan::math::validate_non_negative_index("priors_dissociation_constant",
        "N_allostery", N_allostery);
      current_statement__ = 434;
      context__.validate_dims("data initialization",
        "priors_dissociation_constant", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_allostery)});
      priors_dissociation_constant = std::vector<Eigen::Matrix<double,-1,1>>(2,
                                       Eigen::Matrix<double,-1,1>::Constant(N_allostery,
                                         std::numeric_limits<double>::quiet_NaN(
                                           )));
      {
        std::vector<local_scalar_t__> priors_dissociation_constant_flat__;
        current_statement__ = 434;
        priors_dissociation_constant_flat__ = context__.vals_r("priors_dissociation_constant");
        current_statement__ = 434;
        pos__ = 1;
        current_statement__ = 434;
        for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
          current_statement__ = 434;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 434;
            stan::model::assign(priors_dissociation_constant,
              priors_dissociation_constant_flat__[(pos__ - 1)],
              "assigning variable priors_dissociation_constant",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 434;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 435;
      stan::math::validate_non_negative_index("priors_transfer_constant",
        "N_allosteric_enzyme", N_allosteric_enzyme);
      current_statement__ = 436;
      context__.validate_dims("data initialization",
        "priors_transfer_constant", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_allosteric_enzyme)});
      priors_transfer_constant = std::vector<Eigen::Matrix<double,-1,1>>(2,
                                   Eigen::Matrix<double,-1,1>::Constant(N_allosteric_enzyme,
                                     std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_transfer_constant_flat__;
        current_statement__ = 436;
        priors_transfer_constant_flat__ = context__.vals_r("priors_transfer_constant");
        current_statement__ = 436;
        pos__ = 1;
        current_statement__ = 436;
        for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
          current_statement__ = 436;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 436;
            stan::model::assign(priors_transfer_constant,
              priors_transfer_constant_flat__[(pos__ - 1)],
              "assigning variable priors_transfer_constant",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 436;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 437;
      stan::math::validate_non_negative_index("priors_kcat_pme", "N_pme",
        N_pme);
      current_statement__ = 438;
      context__.validate_dims("data initialization", "priors_kcat_pme",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_pme)});
      priors_kcat_pme = std::vector<Eigen::Matrix<double,-1,1>>(2,
                          Eigen::Matrix<double,-1,1>::Constant(N_pme,
                            std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_kcat_pme_flat__;
        current_statement__ = 438;
        priors_kcat_pme_flat__ = context__.vals_r("priors_kcat_pme");
        current_statement__ = 438;
        pos__ = 1;
        current_statement__ = 438;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 438;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 438;
            stan::model::assign(priors_kcat_pme,
              priors_kcat_pme_flat__[(pos__ - 1)],
              "assigning variable priors_kcat_pme",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 438;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 439;
      stan::math::validate_non_negative_index("priors_psi_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 440;
      context__.validate_dims("data initialization", "priors_psi_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_train)});
      priors_psi_train = std::vector<Eigen::Matrix<double,-1,1>>(2,
                           Eigen::Matrix<double,-1,1>::Constant(N_experiment_train,
                             std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> priors_psi_train_flat__;
        current_statement__ = 440;
        priors_psi_train_flat__ = context__.vals_r("priors_psi_train");
        current_statement__ = 440;
        pos__ = 1;
        current_statement__ = 440;
        for (int sym1__ = 1; sym1__ <= N_experiment_train; ++sym1__) {
          current_statement__ = 440;
          for (int sym2__ = 1; sym2__ <= 2; ++sym2__) {
            current_statement__ = 440;
            stan::model::assign(priors_psi_train,
              priors_psi_train_flat__[(pos__ - 1)],
              "assigning variable priors_psi_train",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 440;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 441;
      stan::math::validate_non_negative_index("priors_conc_pme_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 442;
      stan::math::validate_non_negative_index("priors_conc_pme_train",
        "N_pme", N_pme);
      current_statement__ = 443;
      context__.validate_dims("data initialization", "priors_conc_pme_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_pme)});
      priors_conc_pme_train = std::vector<
                                std::vector<Eigen::Matrix<double,-1,1>>>(2,
                                std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
                                  Eigen::Matrix<double,-1,1>::Constant(N_pme,
                                    std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_conc_pme_train_flat__;
        current_statement__ = 443;
        priors_conc_pme_train_flat__ = context__.vals_r("priors_conc_pme_train");
        current_statement__ = 443;
        pos__ = 1;
        current_statement__ = 443;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 443;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 443;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 443;
              stan::model::assign(priors_conc_pme_train,
                priors_conc_pme_train_flat__[(pos__ - 1)],
                "assigning variable priors_conc_pme_train",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 443;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 444;
      stan::math::validate_non_negative_index("priors_conc_unbalanced_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 445;
      stan::math::validate_non_negative_index("priors_conc_unbalanced_train",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 446;
      context__.validate_dims("data initialization",
        "priors_conc_unbalanced_train", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_unbalanced)});
      priors_conc_unbalanced_train = std::vector<
                                       std::vector<
                                         Eigen::Matrix<double,-1,1>>>(2,
                                       std::vector<
                                         Eigen::Matrix<double,-1,1>>(N_experiment_train,
                                         Eigen::Matrix<double,-1,1>::Constant(N_unbalanced,
                                           std::numeric_limits<double>::quiet_NaN(
                                             ))));
      {
        std::vector<local_scalar_t__> priors_conc_unbalanced_train_flat__;
        current_statement__ = 446;
        priors_conc_unbalanced_train_flat__ = context__.vals_r("priors_conc_unbalanced_train");
        current_statement__ = 446;
        pos__ = 1;
        current_statement__ = 446;
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 446;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 446;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 446;
              stan::model::assign(priors_conc_unbalanced_train,
                priors_conc_unbalanced_train_flat__[(pos__ - 1)],
                "assigning variable priors_conc_unbalanced_train",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 446;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 447;
      stan::math::validate_non_negative_index("priors_conc_enzyme_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 448;
      stan::math::validate_non_negative_index("priors_conc_enzyme_train",
        "N_enzyme", N_enzyme);
      current_statement__ = 449;
      context__.validate_dims("data initialization",
        "priors_conc_enzyme_train", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_enzyme)});
      priors_conc_enzyme_train = std::vector<
                                   std::vector<Eigen::Matrix<double,-1,1>>>(2,
                                   std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
                                     Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
                                       std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_conc_enzyme_train_flat__;
        current_statement__ = 449;
        priors_conc_enzyme_train_flat__ = context__.vals_r("priors_conc_enzyme_train");
        current_statement__ = 449;
        pos__ = 1;
        current_statement__ = 449;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 449;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 449;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 449;
              stan::model::assign(priors_conc_enzyme_train,
                priors_conc_enzyme_train_flat__[(pos__ - 1)],
                "assigning variable priors_conc_enzyme_train",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 449;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 450;
      stan::math::validate_non_negative_index("priors_drain_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 451;
      stan::math::validate_non_negative_index("priors_drain_train",
        "N_drain", N_drain);
      current_statement__ = 452;
      context__.validate_dims("data initialization", "priors_drain_train",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_drain)});
      priors_drain_train = std::vector<
                             std::vector<Eigen::Matrix<double,-1,1>>>(2,
                             std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
                               Eigen::Matrix<double,-1,1>::Constant(N_drain,
                                 std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_drain_train_flat__;
        current_statement__ = 452;
        priors_drain_train_flat__ = context__.vals_r("priors_drain_train");
        current_statement__ = 452;
        pos__ = 1;
        current_statement__ = 452;
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          current_statement__ = 452;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 452;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 452;
              stan::model::assign(priors_drain_train,
                priors_drain_train_flat__[(pos__ - 1)],
                "assigning variable priors_drain_train",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 452;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 453;
      stan::math::validate_non_negative_index("conc_init",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 454;
      stan::math::validate_non_negative_index("conc_init",
        "N_mic - N_unbalanced", (N_mic - N_unbalanced));
      current_statement__ = 455;
      context__.validate_dims("data initialization", "conc_init", "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>((N_mic - N_unbalanced))});
      conc_init = std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
                    Eigen::Matrix<double,-1,1>::Constant((N_mic -
                      N_unbalanced),
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> conc_init_flat__;
        current_statement__ = 455;
        conc_init_flat__ = context__.vals_r("conc_init");
        current_statement__ = 455;
        pos__ = 1;
        current_statement__ = 455;
        for (int sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
          current_statement__ = 455;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 455;
            stan::model::assign(conc_init, conc_init_flat__[(pos__ - 1)],
              "assigning variable conc_init", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 455;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 455;
      stan::math::check_greater_or_equal(function__, "conc_init", conc_init,
        0);
      current_statement__ = 456;
      context__.validate_dims("data initialization", "rel_tol", "double",
        std::vector<size_t>{});
      rel_tol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 456;
      rel_tol = context__.vals_r("rel_tol")[(1 - 1)];
      current_statement__ = 457;
      context__.validate_dims("data initialization", "abs_tol", "double",
        std::vector<size_t>{});
      abs_tol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 457;
      abs_tol = context__.vals_r("abs_tol")[(1 - 1)];
      current_statement__ = 458;
      context__.validate_dims("data initialization",
        "steady_state_threshold_abs", "double", std::vector<size_t>{});
      steady_state_threshold_abs = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 458;
      steady_state_threshold_abs = context__.vals_r("steady_state_threshold_abs")[(1
        - 1)];
      current_statement__ = 459;
      context__.validate_dims("data initialization",
        "steady_state_threshold_rel", "double", std::vector<size_t>{});
      steady_state_threshold_rel = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 459;
      steady_state_threshold_rel = context__.vals_r("steady_state_threshold_rel")[(1
        - 1)];
      current_statement__ = 460;
      context__.validate_dims("data initialization", "max_num_steps", "int",
        std::vector<size_t>{});
      max_num_steps = std::numeric_limits<int>::min();
      current_statement__ = 460;
      max_num_steps = context__.vals_i("max_num_steps")[(1 - 1)];
      current_statement__ = 461;
      context__.validate_dims("data initialization", "likelihood", "int",
        std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      current_statement__ = 461;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 461;
      stan::math::check_greater_or_equal(function__, "likelihood",
        likelihood, 0);
      current_statement__ = 461;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 462;
      context__.validate_dims("data initialization",
        "drain_small_conc_corrector", "double", std::vector<size_t>{});
      drain_small_conc_corrector = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 462;
      drain_small_conc_corrector = context__.vals_r("drain_small_conc_corrector")[(1
        - 1)];
      current_statement__ = 463;
      context__.validate_dims("data initialization", "timepoint", "double",
        std::vector<size_t>{});
      timepoint = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 463;
      timepoint = context__.vals_r("timepoint")[(1 - 1)];
      current_statement__ = 463;
      stan::math::check_greater_or_equal(function__, "timepoint", timepoint,
        0);
      current_statement__ = 464;
      context__.validate_dims("data initialization", "reject_non_steady",
        "int", std::vector<size_t>{});
      reject_non_steady = std::numeric_limits<int>::min();
      current_statement__ = 464;
      reject_non_steady = context__.vals_i("reject_non_steady")[(1 - 1)];
      current_statement__ = 464;
      stan::math::check_greater_or_equal(function__, "reject_non_steady",
        reject_non_steady, 0);
      current_statement__ = 464;
      stan::math::check_less_or_equal(function__, "reject_non_steady",
        reject_non_steady, 1);
      current_statement__ = 465;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 465;
      initial_time = 0;
      current_statement__ = 466;
      stan::math::validate_non_negative_index("prior_cov_dgf_chol",
        "N_metabolite", N_metabolite);
      current_statement__ = 467;
      stan::math::validate_non_negative_index("prior_cov_dgf_chol",
        "N_metabolite", N_metabolite);
      current_statement__ = 468;
      prior_cov_dgf_chol_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_metabolite,
                                    N_metabolite,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&prior_cov_dgf_chol)
        Eigen::Map<Eigen::Matrix<double,-1,-1>>(prior_cov_dgf_chol_data__.data(),
        N_metabolite, N_metabolite);
      current_statement__ = 468;
      stan::model::assign(prior_cov_dgf_chol,
        stan::math::cholesky_decompose(prior_cov_dgf),
        "assigning variable prior_cov_dgf_chol");
      current_statement__ = 469;
      stan::math::validate_non_negative_index("dgf", "N_metabolite",
        N_metabolite);
      current_statement__ = 470;
      stan::math::validate_non_negative_index("log_kcat_z", "N_enzyme",
        N_enzyme);
      current_statement__ = 471;
      stan::math::validate_non_negative_index("log_km_z", "N_km", N_km);
      current_statement__ = 472;
      stan::math::validate_non_negative_index("log_kcat_pme_z", "N_pme",
        N_pme);
      current_statement__ = 473;
      stan::math::validate_non_negative_index("log_ki_z",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 474;
      stan::math::validate_non_negative_index("log_dissociation_constant_z",
        "N_allostery", N_allostery);
      current_statement__ = 475;
      stan::math::validate_non_negative_index("log_transfer_constant_z",
        "N_allosteric_enzyme", N_allosteric_enzyme);
      current_statement__ = 476;
      stan::math::validate_non_negative_index("psi_train_z",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 477;
      stan::math::validate_non_negative_index("drain_train_z",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 478;
      stan::math::validate_non_negative_index("drain_train_z", "N_drain",
        N_drain);
      current_statement__ = 479;
      stan::math::validate_non_negative_index("log_conc_enzyme_train_z",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 480;
      stan::math::validate_non_negative_index("log_conc_enzyme_train_z",
        "N_enzyme", N_enzyme);
      current_statement__ = 481;
      stan::math::validate_non_negative_index("log_conc_pme_train_z",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 482;
      stan::math::validate_non_negative_index("log_conc_pme_train_z",
        "N_pme", N_pme);
      current_statement__ = 483;
      stan::math::validate_non_negative_index("log_conc_unbalanced_train_z",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 484;
      stan::math::validate_non_negative_index("log_conc_unbalanced_train_z",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 485;
      stan::math::validate_non_negative_index("km", "N_km", N_km);
      current_statement__ = 486;
      stan::math::validate_non_negative_index("ki",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 487;
      stan::math::validate_non_negative_index("kcat", "N_enzyme", N_enzyme);
      current_statement__ = 488;
      stan::math::validate_non_negative_index("dissociation_constant",
        "N_allostery", N_allostery);
      current_statement__ = 489;
      stan::math::validate_non_negative_index("transfer_constant",
        "N_allosteric_enzyme", N_allosteric_enzyme);
      current_statement__ = 490;
      stan::math::validate_non_negative_index("kcat_pme", "N_pme", N_pme);
      current_statement__ = 491;
      stan::math::validate_non_negative_index("psi_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 492;
      stan::math::validate_non_negative_index("drain_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 493;
      stan::math::validate_non_negative_index("drain_train", "N_drain",
        N_drain);
      current_statement__ = 494;
      stan::math::validate_non_negative_index("conc_enzyme_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 495;
      stan::math::validate_non_negative_index("conc_enzyme_train",
        "N_enzyme", N_enzyme);
      current_statement__ = 496;
      stan::math::validate_non_negative_index("conc_unbalanced_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 497;
      stan::math::validate_non_negative_index("conc_unbalanced_train",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 498;
      stan::math::validate_non_negative_index("conc_pme_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 499;
      stan::math::validate_non_negative_index("conc_pme_train", "N_pme",
        N_pme);
      current_statement__ = 500;
      stan::math::validate_non_negative_index("conc_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 501;
      stan::math::validate_non_negative_index("conc_train", "N_mic", N_mic);
      current_statement__ = 502;
      stan::math::validate_non_negative_index("flux_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 503;
      stan::math::validate_non_negative_index("flux_train", "N_reaction",
        N_reaction);
      current_statement__ = 504;
      stan::math::validate_non_negative_index("dgr_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 505;
      stan::math::validate_non_negative_index("dgr_train", "N_edge", N_edge);
      current_statement__ = 506;
      stan::math::validate_non_negative_index("yrep_conc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 507;
      stan::math::validate_non_negative_index("yrep_flux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 508;
      stan::math::validate_non_negative_index("llik_conc_train",
        "N_conc_measurement_train", N_conc_measurement_train);
      current_statement__ = 509;
      stan::math::validate_non_negative_index("llik_flux_train",
        "N_flux_measurement_train", N_flux_measurement_train);
      current_statement__ = 510;
      stan::math::validate_non_negative_index("free_enzyme_ratio_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 511;
      stan::math::validate_non_negative_index("free_enzyme_ratio_train",
        "N_edge", N_edge);
      current_statement__ = 512;
      stan::math::validate_non_negative_index("saturation_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 513;
      stan::math::validate_non_negative_index("saturation_train", "N_edge",
        N_edge);
      current_statement__ = 514;
      stan::math::validate_non_negative_index("allostery_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 515;
      stan::math::validate_non_negative_index("allostery_train", "N_edge",
        N_edge);
      current_statement__ = 516;
      stan::math::validate_non_negative_index("phosphorylation_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 517;
      stan::math::validate_non_negative_index("phosphorylation_train",
        "N_edge", N_edge);
      current_statement__ = 518;
      stan::math::validate_non_negative_index("reversibility_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 519;
      stan::math::validate_non_negative_index("reversibility_train",
        "N_edge", N_edge);
      current_statement__ = 520;
      stan::math::validate_non_negative_index("keq_train",
        "N_experiment_train", N_experiment_train);
      current_statement__ = 521;
      stan::math::validate_non_negative_index("keq_train", "N_edge", N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_metabolite + N_enzyme + N_km + N_pme +
      N_competitive_inhibition + N_allostery + N_allosteric_enzyme +
      N_experiment_train + (N_experiment_train * N_drain) +
      (N_experiment_train * N_enzyme) + (N_experiment_train * N_pme) +
      (N_experiment_train * N_unbalanced);
  }
  inline std::string model_name() const final {
    return "model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --O1 --include-paths=/Users/tedgro/repos/biosustain/Maud/maud/stan"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<local_scalar_t__,-1,1> dgf;
      current_statement__ = 1;
      dgf = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(N_metabolite);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_z;
      current_statement__ = 2;
      log_kcat_z = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N_enzyme);
      Eigen::Matrix<local_scalar_t__,-1,1> log_km_z;
      current_statement__ = 3;
      log_km_z = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_km);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_pme_z;
      current_statement__ = 4;
      log_kcat_pme_z = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(N_pme);
      Eigen::Matrix<local_scalar_t__,-1,1> log_ki_z;
      current_statement__ = 5;
      log_ki_z = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_competitive_inhibition);
      Eigen::Matrix<local_scalar_t__,-1,1> log_dissociation_constant_z;
      current_statement__ = 6;
      log_dissociation_constant_z = in__.template read<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_allostery);
      Eigen::Matrix<local_scalar_t__,-1,1> log_transfer_constant_z;
      current_statement__ = 7;
      log_transfer_constant_z = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N_allosteric_enzyme);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_train_z;
      current_statement__ = 8;
      psi_train_z = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> drain_train_z;
      current_statement__ = 9;
      drain_train_z = in__.template read<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                        N_drain);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_enzyme_train_z;
      current_statement__ = 10;
      log_conc_enzyme_train_z = in__.template read<
                                  std::vector<
                                    Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                                  N_enzyme);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> log_conc_pme_train_z;
      current_statement__ = 11;
      log_conc_pme_train_z = in__.template read<
                               std::vector<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                               N_pme);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_unbalanced_train_z;
      current_statement__ = 12;
      log_conc_unbalanced_train_z = in__.template read<
                                      std::vector<
                                        Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                                      N_unbalanced);
      Eigen::Matrix<local_scalar_t__,-1,1> km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_km, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym650__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym650__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_km, "priors_km",
                stan::model::index_uni(2)), log_km_z,
              stan::model::rvalue(priors_km, "priors_km",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym650__");
      }
      stan::model::assign(km, inline_unz_log_1d_return_sym650__,
        "assigning variable km");
      Eigen::Matrix<local_scalar_t__,-1,1> ki =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_competitive_inhibition,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym652__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym652__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_ki, "priors_ki",
                stan::model::index_uni(2)), log_ki_z,
              stan::model::rvalue(priors_ki, "priors_ki",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym652__");
      }
      stan::model::assign(ki, inline_unz_log_1d_return_sym652__,
        "assigning variable ki");
      Eigen::Matrix<local_scalar_t__,-1,1> kcat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym654__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym654__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_kcat, "priors_kcat",
                stan::model::index_uni(2)), log_kcat_z,
              stan::model::rvalue(priors_kcat, "priors_kcat",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym654__");
      }
      stan::model::assign(kcat, inline_unz_log_1d_return_sym654__,
        "assigning variable kcat");
      Eigen::Matrix<local_scalar_t__,-1,1> dissociation_constant =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allostery,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym656__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym656__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_dissociation_constant,
                "priors_dissociation_constant", stan::model::index_uni(2)),
              log_dissociation_constant_z,
              stan::model::rvalue(priors_dissociation_constant,
                "priors_dissociation_constant", stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym656__");
      }
      stan::model::assign(dissociation_constant,
        inline_unz_log_1d_return_sym656__,
        "assigning variable dissociation_constant");
      Eigen::Matrix<local_scalar_t__,-1,1> transfer_constant =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allosteric_enzyme,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym658__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym658__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_transfer_constant,
                "priors_transfer_constant", stan::model::index_uni(2)),
              log_transfer_constant_z,
              stan::model::rvalue(priors_transfer_constant,
                "priors_transfer_constant", stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym658__");
      }
      stan::model::assign(transfer_constant,
        inline_unz_log_1d_return_sym658__,
        "assigning variable transfer_constant");
      Eigen::Matrix<local_scalar_t__,-1,1> kcat_pme =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_log_1d_return_sym660__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym660__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_kcat_pme, "priors_kcat_pme",
                stan::model::index_uni(2)), log_kcat_pme_z,
              stan::model::rvalue(priors_kcat_pme, "priors_kcat_pme",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym660__");
      }
      stan::model::assign(kcat_pme, inline_unz_log_1d_return_sym660__,
        "assigning variable kcat_pme");
      Eigen::Matrix<local_scalar_t__,-1,1> psi_train =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_experiment_train,
          DUMMY_VAR__);
      Eigen::Matrix<local_scalar_t__,-1,1> inline_unz_1d_return_sym662__;
      {
        current_statement__ = 38;
        stan::model::assign(inline_unz_1d_return_sym662__,
          stan::math::fma(
            stan::model::rvalue(priors_psi_train, "priors_psi_train",
              stan::model::index_uni(2)), psi_train_z,
            stan::model::rvalue(priors_psi_train, "priors_psi_train",
              stan::model::index_uni(1))),
          "assigning variable inline_unz_1d_return_sym662__");
      }
      stan::model::assign(psi_train, inline_unz_1d_return_sym662__,
        "assigning variable psi_train");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> drain_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_drain,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        inline_unz_2d_return_sym664__;
      {
        current_statement__ = 39;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(drain_train_z));
        current_statement__ = 40;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(drain_train_z, "drain_train_z",
              stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_2d_out_sym665__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              drain_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               drain_train_z,
                                                               "drain_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 43;
        for (int inline_unz_2d_ex_sym667__ = 1; inline_unz_2d_ex_sym667__ <=
             stan::math::size(drain_train_z); ++inline_unz_2d_ex_sym667__) {
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_unz_2d_inline_unz_1d_return_sym216___sym666__;
          {
            current_statement__ = 38;
            stan::model::assign(
              inline_unz_2d_inline_unz_1d_return_sym216___sym666__,
              stan::math::fma(
                stan::model::rvalue(priors_drain_train, "priors_drain_train",
                  stan::model::index_uni(2),
                  stan::model::index_uni(inline_unz_2d_ex_sym667__)),
                drain_train_z[(inline_unz_2d_ex_sym667__ - 1)],
                stan::model::rvalue(priors_drain_train, "priors_drain_train",
                  stan::model::index_uni(1),
                  stan::model::index_uni(inline_unz_2d_ex_sym667__))),
              "assigning variable inline_unz_2d_inline_unz_1d_return_sym216___sym666__");
          }
          stan::model::assign(inline_unz_2d_out_sym665__,
            inline_unz_2d_inline_unz_1d_return_sym216___sym666__,
            "assigning variable inline_unz_2d_out_sym665__",
            stan::model::index_uni(inline_unz_2d_ex_sym667__));
        }
        current_statement__ = 44;
        stan::model::assign(inline_unz_2d_return_sym664__,
          inline_unz_2d_out_sym665__,
          "assigning variable inline_unz_2d_return_sym664__");
      }
      stan::model::assign(drain_train, inline_unz_2d_return_sym664__,
        "assigning variable drain_train");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> conc_enzyme_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        inline_unz_log_2d_return_sym669__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_enzyme_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_enzyme_train_z,
              "log_conc_enzyme_train_z", stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym670__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_enzyme_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_enzyme_train_z,
                                                               "log_conc_enzyme_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym672__ = 1; inline_unz_log_2d_ex_sym672__
             <=
             stan::math::size(log_conc_enzyme_train_z); ++inline_unz_log_2d_ex_sym672__) {
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym671__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym671__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_enzyme_train,
                    "priors_conc_enzyme_train", stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym672__)),
                  log_conc_enzyme_train_z[(inline_unz_log_2d_ex_sym672__ -
                  1)],
                  stan::model::rvalue(priors_conc_enzyme_train,
                    "priors_conc_enzyme_train", stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym672__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym671__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym670__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym671__,
            "assigning variable inline_unz_log_2d_out_sym670__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym672__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym669__,
          inline_unz_log_2d_out_sym670__,
          "assigning variable inline_unz_log_2d_return_sym669__");
      }
      stan::model::assign(conc_enzyme_train,
        inline_unz_log_2d_return_sym669__,
        "assigning variable conc_enzyme_train");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        conc_unbalanced_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_unbalanced,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        inline_unz_log_2d_return_sym674__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_unbalanced_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_unbalanced_train_z,
              "log_conc_unbalanced_train_z", stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym675__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_unbalanced_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_unbalanced_train_z,
                                                               "log_conc_unbalanced_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym677__ = 1; inline_unz_log_2d_ex_sym677__
             <=
             stan::math::size(log_conc_unbalanced_train_z); ++inline_unz_log_2d_ex_sym677__) {
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym676__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym676__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_unbalanced_train,
                    "priors_conc_unbalanced_train",
                    stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym677__)),
                  log_conc_unbalanced_train_z[(inline_unz_log_2d_ex_sym677__
                  - 1)],
                  stan::model::rvalue(priors_conc_unbalanced_train,
                    "priors_conc_unbalanced_train",
                    stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym677__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym676__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym675__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym676__,
            "assigning variable inline_unz_log_2d_out_sym675__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym677__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym674__,
          inline_unz_log_2d_out_sym675__,
          "assigning variable inline_unz_log_2d_return_sym674__");
      }
      stan::model::assign(conc_unbalanced_train,
        inline_unz_log_2d_return_sym674__,
        "assigning variable conc_unbalanced_train");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> conc_pme_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        inline_unz_log_2d_return_sym679__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_pme_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_pme_train_z, "log_conc_pme_train_z",
              stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym680__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_pme_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_pme_train_z,
                                                               "log_conc_pme_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym682__ = 1; inline_unz_log_2d_ex_sym682__
             <=
             stan::math::size(log_conc_pme_train_z); ++inline_unz_log_2d_ex_sym682__) {
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym681__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym681__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_pme_train,
                    "priors_conc_pme_train", stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym682__)),
                  log_conc_pme_train_z[(inline_unz_log_2d_ex_sym682__ - 1)],
                  stan::model::rvalue(priors_conc_pme_train,
                    "priors_conc_pme_train", stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym682__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym681__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym680__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym218___sym681__,
            "assigning variable inline_unz_log_2d_out_sym680__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym682__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym679__,
          inline_unz_log_2d_out_sym680__,
          "assigning variable inline_unz_log_2d_return_sym679__");
      }
      stan::model::assign(conc_pme_train, inline_unz_log_2d_return_sym679__,
        "assigning variable conc_pme_train");
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> conc_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_mic, DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> flux_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_reaction,
            DUMMY_VAR__));
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> dgr_train =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__));
      current_statement__ = 266;
      for (int e = 1; e <= N_experiment_train; ++e) {
        Eigen::Matrix<local_scalar_t__,-1,1> inline_get_dgr_return_sym684__;
        {
          local_scalar_t__ inline_get_dgr_minus_RT_sym685__ = DUMMY_VAR__;
          local_scalar_t__ inline_get_dgr_dgf_water_sym686__ = DUMMY_VAR__;
          local_scalar_t__ inline_get_dgr_F_sym687__ = DUMMY_VAR__;
          current_statement__ = 54;
          stan::math::validate_non_negative_index("dgrs", "cols(S)",
            stan::math::cols(S));
          Eigen::Matrix<local_scalar_t__,-1,1> inline_get_dgr_dgrs_sym688__;
          current_statement__ = 55;
          stan::model::assign(inline_get_dgr_dgrs_sym688__,
            stan::math::fma(
              stan::math::multiply(transported_charge,
                stan::model::rvalue(psi_train, "psi_train",
                  stan::model::index_uni(e))), 96.5,
              stan::math::fma(water_stoichiometry, -150.9,
                stan::math::multiply(stan::math::transpose(S),
                  stan::model::rvalue(dgf, "dgf",
                    stan::model::index_multi(mic_to_met))))),
            "assigning variable inline_get_dgr_dgrs_sym688__");
          current_statement__ = 56;
          stan::model::assign(inline_get_dgr_return_sym684__,
            inline_get_dgr_dgrs_sym688__,
            "assigning variable inline_get_dgr_return_sym684__");
        }
        stan::model::assign(dgr_train, inline_get_dgr_return_sym684__,
          "assigning variable dgr_train", stan::model::index_uni(e));
        current_statement__ = 57;
        stan::model::assign(flux_train,
          stan::math::rep_vector(0, N_reaction),
          "assigning variable flux_train", stan::model::index_uni(e));
        current_statement__ = 58;
        stan::math::validate_non_negative_index("conc_enzyme_experiment",
          "N_enzyme", N_enzyme);
        Eigen::Matrix<local_scalar_t__,-1,1> conc_enzyme_experiment;
        current_statement__ = 59;
        stan::model::assign(conc_enzyme_experiment,
          stan::model::rvalue(conc_enzyme_train, "conc_enzyme_train",
            stan::model::index_uni(e)),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 60;
        stan::math::validate_non_negative_index("conc_pme_experiment",
          "N_pme", N_pme);
        Eigen::Matrix<local_scalar_t__,-1,1> conc_pme_experiment;
        current_statement__ = 61;
        stan::model::assign(conc_pme_experiment,
          stan::model::rvalue(conc_pme_train, "conc_pme_train",
            stan::model::index_uni(e)),
          "assigning variable conc_pme_experiment");
        current_statement__ = 62;
        stan::math::validate_non_negative_index("conc_balanced_experiment",
          "N_mic - N_unbalanced", (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          conc_balanced_experiment =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(1,
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant((N_mic -
              N_unbalanced), DUMMY_VAR__));
        int N_eko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym690__;
        {
          current_statement__ = 65;
          inline_measure_ragged_return_sym690__ = ((stan::model::rvalue(
                                                      enzyme_knockout_train_bounds,
                                                      "enzyme_knockout_train_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(enzyme_knockout_train_bounds,
              "enzyme_knockout_train_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        int N_pko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym692__;
        {
          current_statement__ = 65;
          inline_measure_ragged_return_sym692__ = ((stan::model::rvalue(
                                                      pme_knockout_train_bounds,
                                                      "pme_knockout_train_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(pme_knockout_train_bounds,
              "pme_knockout_train_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        current_statement__ = 72;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym690__, 0)) {
          current_statement__ = 67;
          stan::math::validate_non_negative_index("eko_experiment",
            "N_eko_experiment", inline_measure_ragged_return_sym690__);
          std::vector<int> eko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym690__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym694__;
          {
            current_statement__ = 69;
            stan::model::assign(inline_extract_ragged_return_sym694__,
              stan::model::rvalue(enzyme_knockout_train_long,
                "enzyme_knockout_train_long",
                stan::model::index_min_max(
                  stan::model::rvalue(enzyme_knockout_train_bounds,
                    "enzyme_knockout_train_bounds",
                    stan::model::index_uni(e), stan::model::index_uni(1)),
                  stan::model::rvalue(enzyme_knockout_train_bounds,
                    "enzyme_knockout_train_bounds",
                    stan::model::index_uni(e), stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym694__");
          }
          current_statement__ = 70;
          stan::model::assign(conc_enzyme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym690__),
            "assigning variable conc_enzyme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym694__));
        }
        current_statement__ = 77;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym692__, 0)) {
          current_statement__ = 73;
          stan::math::validate_non_negative_index("pko_experiment",
            "N_pko_experiment", inline_measure_ragged_return_sym692__);
          std::vector<int> pko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym692__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym696__;
          {
            current_statement__ = 69;
            stan::model::assign(inline_extract_ragged_return_sym696__,
              stan::model::rvalue(pme_knockout_train_long,
                "pme_knockout_train_long",
                stan::model::index_min_max(
                  stan::model::rvalue(pme_knockout_train_bounds,
                    "pme_knockout_train_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(1)),
                  stan::model::rvalue(pme_knockout_train_bounds,
                    "pme_knockout_train_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym696__");
          }
          current_statement__ = 75;
          stan::model::assign(conc_pme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym692__),
            "assigning variable conc_pme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym696__));
        }
        current_statement__ = 78;
        stan::model::assign(conc_balanced_experiment,
          stan::math::ode_bdf_tol(dbalanced_dt_variadic2_functor__(),
            stan::model::rvalue(conc_init, "conc_init",
              stan::model::index_uni(e)), 0, std::vector<double>{timepoint},
            rel_tol, abs_tol, max_num_steps, pstream__,
            stan::model::rvalue(conc_unbalanced_train,
              "conc_unbalanced_train", stan::model::index_uni(e)),
            balanced_mic_ix, unbalanced_mic_ix, conc_enzyme_experiment,
            stan::model::rvalue(dgr_train, "dgr_train",
              stan::model::index_uni(e)), kcat, km, ki, transfer_constant,
            dissociation_constant, kcat_pme, conc_pme_experiment,
            stan::model::rvalue(drain_train, "drain_train",
              stan::model::index_uni(e)),
            stan::model::rvalue(temperature_train, "temperature_train",
              stan::model::index_uni(e)), drain_small_conc_corrector, S,
            subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
            sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
            prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
            phosphorylation_ix_long, phosphorylation_ix_bounds,
            phosphorylation_type, phosphorylation_pme),
          "assigning variable conc_balanced_experiment");
        current_statement__ = 79;
        stan::model::assign(conc_train,
          stan::model::rvalue(conc_balanced_experiment,
            "conc_balanced_experiment", stan::model::index_uni(1)),
          "assigning variable conc_train", stan::model::index_uni(e),
          stan::model::index_multi(balanced_mic_ix));
        current_statement__ = 80;
        stan::model::assign(conc_train,
          stan::model::rvalue(conc_unbalanced_train, "conc_unbalanced_train",
            stan::model::index_uni(e)), "assigning variable conc_train",
          stan::model::index_uni(e),
          stan::model::index_multi(unbalanced_mic_ix));
        {
          current_statement__ = 81;
          stan::math::validate_non_negative_index("edge_flux", "N_edge",
            N_edge);
          stan::conditional_var_value_t<local_scalar_t__,
            Eigen::Matrix<local_scalar_t__,-1,1>> edge_flux =
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(N_edge,
                                                      std::numeric_limits<double>::quiet_NaN(
                                                        )));
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_return_sym698__;
          {
            int inline_get_edge_flux_N_edge_sym699__;
            current_statement__ = 83;
            inline_get_edge_flux_N_edge_sym699__ = stan::math::cols(S);
            current_statement__ = 84;
            stan::math::validate_non_negative_index("vmax", "N_edge",
              inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_vmax_sym700__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_vmax_by_edge_return_sym260___sym701__;
            {
              int
                inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym261___sym702__;
              current_statement__ = 86;
              inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym261___sym702__ =
                stan::math::size(edge_to_enzyme);
              current_statement__ = 87;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym261___sym702__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__;
              current_statement__ = 88;
              stan::model::assign(
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym261___sym702__),
                "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__");
              current_statement__ = 93;
              for (int
                     inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__ =
                     1; inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__
                   <=
                   inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym261___sym702__; ++inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__) {
                current_statement__ = 91;
                if (stan::math::logical_neq(
                      edge_type[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__
                      - 1)], 3)) {
                  current_statement__ = 89;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__,
                    (stan::model::rvalue(conc_enzyme_experiment,
                       "conc_enzyme_experiment",
                       stan::model::index_uni(
                         edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__
                         - 1)])) *
                    stan::model::rvalue(kcat, "kcat",
                      stan::model::index_uni(
                        edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__
                        - 1)]))),
                    "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_vmax_by_edge_f_sym263___sym704__));
                }
              }
              current_statement__ = 94;
              stan::model::assign(
                inline_get_edge_flux_inline_get_vmax_by_edge_return_sym260___sym701__,
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym262___sym703__,
                "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_return_sym260___sym701__");
            }
            current_statement__ = 95;
            stan::math::validate_non_negative_index("reversibility",
              "N_edge", inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_reversibility_sym705__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_reversibility_return_sym265___sym706__;
            {
              local_scalar_t__
                inline_get_edge_flux_inline_get_reversibility_RT_sym266___sym707__;
              current_statement__ = 97;
              inline_get_edge_flux_inline_get_reversibility_RT_sym266___sym707__ = (0.008314
                *
                stan::model::rvalue(temperature_train, "temperature_train",
                  stan::model::index_uni(e)));
              int
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__;
              current_statement__ = 98;
              inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__ =
                stan::math::cols(S);
              current_statement__ = 99;
              stan::math::validate_non_negative_index("reaction_quotient",
                "N_edge",
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym268___sym709__;
              current_statement__ = 100;
              stan::model::assign(
                inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym268___sym709__,
                stan::math::multiply(stan::math::transpose(S),
                  stan::math::log(
                    stan::model::rvalue(conc_train, "conc_train",
                      stan::model::index_uni(e)))),
                "assigning variable inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym268___sym709__");
              current_statement__ = 101;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__,
                  DUMMY_VAR__);
              current_statement__ = 107;
              for (int
                     inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__ =
                     1; inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__
                   <=
                   inline_get_edge_flux_inline_get_reversibility_N_edge_sym267___sym708__; ++inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__) {
                current_statement__ = 105;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__
                      - 1)], 1)) {
                  current_statement__ = 104;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__,
                    (1 -
                    stan::math::exp(
                      (stan::math::fma(
                         inline_get_edge_flux_inline_get_reversibility_RT_sym266___sym707__,
                         inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym268___sym709__[(inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__
                         - 1)],
                         stan::model::rvalue(dgr_train, "dgr_train",
                           stan::model::index_uni(e))[(inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__
                         - 1)]) /
                      inline_get_edge_flux_inline_get_reversibility_RT_sym266___sym707__))),
                    "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__));
                } else {
                  current_statement__ = 103;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_reversibility_f_sym270___sym711__));
                }
              }
              current_statement__ = 108;
              stan::model::assign(
                inline_get_edge_flux_inline_get_reversibility_return_sym265___sym706__,
                inline_get_edge_flux_inline_get_reversibility_out_sym269___sym710__,
                "assigning variable inline_get_edge_flux_inline_get_reversibility_return_sym265___sym706__");
            }
            current_statement__ = 109;
            stan::math::validate_non_negative_index("free_enzyme_ratio",
              "N_edge", inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_free_enzyme_ratio_sym712__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym272___sym713__;
            {
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym273___sym714__;
              current_statement__ = 111;
              inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym273___sym714__ =
                stan::math::cols(S);
              current_statement__ = 112;
              stan::math::validate_non_negative_index("denom", "N_edge",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym273___sym714__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym273___sym714__,
                  DUMMY_VAR__);
              current_statement__ = 143;
              for (int
                     inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__ =
                     1; inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__
                   <=
                   inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym273___sym714__; ++inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__) {
                current_statement__ = 117;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__
                      - 1)], 3)) {
                  current_statement__ = 114;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__));
                  continue;
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_sub_sym275___sym716__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__ = ((
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_prod_sym277___sym718__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__ = ((
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_ci_sym279___sym720__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym236___sym280___sym721__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym236___sym280___sym721__ = ((
                    stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 121;
                stan::math::validate_non_negative_index("sub_ix", "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_ix_sym281___sym722__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym238___sym282___sym723__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym238___sym282___sym723__,
                    stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym238___sym282___sym723__");
                }
                current_statement__ = 123;
                stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_km_ix_sym283___sym724__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym240___sym284___sym725__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym240___sym284___sym725__,
                    stan::model::rvalue(sub_km_ix_by_edge_long,
                      "sub_km_ix_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym240___sym284___sym725__");
                }
                current_statement__ = 125;
                stan::math::validate_non_negative_index("prod_ix", "N_prod",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_ix_sym285___sym726__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym242___sym286___sym727__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym242___sym286___sym727__,
                    stan::model::rvalue(prod_by_edge_long,
                      "prod_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(prod_by_edge_bounds,
                          "prod_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(prod_by_edge_bounds,
                          "prod_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym242___sym286___sym727__");
                }
                current_statement__ = 127;
                stan::math::validate_non_negative_index("sub_over_km",
                  "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__);
                Eigen::Matrix<local_scalar_t__,-1,1>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym287___sym728__;
                current_statement__ = 128;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym287___sym728__,
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_train, "conc_train",
                        stan::model::index_uni(e)), "conc_train[e]",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym238___sym282___sym723__)),
                    stan::model::rvalue(km, "km",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym240___sym284___sym725__))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym287___sym728__");
                current_statement__ = 129;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__,
                  stan::math::prod(
                    stan::math::pow(
                      stan::math::add(
                        stan::math::rep_vector(1,
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym232___sym276___sym717__),
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym287___sym728__),
                      stan::math::fabs(
                        stan::model::rvalue(S, "S",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym238___sym282___sym723__),
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__))))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__));
                current_statement__ = 136;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__
                      - 1)], 1)) {
                  current_statement__ = 130;
                  stan::math::validate_non_negative_index("prod_km_ix",
                    "N_prod",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_km_ix_sym288___sym729__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym244___sym289___sym730__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym244___sym289___sym730__,
                      stan::model::rvalue(prod_km_ix_by_edge_long,
                        "prod_km_ix_by_edge_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(prod_km_ix_by_edge_bounds,
                            "prod_km_ix_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(prod_km_ix_by_edge_bounds,
                            "prod_km_ix_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym244___sym289___sym730__");
                  }
                  current_statement__ = 132;
                  stan::math::validate_non_negative_index("prod_over_km",
                    "N_prod",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__);
                  Eigen::Matrix<local_scalar_t__,-1,1>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym290___sym731__;
                  current_statement__ = 133;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym290___sym731__,
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym242___sym286___sym727__)),
                      stan::model::rvalue(km, "km",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym244___sym289___sym730__))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym290___sym731__");
                  current_statement__ = 134;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__,
                    (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__
                    - 1)] +
                    (stan::math::prod(
                       stan::math::pow(
                         stan::math::add(
                           stan::math::rep_vector(1,
                             inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym234___sym278___sym719__),
                           inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym290___sym731__),
                         stan::math::fabs(
                           stan::model::rvalue(S, "S",
                             stan::model::index_multi(
                               inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym242___sym286___sym727__),
                             stan::model::index_uni(
                               inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__)))))
                    - 1)),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__));
                }
                current_statement__ = 141;
                if (stan::math::logical_gt(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym236___sym280___sym721__,
                      0)) {
                  current_statement__ = 137;
                  stan::math::validate_non_negative_index("ci_ix", "N_ci",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym236___sym280___sym721__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_ci_ix_sym291___sym732__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym236___sym280___sym721__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym246___sym292___sym733__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym246___sym292___sym733__,
                      stan::model::rvalue(ci_ix_long, "ci_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym246___sym292___sym733__");
                  }
                  current_statement__ = 139;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__,
                    (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__
                    - 1)] +
                    stan::math::sum(
                      stan::math::elt_divide(
                        stan::model::rvalue(
                          stan::model::rvalue(conc_train, "conc_train",
                            stan::model::index_uni(e)), "conc_train[e]",
                          stan::model::index_multi(
                            stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                              stan::model::index_multi(
                                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym246___sym292___sym733__)))),
                        stan::model::rvalue(ki, "ki",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym246___sym292___sym733__))))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym293___sym734__));
                }
              }
              current_statement__ = 144;
              stan::model::assign(
                inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym272___sym713__,
                stan::math::inv(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym274___sym715__),
                "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym272___sym713__");
            }
            current_statement__ = 145;
            stan::math::validate_non_negative_index("saturation", "N_edge",
              inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_saturation_sym735__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_saturation_return_sym295___sym736__;
            {
              int
                inline_get_edge_flux_inline_get_saturation_N_edge_sym296___sym737__;
              current_statement__ = 147;
              inline_get_edge_flux_inline_get_saturation_N_edge_sym296___sym737__ =
                stan::math::size(sub_by_edge_bounds);
              current_statement__ = 148;
              stan::math::validate_non_negative_index("prod_conc_over_km",
                "N_edge",
                inline_get_edge_flux_inline_get_saturation_N_edge_sym296___sym737__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_saturation_N_edge_sym296___sym737__,
                  DUMMY_VAR__);
              current_statement__ = 161;
              for (int
                     inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__ =
                     1; inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__
                   <=
                   inline_get_edge_flux_inline_get_saturation_N_edge_sym296___sym737__; ++inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__) {
                current_statement__ = 153;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__
                      - 1)], 3)) {
                  current_statement__ = 150;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__));
                  continue;
                }
                int
                  inline_get_edge_flux_inline_get_saturation_N_sub_sym298___sym739__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__ = ((
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 155;
                stan::math::validate_non_negative_index("sub_ix", "N_sub",
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_sub_ix_sym300___sym741__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym228___sym301___sym742__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym228___sym301___sym742__,
                    stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym228___sym301___sym742__");
                }
                current_statement__ = 157;
                stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_sub_km_ix_sym302___sym743__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym226___sym299___sym740__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym230___sym303___sym744__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym230___sym303___sym744__,
                    stan::model::rvalue(sub_km_ix_by_edge_long,
                      "sub_km_ix_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym230___sym303___sym744__");
                }
                current_statement__ = 159;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__,
                  stan::math::prod(
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym228___sym301___sym742__)),
                      stan::model::rvalue(km, "km",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym230___sym303___sym744__)))),
                  "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_saturation_f_sym304___sym745__));
              }
              current_statement__ = 162;
              stan::model::assign(
                inline_get_edge_flux_inline_get_saturation_return_sym295___sym736__,
                stan::math::elt_multiply(
                  inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym297___sym738__,
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym272___sym713__),
                "assigning variable inline_get_edge_flux_inline_get_saturation_return_sym295___sym736__");
            }
            current_statement__ = 163;
            stan::math::validate_non_negative_index("allostery", "N_edge",
              inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_allostery_sym746__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_allostery_return_sym306___sym747__;
            {
              int
                inline_get_edge_flux_inline_get_allostery_N_edge_sym307___sym748__;
              current_statement__ = 165;
              inline_get_edge_flux_inline_get_allostery_N_edge_sym307___sym748__ =
                stan::math::size(allostery_ix_bounds);
              current_statement__ = 166;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_allostery_N_edge_sym307___sym748__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__;
              current_statement__ = 167;
              stan::model::assign(
                inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_allostery_N_edge_sym307___sym748__),
                "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__");
              current_statement__ = 185;
              for (int
                     inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__ =
                     1; inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__
                   <=
                   inline_get_edge_flux_inline_get_allostery_N_edge_sym307___sym748__; ++inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__) {
                int
                  inline_get_edge_flux_inline_get_allostery_N_allostery_sym309___sym750__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym248___sym310___sym751__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym248___sym310___sym751__ = ((
                    stan::model::rvalue(allostery_ix_bounds,
                      "allostery_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(allostery_ix_bounds,
                      "allostery_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 171;
                if (stan::math::logical_eq(
                      inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym248___sym310___sym751__,
                      0)) {
                  continue;
                }
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_Q_num_sym311___sym752__;
                current_statement__ = 172;
                inline_get_edge_flux_inline_get_allostery_Q_num_sym311___sym752__ = 1;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_Q_denom_sym312___sym753__;
                current_statement__ = 173;
                inline_get_edge_flux_inline_get_allostery_Q_denom_sym312___sym753__ = 1;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_tc_edge_sym313___sym754__;
                current_statement__ = 174;
                inline_get_edge_flux_inline_get_allostery_tc_edge_sym313___sym754__ =
                  stan::model::rvalue(transfer_constant, "transfer_constant",
                    stan::model::index_uni(
                      edge_to_tc[(inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__
                      - 1)]));
                {
                  std::vector<int>
                    inline_get_edge_flux_inline_get_allostery_sym1___sym314___sym755__;
                  std::vector<int>
                    inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym250___sym315___sym756__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym250___sym315___sym756__,
                      stan::model::rvalue(allostery_ix_long,
                        "allostery_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(allostery_ix_bounds,
                            "allostery_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(allostery_ix_bounds,
                            "allostery_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym250___sym315___sym756__");
                  }
                  current_statement__ = 176;
                  for (int
                         inline_get_edge_flux_inline_get_allostery_sym3___sym318___sym759__ =
                         1; inline_get_edge_flux_inline_get_allostery_sym3___sym318___sym759__
                       <=
                       stan::math::size(
                         inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym250___sym315___sym756__); ++inline_get_edge_flux_inline_get_allostery_sym3___sym318___sym759__) {
                    int
                      inline_get_edge_flux_inline_get_allostery_allostery_sym316___sym757__;
                    current_statement__ = 176;
                    inline_get_edge_flux_inline_get_allostery_allostery_sym316___sym757__ = inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym250___sym315___sym756__[(inline_get_edge_flux_inline_get_allostery_sym3___sym318___sym759__
                      - 1)];
                    local_scalar_t__
                      inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym317___sym758__;
                    current_statement__ = 177;
                    inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym317___sym758__ = (
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_uni(
                          allostery_mic[(inline_get_edge_flux_inline_get_allostery_allostery_sym316___sym757__
                          - 1)]))
                      /
                      dissociation_constant[(inline_get_edge_flux_inline_get_allostery_allostery_sym316___sym757__
                      - 1)]);
                    current_statement__ = 182;
                    if (stan::math::logical_eq(
                          allostery_type[(inline_get_edge_flux_inline_get_allostery_allostery_sym316___sym757__
                          - 1)], 1)) {
                      current_statement__ = 180;
                      inline_get_edge_flux_inline_get_allostery_Q_denom_sym312___sym753__ = (inline_get_edge_flux_inline_get_allostery_Q_denom_sym312___sym753__
                        +
                        inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym317___sym758__);
                    } else {
                      current_statement__ = 178;
                      inline_get_edge_flux_inline_get_allostery_Q_num_sym311___sym752__ = (inline_get_edge_flux_inline_get_allostery_Q_num_sym311___sym752__
                        +
                        inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym317___sym758__);
                    }
                  }
                }
                current_statement__ = 183;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__,
                  stan::math::inv(
                    stan::math::fma(
                      inline_get_edge_flux_inline_get_allostery_tc_edge_sym313___sym754__,
                      stan::math::pow(
                        ((inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym272___sym713__[(inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__
                        - 1)] *
                        inline_get_edge_flux_inline_get_allostery_Q_num_sym311___sym752__)
                        /
                        inline_get_edge_flux_inline_get_allostery_Q_denom_sym312___sym753__),
                        subunits[(inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__
                        - 1)]), 1)),
                  "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_allostery_f_sym319___sym760__));
              }
              current_statement__ = 186;
              stan::model::assign(
                inline_get_edge_flux_inline_get_allostery_return_sym306___sym747__,
                inline_get_edge_flux_inline_get_allostery_out_sym308___sym749__,
                "assigning variable inline_get_edge_flux_inline_get_allostery_return_sym306___sym747__");
            }
            current_statement__ = 187;
            stan::math::validate_non_negative_index("phosphorylation",
              "N_edge", inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_phosphorylation_sym761__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_phosphorylation_return_sym321___sym762__;
            {
              int
                inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym322___sym763__;
              current_statement__ = 189;
              inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym322___sym763__ =
                stan::math::size(phosphorylation_ix_bounds);
              current_statement__ = 190;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym322___sym763__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__;
              current_statement__ = 191;
              stan::model::assign(
                inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym322___sym763__),
                "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__");
              current_statement__ = 208;
              for (int
                     inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__ =
                     1; inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__
                   <=
                   inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym322___sym763__; ++inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__) {
                int
                  inline_get_edge_flux_inline_get_phosphorylation_N_phos_sym324___sym765__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym252___sym325___sym766__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym252___sym325___sym766__ = ((
                    stan::model::rvalue(phosphorylation_ix_bounds,
                      "phosphorylation_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(phosphorylation_ix_bounds,
                      "phosphorylation_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 195;
                if (stan::math::logical_eq(
                      inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym252___sym325___sym766__,
                      0)) {
                  continue;
                }
                local_scalar_t__
                  inline_get_edge_flux_inline_get_phosphorylation_alpha_sym326___sym767__;
                current_statement__ = 196;
                inline_get_edge_flux_inline_get_phosphorylation_alpha_sym326___sym767__ = 0;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__;
                current_statement__ = 197;
                inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__ = 0;
                {
                  std::vector<int>
                    inline_get_edge_flux_inline_get_phosphorylation_sym1___sym328___sym769__;
                  std::vector<int>
                    inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym254___sym329___sym770__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym254___sym329___sym770__,
                      stan::model::rvalue(phosphorylation_ix_long,
                        "phosphorylation_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(phosphorylation_ix_bounds,
                            "phosphorylation_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(phosphorylation_ix_bounds,
                            "phosphorylation_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym254___sym329___sym770__");
                  }
                  current_statement__ = 199;
                  for (int
                         inline_get_edge_flux_inline_get_phosphorylation_sym3___sym332___sym773__ =
                         1; inline_get_edge_flux_inline_get_phosphorylation_sym3___sym332___sym773__
                       <=
                       stan::math::size(
                         inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym254___sym329___sym770__); ++inline_get_edge_flux_inline_get_phosphorylation_sym3___sym332___sym773__) {
                    int
                      inline_get_edge_flux_inline_get_phosphorylation_phos_sym330___sym771__;
                    current_statement__ = 199;
                    inline_get_edge_flux_inline_get_phosphorylation_phos_sym330___sym771__ = inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym254___sym329___sym770__[(inline_get_edge_flux_inline_get_phosphorylation_sym3___sym332___sym773__
                      - 1)];
                    local_scalar_t__
                      inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym331___sym772__;
                    current_statement__ = 200;
                    inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym331___sym772__ = (
                      stan::model::rvalue(kcat_pme, "kcat_pme",
                        stan::model::index_uni(
                          phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym330___sym771__
                          - 1)]))
                      *
                      stan::model::rvalue(conc_pme_experiment,
                        "conc_pme_experiment",
                        stan::model::index_uni(
                          phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym330___sym771__
                          - 1)])));
                    current_statement__ = 205;
                    if (stan::math::logical_eq(
                          phosphorylation_type[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym330___sym771__
                          - 1)], 2)) {
                      current_statement__ = 203;
                      inline_get_edge_flux_inline_get_phosphorylation_alpha_sym326___sym767__ = (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym326___sym767__
                        +
                        inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym331___sym772__);
                    } else {
                      current_statement__ = 201;
                      inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__ = (inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__
                        +
                        inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym331___sym772__);
                    }
                  }
                }
                current_statement__ = 206;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__,
                  stan::math::pow(
                    (inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__
                    /
                    (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym326___sym767__
                    +
                    inline_get_edge_flux_inline_get_phosphorylation_beta_sym327___sym768__)),
                    subunits[(inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__
                    - 1)]),
                  "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_phosphorylation_f_sym333___sym774__));
              }
              current_statement__ = 209;
              stan::model::assign(
                inline_get_edge_flux_inline_get_phosphorylation_return_sym321___sym762__,
                inline_get_edge_flux_inline_get_phosphorylation_out_sym323___sym764__,
                "assigning variable inline_get_edge_flux_inline_get_phosphorylation_return_sym321___sym762__");
            }
            current_statement__ = 210;
            stan::math::validate_non_negative_index("drain_by_edge",
              "N_edge", inline_get_edge_flux_N_edge_sym699__);
            stan::conditional_var_value_t<local_scalar_t__,
              Eigen::Matrix<local_scalar_t__,-1,1>>
              inline_get_edge_flux_drain_by_edge_sym775__ =
              stan::conditional_var_value_t<local_scalar_t__,
                Eigen::Matrix<local_scalar_t__,-1,1>>(Eigen::Matrix<double,-1,1>::Constant(inline_get_edge_flux_N_edge_sym699__,
                                                        std::numeric_limits<double>::quiet_NaN(
                                                          )));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_drain_by_edge_return_sym335___sym776__;
            {
              int
                inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym336___sym777__;
              current_statement__ = 212;
              inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym336___sym777__ =
                stan::math::size(edge_type);
              current_statement__ = 213;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym336___sym777__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__;
              current_statement__ = 214;
              stan::model::assign(
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym336___sym777__),
                "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__");
              current_statement__ = 222;
              for (int
                     inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__ =
                     1; inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__
                   <=
                   inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym336___sym777__; ++inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__) {
                current_statement__ = 220;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__
                      - 1)], 3)) {
                  int
                    inline_get_edge_flux_inline_get_drain_by_edge_N_sub_sym338___sym779__ =
                    std::numeric_limits<int>::min();
                  int
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym256___sym339___sym780__;
                  {
                    current_statement__ = 65;
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym256___sym339___sym780__ = ((
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__),
                        stan::model::index_uni(2))
                      -
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__),
                        stan::model::index_uni(1)))
                      + 1);
                  }
                  current_statement__ = 216;
                  stan::math::validate_non_negative_index("subs", "N_sub",
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym256___sym339___sym780__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_drain_by_edge_subs_sym340___sym781__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym256___sym339___sym780__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym258___sym341___sym782__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym258___sym341___sym782__,
                      stan::model::rvalue(sub_by_edge_long,
                        "sub_by_edge_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(sub_by_edge_bounds,
                            "sub_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(sub_by_edge_bounds,
                            "sub_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym258___sym341___sym782__");
                  }
                  current_statement__ = 218;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__,
                    (stan::model::rvalue(
                       stan::model::rvalue(drain_train, "drain_train",
                         stan::model::index_uni(e)), "drain_train[e]",
                       stan::model::index_uni(
                         edge_to_drain[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__
                         - 1)])) *
                    stan::math::prod(
                      stan::math::elt_divide(
                        stan::model::rvalue(
                          stan::model::rvalue(conc_train, "conc_train",
                            stan::model::index_uni(e)), "conc_train[e]",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym258___sym341___sym782__)),
                        stan::math::add(
                          stan::model::rvalue(
                            stan::model::rvalue(conc_train, "conc_train",
                              stan::model::index_uni(e)), "conc_train[e]",
                            stan::model::index_multi(
                              inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym258___sym341___sym782__)),
                          drain_small_conc_corrector)))),
                    "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_drain_by_edge_f_sym342___sym783__));
                }
              }
              current_statement__ = 223;
              stan::model::assign(
                inline_get_edge_flux_inline_get_drain_by_edge_return_sym335___sym776__,
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym337___sym778__,
                "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_return_sym335___sym776__");
            }
            current_statement__ = 224;
            stan::model::assign(inline_get_edge_flux_return_sym698__,
              stan::math::elt_multiply(
                stan::math::elt_multiply(
                  stan::math::elt_multiply(
                    stan::math::elt_multiply(
                      stan::math::elt_multiply(
                        inline_get_edge_flux_inline_get_vmax_by_edge_return_sym260___sym701__,
                        inline_get_edge_flux_inline_get_saturation_return_sym295___sym736__),
                      inline_get_edge_flux_inline_get_reversibility_return_sym265___sym706__),
                    inline_get_edge_flux_inline_get_allostery_return_sym306___sym747__),
                  inline_get_edge_flux_inline_get_phosphorylation_return_sym321___sym762__),
                inline_get_edge_flux_inline_get_drain_by_edge_return_sym335___sym776__),
              "assigning variable inline_get_edge_flux_return_sym698__");
          }
          current_statement__ = 226;
          for (int j = 1; j <= N_edge; ++j) {
            current_statement__ = 225;
            stan::model::assign(flux_train,
              (stan::model::rvalue(flux_train, "flux_train",
                 stan::model::index_uni(e),
                 stan::model::index_uni(
                   stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                     stan::model::index_uni(j)))) +
              stan::model::rvalue(inline_get_edge_flux_return_sym698__,
                "inline_get_edge_flux_return_sym698__",
                stan::model::index_uni(j))), "assigning variable flux_train",
              stan::model::index_uni(e),
              stan::model::index_uni(
                stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                  stan::model::index_uni(j))));
          }
          int inline_check_steady_state_return_sym785__;
          if (stan::math::logical_eq(reject_non_steady, 1)) {
            current_statement__ = 227;
            stan::math::validate_non_negative_index("rel_thresh_per_conc",
              "rows(conc)",
              stan::math::rows(
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1))));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_check_steady_state_rel_thresh_per_conc_sym786__;
            current_statement__ = 228;
            stan::model::assign(
              inline_check_steady_state_rel_thresh_per_conc_sym786__,
              stan::math::multiply(
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1)),
                steady_state_threshold_rel),
              "assigning variable inline_check_steady_state_rel_thresh_per_conc_sym786__");
            int inline_check_steady_state_relative_check_failed_sym787__;
            current_statement__ = 229;
            inline_check_steady_state_relative_check_failed_sym787__ =
              stan::math::logical_gt(
                stan::math::max(
                  stan::math::subtract(
                    stan::math::fabs(
                      stan::model::rvalue(
                        stan::math::multiply(S,
                          inline_get_edge_flux_return_sym698__),
                        "(S * inline_get_edge_flux_return_sym698__)",
                        stan::model::index_multi(balanced_mic_ix))),
                    inline_check_steady_state_rel_thresh_per_conc_sym786__)),
                0);
            int inline_check_steady_state_absolute_check_failed_sym788__;
            current_statement__ = 230;
            inline_check_steady_state_absolute_check_failed_sym788__ =
              stan::math::logical_gt(
                stan::math::max(
                  stan::math::fabs(
                    stan::model::rvalue(
                      stan::math::multiply(S,
                        inline_get_edge_flux_return_sym698__),
                      "(S * inline_get_edge_flux_return_sym698__)",
                      stan::model::index_multi(balanced_mic_ix)))),
                steady_state_threshold_abs);
            current_statement__ = 232;
            if (inline_check_steady_state_relative_check_failed_sym787__) {
              current_statement__ = 231;
              if (pstream__) {
                stan::math::stan_print(pstream__, "Sv ");
                stan::math::stan_print(pstream__,
                  stan::model::rvalue(
                    stan::math::multiply(S,
                      inline_get_edge_flux_return_sym698__),
                    "(S * inline_get_edge_flux_return_sym698__)",
                    stan::model::index_multi(balanced_mic_ix)));
                stan::math::stan_print(pstream__, " not within ");
                stan::math::stan_print(pstream__,
                  inline_check_steady_state_rel_thresh_per_conc_sym786__);
                stan::math::stan_print(pstream__, " of zero.");
                *(pstream__) << std::endl;
              }
            }
            current_statement__ = 234;
            if (inline_check_steady_state_absolute_check_failed_sym788__) {
              current_statement__ = 233;
              if (pstream__) {
                stan::math::stan_print(pstream__, "Sv ");
                stan::math::stan_print(pstream__,
                  stan::model::rvalue(
                    stan::math::multiply(S,
                      inline_get_edge_flux_return_sym698__),
                    "(S * inline_get_edge_flux_return_sym698__)",
                    stan::model::index_multi(balanced_mic_ix)));
                stan::math::stan_print(pstream__, " not within ");
                stan::math::stan_print(pstream__, steady_state_threshold_abs);
                stan::math::stan_print(pstream__, " of zero.");
                *(pstream__) << std::endl;
              }
            }
            inline_check_steady_state_return_sym785__ = ((stan::math::primitive_value(
                                                            inline_check_steady_state_relative_check_failed_sym787__)
              ||
              stan::math::primitive_value(
                inline_check_steady_state_absolute_check_failed_sym788__)) ? 0 : 1);
          }
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(reject_non_steady, 1))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  inline_check_steady_state_return_sym785__, 0)))) {
            current_statement__ = 235;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "Non-steady state in experiment ");
              stan::math::stan_print(pstream__, e);
              *(pstream__) << std::endl;
            }
            current_statement__ = 236;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "Balanced metabolite concentration");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 237;
            if (pstream__) {
              stan::math::stan_print(pstream__, "flux_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(flux_train, "flux_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 238;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_init: ");
              stan::math::stan_print(pstream__, conc_init);
              *(pstream__) << std::endl;
            }
            current_statement__ = 239;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_unbalanced_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(conc_unbalanced_train,
                  "conc_unbalanced_train", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 240;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "log_conc_unbalanced_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_unbalanced_train_z,
                  "log_conc_unbalanced_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 241;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_enzyme_experiment: ");
              stan::math::stan_print(pstream__, conc_enzyme_experiment);
              *(pstream__) << std::endl;
            }
            current_statement__ = 242;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_conc_enzyme_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_enzyme_train_z,
                  "log_conc_enzyme_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 243;
            if (pstream__) {
              stan::math::stan_print(pstream__, "km: ");
              stan::math::stan_print(pstream__, km);
              *(pstream__) << std::endl;
            }
            current_statement__ = 244;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_km_z: ");
              stan::math::stan_print(pstream__, log_km_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 245;
            if (pstream__) {
              stan::math::stan_print(pstream__, "drain_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(drain_train, "drain_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 246;
            if (pstream__) {
              stan::math::stan_print(pstream__, "drain_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(drain_train_z, "drain_train_z",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 247;
            if (pstream__) {
              stan::math::stan_print(pstream__, "kcat: ");
              stan::math::stan_print(pstream__, kcat);
              *(pstream__) << std::endl;
            }
            current_statement__ = 248;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_kcat_z: ");
              stan::math::stan_print(pstream__, log_kcat_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 249;
            if (pstream__) {
              stan::math::stan_print(pstream__, "dgr_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(dgr_train, "dgr_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 250;
            if (pstream__) {
              stan::math::stan_print(pstream__, "ki: ");
              stan::math::stan_print(pstream__, ki);
              *(pstream__) << std::endl;
            }
            current_statement__ = 251;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_ki_z: ");
              stan::math::stan_print(pstream__, log_ki_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 252;
            if (pstream__) {
              stan::math::stan_print(pstream__, "dissociation_constant: ");
              stan::math::stan_print(pstream__, dissociation_constant);
              *(pstream__) << std::endl;
            }
            current_statement__ = 253;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "log_dissociation_constant_z: ");
              stan::math::stan_print(pstream__, log_dissociation_constant_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 254;
            if (pstream__) {
              stan::math::stan_print(pstream__, "transfer_constant: ");
              stan::math::stan_print(pstream__, transfer_constant);
              *(pstream__) << std::endl;
            }
            current_statement__ = 255;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_transfer_constant_z: ");
              stan::math::stan_print(pstream__, log_transfer_constant_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 256;
            if (pstream__) {
              stan::math::stan_print(pstream__, "kcat_pme: ");
              stan::math::stan_print(pstream__, kcat_pme);
              *(pstream__) << std::endl;
            }
            current_statement__ = 257;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_kcat_pme_z: ");
              stan::math::stan_print(pstream__, log_kcat_pme_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 258;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_pme_experiment: ");
              stan::math::stan_print(pstream__, conc_pme_experiment);
              *(pstream__) << std::endl;
            }
            current_statement__ = 259;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_conc_pme_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_pme_train_z,
                  "log_conc_pme_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 260;
            if (pstream__) {
              stan::math::stan_print(pstream__, "psi_train: ");
              stan::math::stan_print(pstream__, psi_train);
              *(pstream__) << std::endl;
            }
            current_statement__ = 261;
            if (pstream__) {
              stan::math::stan_print(pstream__, "psi_train_z: ");
              stan::math::stan_print(pstream__, psi_train_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 262;
            std::stringstream errmsg_stream__;
            stan::math::stan_print(&errmsg_stream__, "Rejecting");
            throw std::domain_error(errmsg_stream__.str());
          }
        }
      }
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "conc_train",
        conc_train, 0);
      {
        current_statement__ = 281;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_kcat_z));
        current_statement__ = 282;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_km_z));
        current_statement__ = 283;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_ki_z));
        current_statement__ = 284;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         log_dissociation_constant_z));
        current_statement__ = 285;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                         log_transfer_constant_z));
        current_statement__ = 286;
        lp_accum__.add(stan::math::multi_normal_cholesky_lpdf<propto__>(dgf,
                         prior_loc_dgf, prior_cov_dgf_chol));
        current_statement__ = 287;
        lp_accum__.add(stan::math::std_normal_lpdf<propto__>(log_kcat_pme_z));
        current_statement__ = 294;
        for (int ex = 1; ex <= N_experiment_train; ++ex) {
          current_statement__ = 288;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(log_conc_unbalanced_train_z,
                             "log_conc_unbalanced_train_z",
                             stan::model::index_uni(ex))));
          current_statement__ = 289;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(log_conc_enzyme_train_z,
                             "log_conc_enzyme_train_z",
                             stan::model::index_uni(ex))));
          current_statement__ = 290;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(log_conc_pme_train_z,
                             "log_conc_pme_train_z",
                             stan::model::index_uni(ex))));
          current_statement__ = 291;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(drain_train_z,
                             "drain_train_z", stan::model::index_uni(ex))));
          current_statement__ = 292;
          lp_accum__.add(stan::math::std_normal_lpdf<propto__>(
                           stan::model::rvalue(psi_train_z, "psi_train_z",
                             stan::model::index_uni(ex))));
        }
        current_statement__ = 302;
        if (stan::math::logical_eq(likelihood, 1)) {
          current_statement__ = 296;
          for (int c = 1; c <= N_conc_measurement_train; ++c) {
            current_statement__ = 295;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(yconc_train, "yconc_train",
                               stan::model::index_uni(c)),
                             stan::math::log(
                               stan::model::rvalue(conc_train, "conc_train",
                                 stan::model::index_uni(
                                   stan::model::rvalue(
                                     experiment_yconc_train,
                                     "experiment_yconc_train",
                                     stan::model::index_uni(c))),
                                 stan::model::index_uni(
                                   stan::model::rvalue(mic_ix_yconc_train,
                                     "mic_ix_yconc_train",
                                     stan::model::index_uni(c))))),
                             stan::model::rvalue(sigma_yconc_train,
                               "sigma_yconc_train", stan::model::index_uni(c))));
          }
          current_statement__ = 298;
          for (int e = 1; e <= N_enzyme_measurement_train; ++e) {
            current_statement__ = 297;
            lp_accum__.add(stan::math::lognormal_lpdf<propto__>(
                             stan::model::rvalue(yenz_train, "yenz_train",
                               stan::model::index_uni(e)),
                             stan::math::log(
                               stan::model::rvalue(conc_enzyme_train,
                                 "conc_enzyme_train",
                                 stan::model::index_uni(
                                   stan::model::rvalue(experiment_yenz_train,
                                     "experiment_yenz_train",
                                     stan::model::index_uni(e))),
                                 stan::model::index_uni(
                                   stan::model::rvalue(enzyme_yenz_train,
                                     "enzyme_yenz_train",
                                     stan::model::index_uni(e))))),
                             stan::model::rvalue(sigma_yenz_train,
                               "sigma_yenz_train", stan::model::index_uni(e))));
          }
          current_statement__ = 300;
          for (int f = 1; f <= N_flux_measurement_train; ++f) {
            current_statement__ = 299;
            lp_accum__.add(stan::math::normal_lpdf<propto__>(
                             stan::model::rvalue(yflux_train, "yflux_train",
                               stan::model::index_uni(f)),
                             stan::model::rvalue(flux_train, "flux_train",
                               stan::model::index_uni(
                                 stan::model::rvalue(experiment_yflux_train,
                                   "experiment_yflux_train",
                                   stan::model::index_uni(f))),
                               stan::model::index_uni(
                                 stan::model::rvalue(reaction_yflux_train,
                                   "reaction_yflux_train",
                                   stan::model::index_uni(f)))),
                             stan::model::rvalue(sigma_yflux_train,
                               "sigma_yflux_train", stan::model::index_uni(f))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> dgf;
      current_statement__ = 1;
      dgf = in__.template read<
              Eigen::Matrix<local_scalar_t__,-1,1>>(N_metabolite);
      Eigen::Matrix<double,-1,1> log_kcat_z;
      current_statement__ = 2;
      log_kcat_z = in__.template read<
                     Eigen::Matrix<local_scalar_t__,-1,1>>(N_enzyme);
      Eigen::Matrix<double,-1,1> log_km_z;
      current_statement__ = 3;
      log_km_z = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_km);
      Eigen::Matrix<double,-1,1> log_kcat_pme_z;
      current_statement__ = 4;
      log_kcat_pme_z = in__.template read<
                         Eigen::Matrix<local_scalar_t__,-1,1>>(N_pme);
      Eigen::Matrix<double,-1,1> log_ki_z;
      current_statement__ = 5;
      log_ki_z = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_competitive_inhibition);
      Eigen::Matrix<double,-1,1> log_dissociation_constant_z;
      current_statement__ = 6;
      log_dissociation_constant_z = in__.template read<
                                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_allostery);
      Eigen::Matrix<double,-1,1> log_transfer_constant_z;
      current_statement__ = 7;
      log_transfer_constant_z = in__.template read<
                                  Eigen::Matrix<local_scalar_t__,-1,1>>(N_allosteric_enzyme);
      Eigen::Matrix<double,-1,1> psi_train_z;
      current_statement__ = 8;
      psi_train_z = in__.template read<
                      Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train);
      std::vector<Eigen::Matrix<double,-1,1>> drain_train_z;
      current_statement__ = 9;
      drain_train_z = in__.template read<
                        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                        N_drain);
      std::vector<Eigen::Matrix<double,-1,1>> log_conc_enzyme_train_z;
      current_statement__ = 10;
      log_conc_enzyme_train_z = in__.template read<
                                  std::vector<
                                    Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                                  N_enzyme);
      std::vector<Eigen::Matrix<double,-1,1>> log_conc_pme_train_z;
      current_statement__ = 11;
      log_conc_pme_train_z = in__.template read<
                               std::vector<
                                 Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                               N_pme);
      std::vector<Eigen::Matrix<double,-1,1>> log_conc_unbalanced_train_z;
      current_statement__ = 12;
      log_conc_unbalanced_train_z = in__.template read<
                                      std::vector<
                                        Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_train,
                                      N_unbalanced);
      Eigen::Matrix<double,-1,1> km =
        Eigen::Matrix<double,-1,1>::Constant(N_km,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> ki =
        Eigen::Matrix<double,-1,1>::Constant(N_competitive_inhibition,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kcat =
        Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> dissociation_constant =
        Eigen::Matrix<double,-1,1>::Constant(N_allostery,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> transfer_constant =
        Eigen::Matrix<double,-1,1>::Constant(N_allosteric_enzyme,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> kcat_pme =
        Eigen::Matrix<double,-1,1>::Constant(N_pme,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> psi_train =
        Eigen::Matrix<double,-1,1>::Constant(N_experiment_train,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> drain_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_drain,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_enzyme_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_unbalanced_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_unbalanced,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_pme_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_pme,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_mic,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> flux_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_reaction,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> dgr_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      out__.write(dgf);
      out__.write(log_kcat_z);
      out__.write(log_km_z);
      out__.write(log_kcat_pme_z);
      out__.write(log_ki_z);
      out__.write(log_dissociation_constant_z);
      out__.write(log_transfer_constant_z);
      out__.write(psi_train_z);
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(drain_train_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(log_conc_enzyme_train_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(log_conc_pme_train_z[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(log_conc_unbalanced_train_z[(sym2__ - 1)][(sym1__ -
            1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym431__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym431__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_km, "priors_km",
                stan::model::index_uni(2)), log_km_z,
              stan::model::rvalue(priors_km, "priors_km",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym431__");
      }
      stan::model::assign(km, inline_unz_log_1d_return_sym431__,
        "assigning variable km");
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym433__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym433__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_ki, "priors_ki",
                stan::model::index_uni(2)), log_ki_z,
              stan::model::rvalue(priors_ki, "priors_ki",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym433__");
      }
      stan::model::assign(ki, inline_unz_log_1d_return_sym433__,
        "assigning variable ki");
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym435__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym435__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_kcat, "priors_kcat",
                stan::model::index_uni(2)), log_kcat_z,
              stan::model::rvalue(priors_kcat, "priors_kcat",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym435__");
      }
      stan::model::assign(kcat, inline_unz_log_1d_return_sym435__,
        "assigning variable kcat");
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym437__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym437__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_dissociation_constant,
                "priors_dissociation_constant", stan::model::index_uni(2)),
              log_dissociation_constant_z,
              stan::model::rvalue(priors_dissociation_constant,
                "priors_dissociation_constant", stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym437__");
      }
      stan::model::assign(dissociation_constant,
        inline_unz_log_1d_return_sym437__,
        "assigning variable dissociation_constant");
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym439__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym439__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_transfer_constant,
                "priors_transfer_constant", stan::model::index_uni(2)),
              log_transfer_constant_z,
              stan::model::rvalue(priors_transfer_constant,
                "priors_transfer_constant", stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym439__");
      }
      stan::model::assign(transfer_constant,
        inline_unz_log_1d_return_sym439__,
        "assigning variable transfer_constant");
      Eigen::Matrix<double,-1,1> inline_unz_log_1d_return_sym441__;
      {
        current_statement__ = 37;
        stan::model::assign(inline_unz_log_1d_return_sym441__,
          stan::math::exp(
            stan::math::fma(
              stan::model::rvalue(priors_kcat_pme, "priors_kcat_pme",
                stan::model::index_uni(2)), log_kcat_pme_z,
              stan::model::rvalue(priors_kcat_pme, "priors_kcat_pme",
                stan::model::index_uni(1)))),
          "assigning variable inline_unz_log_1d_return_sym441__");
      }
      stan::model::assign(kcat_pme, inline_unz_log_1d_return_sym441__,
        "assigning variable kcat_pme");
      Eigen::Matrix<double,-1,1> inline_unz_1d_return_sym443__;
      {
        current_statement__ = 38;
        stan::model::assign(inline_unz_1d_return_sym443__,
          stan::math::fma(
            stan::model::rvalue(priors_psi_train, "priors_psi_train",
              stan::model::index_uni(2)), psi_train_z,
            stan::model::rvalue(priors_psi_train, "priors_psi_train",
              stan::model::index_uni(1))),
          "assigning variable inline_unz_1d_return_sym443__");
      }
      stan::model::assign(psi_train, inline_unz_1d_return_sym443__,
        "assigning variable psi_train");
      std::vector<Eigen::Matrix<double,-1,1>> inline_unz_2d_return_sym445__;
      {
        current_statement__ = 39;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(drain_train_z));
        current_statement__ = 40;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(drain_train_z, "drain_train_z",
              stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_2d_out_sym446__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              drain_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               drain_train_z,
                                                               "drain_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 43;
        for (int inline_unz_2d_ex_sym448__ = 1; inline_unz_2d_ex_sym448__ <=
             stan::math::size(drain_train_z); ++inline_unz_2d_ex_sym448__) {
          Eigen::Matrix<double,-1,1>
            inline_unz_2d_inline_unz_1d_return_sym1___sym447__;
          {
            current_statement__ = 38;
            stan::model::assign(
              inline_unz_2d_inline_unz_1d_return_sym1___sym447__,
              stan::math::fma(
                stan::model::rvalue(priors_drain_train, "priors_drain_train",
                  stan::model::index_uni(2),
                  stan::model::index_uni(inline_unz_2d_ex_sym448__)),
                drain_train_z[(inline_unz_2d_ex_sym448__ - 1)],
                stan::model::rvalue(priors_drain_train, "priors_drain_train",
                  stan::model::index_uni(1),
                  stan::model::index_uni(inline_unz_2d_ex_sym448__))),
              "assigning variable inline_unz_2d_inline_unz_1d_return_sym1___sym447__");
          }
          stan::model::assign(inline_unz_2d_out_sym446__,
            inline_unz_2d_inline_unz_1d_return_sym1___sym447__,
            "assigning variable inline_unz_2d_out_sym446__",
            stan::model::index_uni(inline_unz_2d_ex_sym448__));
        }
        current_statement__ = 44;
        stan::model::assign(inline_unz_2d_return_sym445__,
          inline_unz_2d_out_sym446__,
          "assigning variable inline_unz_2d_return_sym445__");
      }
      stan::model::assign(drain_train, inline_unz_2d_return_sym445__,
        "assigning variable drain_train");
      std::vector<Eigen::Matrix<double,-1,1>>
        inline_unz_log_2d_return_sym450__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_enzyme_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_enzyme_train_z,
              "log_conc_enzyme_train_z", stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym451__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_enzyme_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_enzyme_train_z,
                                                               "log_conc_enzyme_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym453__ = 1; inline_unz_log_2d_ex_sym453__
             <=
             stan::math::size(log_conc_enzyme_train_z); ++inline_unz_log_2d_ex_sym453__) {
          Eigen::Matrix<double,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym452__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym452__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_enzyme_train,
                    "priors_conc_enzyme_train", stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym453__)),
                  log_conc_enzyme_train_z[(inline_unz_log_2d_ex_sym453__ -
                  1)],
                  stan::model::rvalue(priors_conc_enzyme_train,
                    "priors_conc_enzyme_train", stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym453__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym452__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym451__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym452__,
            "assigning variable inline_unz_log_2d_out_sym451__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym453__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym450__,
          inline_unz_log_2d_out_sym451__,
          "assigning variable inline_unz_log_2d_return_sym450__");
      }
      stan::model::assign(conc_enzyme_train,
        inline_unz_log_2d_return_sym450__,
        "assigning variable conc_enzyme_train");
      std::vector<Eigen::Matrix<double,-1,1>>
        inline_unz_log_2d_return_sym455__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_unbalanced_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_unbalanced_train_z,
              "log_conc_unbalanced_train_z", stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym456__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_unbalanced_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_unbalanced_train_z,
                                                               "log_conc_unbalanced_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym458__ = 1; inline_unz_log_2d_ex_sym458__
             <=
             stan::math::size(log_conc_unbalanced_train_z); ++inline_unz_log_2d_ex_sym458__) {
          Eigen::Matrix<double,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym457__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym457__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_unbalanced_train,
                    "priors_conc_unbalanced_train",
                    stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym458__)),
                  log_conc_unbalanced_train_z[(inline_unz_log_2d_ex_sym458__
                  - 1)],
                  stan::model::rvalue(priors_conc_unbalanced_train,
                    "priors_conc_unbalanced_train",
                    stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym458__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym457__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym456__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym457__,
            "assigning variable inline_unz_log_2d_out_sym456__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym458__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym455__,
          inline_unz_log_2d_out_sym456__,
          "assigning variable inline_unz_log_2d_return_sym455__");
      }
      stan::model::assign(conc_unbalanced_train,
        inline_unz_log_2d_return_sym455__,
        "assigning variable conc_unbalanced_train");
      std::vector<Eigen::Matrix<double,-1,1>>
        inline_unz_log_2d_return_sym460__;
      {
        current_statement__ = 45;
        stan::math::validate_non_negative_index("out", "size(z)",
          stan::math::size(log_conc_pme_train_z));
        current_statement__ = 46;
        stan::math::validate_non_negative_index("out", "rows(z[1])",
          stan::math::rows(
            stan::model::rvalue(log_conc_pme_train_z, "log_conc_pme_train_z",
              stan::model::index_uni(1))));
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
          inline_unz_log_2d_out_sym461__ =
          std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(
                                                              log_conc_pme_train_z),
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                             stan::model::rvalue(
                                                               log_conc_pme_train_z,
                                                               "log_conc_pme_train_z",
                                                               stan::model::index_uni(
                                                                 1))),
              DUMMY_VAR__));
        current_statement__ = 49;
        for (int inline_unz_log_2d_ex_sym463__ = 1; inline_unz_log_2d_ex_sym463__
             <=
             stan::math::size(log_conc_pme_train_z); ++inline_unz_log_2d_ex_sym463__) {
          Eigen::Matrix<double,-1,1>
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym462__;
          {
            current_statement__ = 37;
            stan::model::assign(
              inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym462__,
              stan::math::exp(
                stan::math::fma(
                  stan::model::rvalue(priors_conc_pme_train,
                    "priors_conc_pme_train", stan::model::index_uni(2),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym463__)),
                  log_conc_pme_train_z[(inline_unz_log_2d_ex_sym463__ - 1)],
                  stan::model::rvalue(priors_conc_pme_train,
                    "priors_conc_pme_train", stan::model::index_uni(1),
                    stan::model::index_uni(inline_unz_log_2d_ex_sym463__)))),
              "assigning variable inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym462__");
          }
          stan::model::assign(inline_unz_log_2d_out_sym461__,
            inline_unz_log_2d_inline_unz_log_1d_return_sym3___sym462__,
            "assigning variable inline_unz_log_2d_out_sym461__",
            stan::model::index_uni(inline_unz_log_2d_ex_sym463__));
        }
        current_statement__ = 50;
        stan::model::assign(inline_unz_log_2d_return_sym460__,
          inline_unz_log_2d_out_sym461__,
          "assigning variable inline_unz_log_2d_return_sym460__");
      }
      stan::model::assign(conc_pme_train, inline_unz_log_2d_return_sym460__,
        "assigning variable conc_pme_train");
      current_statement__ = 266;
      for (int e = 1; e <= N_experiment_train; ++e) {
        Eigen::Matrix<double,-1,1> inline_get_dgr_return_sym465__;
        {
          local_scalar_t__ inline_get_dgr_minus_RT_sym466__ = DUMMY_VAR__;
          local_scalar_t__ inline_get_dgr_dgf_water_sym467__ = DUMMY_VAR__;
          local_scalar_t__ inline_get_dgr_F_sym468__ = DUMMY_VAR__;
          current_statement__ = 54;
          stan::math::validate_non_negative_index("dgrs", "cols(S)",
            stan::math::cols(S));
          Eigen::Matrix<local_scalar_t__,-1,1> inline_get_dgr_dgrs_sym469__;
          current_statement__ = 55;
          stan::model::assign(inline_get_dgr_dgrs_sym469__,
            stan::math::fma(
              stan::math::multiply(transported_charge,
                stan::model::rvalue(psi_train, "psi_train",
                  stan::model::index_uni(e))), 96.5,
              stan::math::fma(water_stoichiometry, -150.9,
                stan::math::multiply(stan::math::transpose(S),
                  stan::model::rvalue(dgf, "dgf",
                    stan::model::index_multi(mic_to_met))))),
            "assigning variable inline_get_dgr_dgrs_sym469__");
          current_statement__ = 56;
          stan::model::assign(inline_get_dgr_return_sym465__,
            inline_get_dgr_dgrs_sym469__,
            "assigning variable inline_get_dgr_return_sym465__");
        }
        stan::model::assign(dgr_train, inline_get_dgr_return_sym465__,
          "assigning variable dgr_train", stan::model::index_uni(e));
        current_statement__ = 57;
        stan::model::assign(flux_train,
          stan::math::rep_vector(0, N_reaction),
          "assigning variable flux_train", stan::model::index_uni(e));
        current_statement__ = 58;
        stan::math::validate_non_negative_index("conc_enzyme_experiment",
          "N_enzyme", N_enzyme);
        Eigen::Matrix<double,-1,1> conc_enzyme_experiment;
        current_statement__ = 59;
        stan::model::assign(conc_enzyme_experiment,
          stan::model::rvalue(conc_enzyme_train, "conc_enzyme_train",
            stan::model::index_uni(e)),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 60;
        stan::math::validate_non_negative_index("conc_pme_experiment",
          "N_pme", N_pme);
        Eigen::Matrix<double,-1,1> conc_pme_experiment;
        current_statement__ = 61;
        stan::model::assign(conc_pme_experiment,
          stan::model::rvalue(conc_pme_train, "conc_pme_train",
            stan::model::index_uni(e)),
          "assigning variable conc_pme_experiment");
        current_statement__ = 62;
        stan::math::validate_non_negative_index("conc_balanced_experiment",
          "N_mic - N_unbalanced", (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<double,-1,1>> conc_balanced_experiment =
          std::vector<Eigen::Matrix<double,-1,1>>(1,
            Eigen::Matrix<double,-1,1>::Constant((N_mic - N_unbalanced),
              std::numeric_limits<double>::quiet_NaN()));
        int N_eko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym471__;
        {
          current_statement__ = 65;
          inline_measure_ragged_return_sym471__ = ((stan::model::rvalue(
                                                      enzyme_knockout_train_bounds,
                                                      "enzyme_knockout_train_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(enzyme_knockout_train_bounds,
              "enzyme_knockout_train_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        int N_pko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym473__;
        {
          current_statement__ = 65;
          inline_measure_ragged_return_sym473__ = ((stan::model::rvalue(
                                                      pme_knockout_train_bounds,
                                                      "pme_knockout_train_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(pme_knockout_train_bounds,
              "pme_knockout_train_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        current_statement__ = 72;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym471__, 0)) {
          current_statement__ = 67;
          stan::math::validate_non_negative_index("eko_experiment",
            "N_eko_experiment", inline_measure_ragged_return_sym471__);
          std::vector<int> eko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym471__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym475__;
          {
            current_statement__ = 69;
            stan::model::assign(inline_extract_ragged_return_sym475__,
              stan::model::rvalue(enzyme_knockout_train_long,
                "enzyme_knockout_train_long",
                stan::model::index_min_max(
                  stan::model::rvalue(enzyme_knockout_train_bounds,
                    "enzyme_knockout_train_bounds",
                    stan::model::index_uni(e), stan::model::index_uni(1)),
                  stan::model::rvalue(enzyme_knockout_train_bounds,
                    "enzyme_knockout_train_bounds",
                    stan::model::index_uni(e), stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym475__");
          }
          current_statement__ = 70;
          stan::model::assign(conc_enzyme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym471__),
            "assigning variable conc_enzyme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym475__));
        }
        current_statement__ = 77;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym473__, 0)) {
          current_statement__ = 73;
          stan::math::validate_non_negative_index("pko_experiment",
            "N_pko_experiment", inline_measure_ragged_return_sym473__);
          std::vector<int> pko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym473__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym477__;
          {
            current_statement__ = 69;
            stan::model::assign(inline_extract_ragged_return_sym477__,
              stan::model::rvalue(pme_knockout_train_long,
                "pme_knockout_train_long",
                stan::model::index_min_max(
                  stan::model::rvalue(pme_knockout_train_bounds,
                    "pme_knockout_train_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(1)),
                  stan::model::rvalue(pme_knockout_train_bounds,
                    "pme_knockout_train_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym477__");
          }
          current_statement__ = 75;
          stan::model::assign(conc_pme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym473__),
            "assigning variable conc_pme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym477__));
        }
        current_statement__ = 78;
        stan::model::assign(conc_balanced_experiment,
          stan::math::ode_bdf_tol(dbalanced_dt_variadic2_functor__(),
            stan::model::rvalue(conc_init, "conc_init",
              stan::model::index_uni(e)), 0, std::vector<double>{timepoint},
            rel_tol, abs_tol, max_num_steps, pstream__,
            stan::model::rvalue(conc_unbalanced_train,
              "conc_unbalanced_train", stan::model::index_uni(e)),
            balanced_mic_ix, unbalanced_mic_ix, conc_enzyme_experiment,
            stan::model::rvalue(dgr_train, "dgr_train",
              stan::model::index_uni(e)), kcat, km, ki, transfer_constant,
            dissociation_constant, kcat_pme, conc_pme_experiment,
            stan::model::rvalue(drain_train, "drain_train",
              stan::model::index_uni(e)),
            stan::model::rvalue(temperature_train, "temperature_train",
              stan::model::index_uni(e)), drain_small_conc_corrector, S,
            subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
            sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
            prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
            phosphorylation_ix_long, phosphorylation_ix_bounds,
            phosphorylation_type, phosphorylation_pme),
          "assigning variable conc_balanced_experiment");
        current_statement__ = 79;
        stan::model::assign(conc_train,
          stan::model::rvalue(conc_balanced_experiment,
            "conc_balanced_experiment", stan::model::index_uni(1)),
          "assigning variable conc_train", stan::model::index_uni(e),
          stan::model::index_multi(balanced_mic_ix));
        current_statement__ = 80;
        stan::model::assign(conc_train,
          stan::model::rvalue(conc_unbalanced_train, "conc_unbalanced_train",
            stan::model::index_uni(e)), "assigning variable conc_train",
          stan::model::index_uni(e),
          stan::model::index_multi(unbalanced_mic_ix));
        {
          current_statement__ = 81;
          stan::math::validate_non_negative_index("edge_flux", "N_edge",
            N_edge);
          Eigen::Matrix<double,-1,1> edge_flux =
            Eigen::Matrix<double,-1,1>::Constant(N_edge,
              std::numeric_limits<double>::quiet_NaN());
          Eigen::Matrix<double,-1,1> inline_get_edge_flux_return_sym479__;
          {
            int inline_get_edge_flux_N_edge_sym480__;
            current_statement__ = 83;
            inline_get_edge_flux_N_edge_sym480__ = stan::math::cols(S);
            current_statement__ = 84;
            stan::math::validate_non_negative_index("vmax", "N_edge",
              inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_vmax_sym481__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym482__;
            {
              int
                inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym483__;
              current_statement__ = 86;
              inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym483__ =
                stan::math::size(edge_to_enzyme);
              current_statement__ = 87;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym483__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__;
              current_statement__ = 88;
              stan::model::assign(
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym483__),
                "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__");
              current_statement__ = 93;
              for (int
                     inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__ =
                     1; inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__
                   <=
                   inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym483__; ++inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__) {
                current_statement__ = 91;
                if (stan::math::logical_neq(
                      edge_type[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__
                      - 1)], 3)) {
                  current_statement__ = 89;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__,
                    (stan::model::rvalue(conc_enzyme_experiment,
                       "conc_enzyme_experiment",
                       stan::model::index_uni(
                         edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__
                         - 1)])) *
                    stan::model::rvalue(kcat, "kcat",
                      stan::model::index_uni(
                        edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__
                        - 1)]))),
                    "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym485__));
                }
              }
              current_statement__ = 94;
              stan::model::assign(
                inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym482__,
                inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym484__,
                "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym482__");
            }
            current_statement__ = 95;
            stan::math::validate_non_negative_index("reversibility",
              "N_edge", inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_reversibility_sym486__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_reversibility_return_sym50___sym487__;
            {
              local_scalar_t__
                inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym488__;
              current_statement__ = 97;
              inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym488__ = (0.008314
                *
                stan::model::rvalue(temperature_train, "temperature_train",
                  stan::model::index_uni(e)));
              int
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__;
              current_statement__ = 98;
              inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__ =
                stan::math::cols(S);
              current_statement__ = 99;
              stan::math::validate_non_negative_index("reaction_quotient",
                "N_edge",
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym490__;
              current_statement__ = 100;
              stan::model::assign(
                inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym490__,
                stan::math::multiply(stan::math::transpose(S),
                  stan::math::log(
                    stan::model::rvalue(conc_train, "conc_train",
                      stan::model::index_uni(e)))),
                "assigning variable inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym490__");
              current_statement__ = 101;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__,
                  DUMMY_VAR__);
              current_statement__ = 107;
              for (int
                     inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__ =
                     1; inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__
                   <=
                   inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym489__; ++inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__) {
                current_statement__ = 105;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__
                      - 1)], 1)) {
                  current_statement__ = 104;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__,
                    (1 -
                    stan::math::exp(
                      (stan::math::fma(
                         inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym488__,
                         inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym490__[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__
                         - 1)],
                         stan::model::rvalue(dgr_train, "dgr_train",
                           stan::model::index_uni(e))[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__
                         - 1)]) /
                      inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym488__))),
                    "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__));
                } else {
                  current_statement__ = 103;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_reversibility_f_sym55___sym492__));
                }
              }
              current_statement__ = 108;
              stan::model::assign(
                inline_get_edge_flux_inline_get_reversibility_return_sym50___sym487__,
                inline_get_edge_flux_inline_get_reversibility_out_sym54___sym491__,
                "assigning variable inline_get_edge_flux_inline_get_reversibility_return_sym50___sym487__");
            }
            current_statement__ = 109;
            stan::math::validate_non_negative_index("free_enzyme_ratio",
              "N_edge", inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_free_enzyme_ratio_sym493__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym494__;
            {
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym495__;
              current_statement__ = 111;
              inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym495__ =
                stan::math::cols(S);
              current_statement__ = 112;
              stan::math::validate_non_negative_index("denom", "N_edge",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym495__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym495__,
                  DUMMY_VAR__);
              current_statement__ = 143;
              for (int
                     inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__ =
                     1; inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__
                   <=
                   inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym495__; ++inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__) {
                current_statement__ = 117;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__
                      - 1)], 3)) {
                  current_statement__ = 114;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__));
                  continue;
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_sub_sym60___sym497__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__ = ((
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_prod_sym62___sym499__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__ = ((
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_N_ci_sym64___sym501__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym502__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym502__ = ((
                    stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 121;
                stan::math::validate_non_negative_index("sub_ix", "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_ix_sym66___sym503__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym504__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym504__,
                    stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym504__");
                }
                current_statement__ = 123;
                stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_km_ix_sym68___sym505__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym506__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym506__,
                    stan::model::rvalue(sub_km_ix_by_edge_long,
                      "sub_km_ix_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym506__");
                }
                current_statement__ = 125;
                stan::math::validate_non_negative_index("prod_ix", "N_prod",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_ix_sym70___sym507__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym508__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym508__,
                    stan::model::rvalue(prod_by_edge_long,
                      "prod_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(prod_by_edge_bounds,
                          "prod_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(prod_by_edge_bounds,
                          "prod_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym508__");
                }
                current_statement__ = 127;
                stan::math::validate_non_negative_index("sub_over_km",
                  "N_sub",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__);
                Eigen::Matrix<local_scalar_t__,-1,1>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym509__;
                current_statement__ = 128;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym509__,
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_train, "conc_train",
                        stan::model::index_uni(e)), "conc_train[e]",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym504__)),
                    stan::model::rvalue(km, "km",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym506__))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym509__");
                current_statement__ = 129;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__,
                  stan::math::prod(
                    stan::math::pow(
                      stan::math::add(
                        stan::math::rep_vector(1,
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym498__),
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym509__),
                      stan::math::fabs(
                        stan::model::rvalue(S, "S",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym504__),
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__))))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__));
                current_statement__ = 136;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__
                      - 1)], 1)) {
                  current_statement__ = 130;
                  stan::math::validate_non_negative_index("prod_km_ix",
                    "N_prod",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_km_ix_sym73___sym510__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym511__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym511__,
                      stan::model::rvalue(prod_km_ix_by_edge_long,
                        "prod_km_ix_by_edge_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(prod_km_ix_by_edge_bounds,
                            "prod_km_ix_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(prod_km_ix_by_edge_bounds,
                            "prod_km_ix_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym511__");
                  }
                  current_statement__ = 132;
                  stan::math::validate_non_negative_index("prod_over_km",
                    "N_prod",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__);
                  Eigen::Matrix<local_scalar_t__,-1,1>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym512__;
                  current_statement__ = 133;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym512__,
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym508__)),
                      stan::model::rvalue(km, "km",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym511__))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym512__");
                  current_statement__ = 134;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__,
                    (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__
                    - 1)] +
                    (stan::math::prod(
                       stan::math::pow(
                         stan::math::add(
                           stan::math::rep_vector(1,
                             inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym500__),
                           inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym512__),
                         stan::math::fabs(
                           stan::model::rvalue(S, "S",
                             stan::model::index_multi(
                               inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym508__),
                             stan::model::index_uni(
                               inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__)))))
                    - 1)),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__));
                }
                current_statement__ = 141;
                if (stan::math::logical_gt(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym502__,
                      0)) {
                  current_statement__ = 137;
                  stan::math::validate_non_negative_index("ci_ix", "N_ci",
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym502__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_ci_ix_sym76___sym513__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym502__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym514__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym514__,
                      stan::model::rvalue(ci_ix_long, "ci_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym514__");
                  }
                  current_statement__ = 139;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__,
                    (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__
                    - 1)] +
                    stan::math::sum(
                      stan::math::elt_divide(
                        stan::model::rvalue(
                          stan::model::rvalue(conc_train, "conc_train",
                            stan::model::index_uni(e)), "conc_train[e]",
                          stan::model::index_multi(
                            stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                              stan::model::index_multi(
                                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym514__)))),
                        stan::model::rvalue(ki, "ki",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym514__))))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym515__));
                }
              }
              current_statement__ = 144;
              stan::model::assign(
                inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym494__,
                stan::math::inv(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym496__),
                "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym494__");
            }
            current_statement__ = 145;
            stan::math::validate_non_negative_index("saturation", "N_edge",
              inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_saturation_sym516__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_saturation_return_sym80___sym517__;
            {
              int
                inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym518__;
              current_statement__ = 147;
              inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym518__ =
                stan::math::size(sub_by_edge_bounds);
              current_statement__ = 148;
              stan::math::validate_non_negative_index("prod_conc_over_km",
                "N_edge",
                inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym518__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__ =
                Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym518__,
                  DUMMY_VAR__);
              current_statement__ = 161;
              for (int
                     inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__ =
                     1; inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__
                   <=
                   inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym518__; ++inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__) {
                current_statement__ = 153;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__
                      - 1)], 3)) {
                  current_statement__ = 150;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__,
                    1,
                    "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__));
                  continue;
                }
                int
                  inline_get_edge_flux_inline_get_saturation_N_sub_sym83___sym520__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__ = ((
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 155;
                stan::math::validate_non_negative_index("sub_ix", "N_sub",
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_sub_ix_sym85___sym522__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym523__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym523__,
                    stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym523__");
                }
                current_statement__ = 157;
                stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                  inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_sub_km_ix_sym87___sym524__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym521__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym525__;
                {
                  current_statement__ = 69;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym525__,
                    stan::model::rvalue(sub_km_ix_by_edge_long,
                      "sub_km_ix_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_km_ix_by_edge_bounds,
                          "sub_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym525__");
                }
                current_statement__ = 159;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__,
                  stan::math::prod(
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym523__)),
                      stan::model::rvalue(km, "km",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym525__)))),
                  "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_saturation_f_sym89___sym526__));
              }
              current_statement__ = 162;
              stan::model::assign(
                inline_get_edge_flux_inline_get_saturation_return_sym80___sym517__,
                stan::math::elt_multiply(
                  inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym519__,
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym494__),
                "assigning variable inline_get_edge_flux_inline_get_saturation_return_sym80___sym517__");
            }
            current_statement__ = 163;
            stan::math::validate_non_negative_index("allostery", "N_edge",
              inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_allostery_sym527__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_allostery_return_sym91___sym528__;
            {
              int
                inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym529__;
              current_statement__ = 165;
              inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym529__ =
                stan::math::size(allostery_ix_bounds);
              current_statement__ = 166;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym529__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__;
              current_statement__ = 167;
              stan::model::assign(
                inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym529__),
                "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__");
              current_statement__ = 185;
              for (int
                     inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__ =
                     1; inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__
                   <=
                   inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym529__; ++inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__) {
                int
                  inline_get_edge_flux_inline_get_allostery_N_allostery_sym94___sym531__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym532__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym532__ = ((
                    stan::model::rvalue(allostery_ix_bounds,
                      "allostery_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(allostery_ix_bounds,
                      "allostery_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 171;
                if (stan::math::logical_eq(
                      inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym532__,
                      0)) {
                  continue;
                }
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym533__;
                current_statement__ = 172;
                inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym533__ = 1;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym534__;
                current_statement__ = 173;
                inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym534__ = 1;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym535__;
                current_statement__ = 174;
                inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym535__ =
                  stan::model::rvalue(transfer_constant, "transfer_constant",
                    stan::model::index_uni(
                      edge_to_tc[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__
                      - 1)]));
                {
                  std::vector<int>
                    inline_get_edge_flux_inline_get_allostery_sym1___sym99___sym536__;
                  std::vector<int>
                    inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym537__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym537__,
                      stan::model::rvalue(allostery_ix_long,
                        "allostery_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(allostery_ix_bounds,
                            "allostery_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(allostery_ix_bounds,
                            "allostery_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym537__");
                  }
                  current_statement__ = 176;
                  for (int
                         inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym540__ =
                         1; inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym540__
                       <=
                       stan::math::size(
                         inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym537__); ++inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym540__) {
                    int
                      inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym538__;
                    current_statement__ = 176;
                    inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym538__ = inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym537__[(inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym540__
                      - 1)];
                    local_scalar_t__
                      inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym539__;
                    current_statement__ = 177;
                    inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym539__ = (
                      stan::model::rvalue(
                        stan::model::rvalue(conc_train, "conc_train",
                          stan::model::index_uni(e)), "conc_train[e]",
                        stan::model::index_uni(
                          allostery_mic[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym538__
                          - 1)]))
                      /
                      dissociation_constant[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym538__
                      - 1)]);
                    current_statement__ = 182;
                    if (stan::math::logical_eq(
                          allostery_type[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym538__
                          - 1)], 1)) {
                      current_statement__ = 180;
                      inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym534__ = (inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym534__
                        +
                        inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym539__);
                    } else {
                      current_statement__ = 178;
                      inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym533__ = (inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym533__
                        +
                        inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym539__);
                    }
                  }
                }
                current_statement__ = 183;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__,
                  stan::math::inv(
                    stan::math::fma(
                      inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym535__,
                      stan::math::pow(
                        ((inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym494__[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__
                        - 1)] *
                        inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym533__)
                        /
                        inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym534__),
                        subunits[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__
                        - 1)]), 1)),
                  "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_allostery_f_sym104___sym541__));
              }
              current_statement__ = 186;
              stan::model::assign(
                inline_get_edge_flux_inline_get_allostery_return_sym91___sym528__,
                inline_get_edge_flux_inline_get_allostery_out_sym93___sym530__,
                "assigning variable inline_get_edge_flux_inline_get_allostery_return_sym91___sym528__");
            }
            current_statement__ = 187;
            stan::math::validate_non_negative_index("phosphorylation",
              "N_edge", inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_phosphorylation_sym542__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym543__;
            {
              int
                inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym544__;
              current_statement__ = 189;
              inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym544__ =
                stan::math::size(phosphorylation_ix_bounds);
              current_statement__ = 190;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym544__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__;
              current_statement__ = 191;
              stan::model::assign(
                inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym544__),
                "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__");
              current_statement__ = 208;
              for (int
                     inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__ =
                     1; inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__
                   <=
                   inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym544__; ++inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__) {
                int
                  inline_get_edge_flux_inline_get_phosphorylation_N_phos_sym109___sym546__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym547__;
                {
                  current_statement__ = 65;
                  inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym547__ = ((
                    stan::model::rvalue(phosphorylation_ix_bounds,
                      "phosphorylation_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(phosphorylation_ix_bounds,
                      "phosphorylation_ix_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 195;
                if (stan::math::logical_eq(
                      inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym547__,
                      0)) {
                  continue;
                }
                local_scalar_t__
                  inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym548__;
                current_statement__ = 196;
                inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym548__ = 0;
                local_scalar_t__
                  inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__;
                current_statement__ = 197;
                inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__ = 0;
                {
                  std::vector<int>
                    inline_get_edge_flux_inline_get_phosphorylation_sym1___sym113___sym550__;
                  std::vector<int>
                    inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym551__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym551__,
                      stan::model::rvalue(phosphorylation_ix_long,
                        "phosphorylation_ix_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(phosphorylation_ix_bounds,
                            "phosphorylation_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(phosphorylation_ix_bounds,
                            "phosphorylation_ix_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym551__");
                  }
                  current_statement__ = 199;
                  for (int
                         inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym554__ =
                         1; inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym554__
                       <=
                       stan::math::size(
                         inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym551__); ++inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym554__) {
                    int
                      inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym552__;
                    current_statement__ = 199;
                    inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym552__ = inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym551__[(inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym554__
                      - 1)];
                    local_scalar_t__
                      inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym553__;
                    current_statement__ = 200;
                    inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym553__ = (
                      stan::model::rvalue(kcat_pme, "kcat_pme",
                        stan::model::index_uni(
                          phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym552__
                          - 1)]))
                      *
                      stan::model::rvalue(conc_pme_experiment,
                        "conc_pme_experiment",
                        stan::model::index_uni(
                          phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym552__
                          - 1)])));
                    current_statement__ = 205;
                    if (stan::math::logical_eq(
                          phosphorylation_type[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym552__
                          - 1)], 2)) {
                      current_statement__ = 203;
                      inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym548__ = (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym548__
                        +
                        inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym553__);
                    } else {
                      current_statement__ = 201;
                      inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__ = (inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__
                        +
                        inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym553__);
                    }
                  }
                }
                current_statement__ = 206;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__,
                  stan::math::pow(
                    (inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__
                    /
                    (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym548__
                    +
                    inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym549__)),
                    subunits[(inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__
                    - 1)]),
                  "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym555__));
              }
              current_statement__ = 209;
              stan::model::assign(
                inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym543__,
                inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym545__,
                "assigning variable inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym543__");
            }
            current_statement__ = 210;
            stan::math::validate_non_negative_index("drain_by_edge",
              "N_edge", inline_get_edge_flux_N_edge_sym480__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_drain_by_edge_sym556__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym480__,
                DUMMY_VAR__);
            Eigen::Matrix<double,-1,1>
              inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym557__;
            {
              int
                inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym558__;
              current_statement__ = 212;
              inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym558__ =
                stan::math::size(edge_type);
              current_statement__ = 213;
              stan::math::validate_non_negative_index("out", "N_edge",
                inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym558__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__;
              current_statement__ = 214;
              stan::model::assign(
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__,
                stan::math::rep_vector(1,
                  inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym558__),
                "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__");
              current_statement__ = 222;
              for (int
                     inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__ =
                     1; inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__
                   <=
                   inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym558__; ++inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__) {
                current_statement__ = 220;
                if (stan::math::logical_eq(
                      edge_type[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__
                      - 1)], 3)) {
                  int
                    inline_get_edge_flux_inline_get_drain_by_edge_N_sub_sym123___sym560__ =
                    std::numeric_limits<int>::min();
                  int
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym561__;
                  {
                    current_statement__ = 65;
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym561__ = ((
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__),
                        stan::model::index_uni(2))
                      -
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__),
                        stan::model::index_uni(1)))
                      + 1);
                  }
                  current_statement__ = 216;
                  stan::math::validate_non_negative_index("subs", "N_sub",
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym561__);
                  std::vector<int>
                    inline_get_edge_flux_inline_get_drain_by_edge_subs_sym125___sym562__ =
                    std::vector<int>(inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym561__,
                      std::numeric_limits<int>::min());
                  std::vector<int>
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym563__;
                  {
                    current_statement__ = 69;
                    stan::model::assign(
                      inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym563__,
                      stan::model::rvalue(sub_by_edge_long,
                        "sub_by_edge_long",
                        stan::model::index_min_max(
                          stan::model::rvalue(sub_by_edge_bounds,
                            "sub_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__),
                            stan::model::index_uni(1)),
                          stan::model::rvalue(sub_by_edge_bounds,
                            "sub_by_edge_bounds",
                            stan::model::index_uni(
                              inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__),
                            stan::model::index_uni(2)))),
                      "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym563__");
                  }
                  current_statement__ = 218;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__,
                    (stan::model::rvalue(
                       stan::model::rvalue(drain_train, "drain_train",
                         stan::model::index_uni(e)), "drain_train[e]",
                       stan::model::index_uni(
                         edge_to_drain[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__
                         - 1)])) *
                    stan::math::prod(
                      stan::math::elt_divide(
                        stan::model::rvalue(
                          stan::model::rvalue(conc_train, "conc_train",
                            stan::model::index_uni(e)), "conc_train[e]",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym563__)),
                        stan::math::add(
                          stan::model::rvalue(
                            stan::model::rvalue(conc_train, "conc_train",
                              stan::model::index_uni(e)), "conc_train[e]",
                            stan::model::index_multi(
                              inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym563__)),
                          drain_small_conc_corrector)))),
                    "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym564__));
                }
              }
              current_statement__ = 223;
              stan::model::assign(
                inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym557__,
                inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym559__,
                "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym557__");
            }
            current_statement__ = 224;
            stan::model::assign(inline_get_edge_flux_return_sym479__,
              stan::math::elt_multiply(
                stan::math::elt_multiply(
                  stan::math::elt_multiply(
                    stan::math::elt_multiply(
                      stan::math::elt_multiply(
                        inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym482__,
                        inline_get_edge_flux_inline_get_saturation_return_sym80___sym517__),
                      inline_get_edge_flux_inline_get_reversibility_return_sym50___sym487__),
                    inline_get_edge_flux_inline_get_allostery_return_sym91___sym528__),
                  inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym543__),
                inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym557__),
              "assigning variable inline_get_edge_flux_return_sym479__");
          }
          current_statement__ = 226;
          for (int j = 1; j <= N_edge; ++j) {
            current_statement__ = 225;
            stan::model::assign(flux_train,
              (stan::model::rvalue(flux_train, "flux_train",
                 stan::model::index_uni(e),
                 stan::model::index_uni(
                   stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                     stan::model::index_uni(j)))) +
              stan::model::rvalue(inline_get_edge_flux_return_sym479__,
                "inline_get_edge_flux_return_sym479__",
                stan::model::index_uni(j))), "assigning variable flux_train",
              stan::model::index_uni(e),
              stan::model::index_uni(
                stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                  stan::model::index_uni(j))));
          }
          int inline_check_steady_state_return_sym566__;
          if (stan::math::logical_eq(reject_non_steady, 1)) {
            current_statement__ = 227;
            stan::math::validate_non_negative_index("rel_thresh_per_conc",
              "rows(conc)",
              stan::math::rows(
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1))));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_check_steady_state_rel_thresh_per_conc_sym567__;
            current_statement__ = 228;
            stan::model::assign(
              inline_check_steady_state_rel_thresh_per_conc_sym567__,
              stan::math::multiply(
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1)),
                steady_state_threshold_rel),
              "assigning variable inline_check_steady_state_rel_thresh_per_conc_sym567__");
            int inline_check_steady_state_relative_check_failed_sym568__;
            current_statement__ = 229;
            inline_check_steady_state_relative_check_failed_sym568__ =
              stan::math::logical_gt(
                stan::math::max(
                  stan::math::subtract(
                    stan::math::fabs(
                      stan::model::rvalue(
                        stan::math::multiply(S,
                          inline_get_edge_flux_return_sym479__),
                        "(S * inline_get_edge_flux_return_sym479__)",
                        stan::model::index_multi(balanced_mic_ix))),
                    inline_check_steady_state_rel_thresh_per_conc_sym567__)),
                0);
            int inline_check_steady_state_absolute_check_failed_sym569__;
            current_statement__ = 230;
            inline_check_steady_state_absolute_check_failed_sym569__ =
              stan::math::logical_gt(
                stan::math::max(
                  stan::math::fabs(
                    stan::model::rvalue(
                      stan::math::multiply(S,
                        inline_get_edge_flux_return_sym479__),
                      "(S * inline_get_edge_flux_return_sym479__)",
                      stan::model::index_multi(balanced_mic_ix)))),
                steady_state_threshold_abs);
            current_statement__ = 232;
            if (inline_check_steady_state_relative_check_failed_sym568__) {
              current_statement__ = 231;
              if (pstream__) {
                stan::math::stan_print(pstream__, "Sv ");
                stan::math::stan_print(pstream__,
                  stan::model::rvalue(
                    stan::math::multiply(S,
                      inline_get_edge_flux_return_sym479__),
                    "(S * inline_get_edge_flux_return_sym479__)",
                    stan::model::index_multi(balanced_mic_ix)));
                stan::math::stan_print(pstream__, " not within ");
                stan::math::stan_print(pstream__,
                  inline_check_steady_state_rel_thresh_per_conc_sym567__);
                stan::math::stan_print(pstream__, " of zero.");
                *(pstream__) << std::endl;
              }
            }
            current_statement__ = 234;
            if (inline_check_steady_state_absolute_check_failed_sym569__) {
              current_statement__ = 233;
              if (pstream__) {
                stan::math::stan_print(pstream__, "Sv ");
                stan::math::stan_print(pstream__,
                  stan::model::rvalue(
                    stan::math::multiply(S,
                      inline_get_edge_flux_return_sym479__),
                    "(S * inline_get_edge_flux_return_sym479__)",
                    stan::model::index_multi(balanced_mic_ix)));
                stan::math::stan_print(pstream__, " not within ");
                stan::math::stan_print(pstream__, steady_state_threshold_abs);
                stan::math::stan_print(pstream__, " of zero.");
                *(pstream__) << std::endl;
              }
            }
            inline_check_steady_state_return_sym566__ = ((stan::math::primitive_value(
                                                            inline_check_steady_state_relative_check_failed_sym568__)
              ||
              stan::math::primitive_value(
                inline_check_steady_state_absolute_check_failed_sym569__)) ? 0 : 1);
          }
          if ((stan::math::primitive_value(
                 stan::math::logical_eq(reject_non_steady, 1))
              &&
              stan::math::primitive_value(
                stan::math::logical_eq(
                  inline_check_steady_state_return_sym566__, 0)))) {
            current_statement__ = 235;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "Non-steady state in experiment ");
              stan::math::stan_print(pstream__, e);
              *(pstream__) << std::endl;
            }
            current_statement__ = 236;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "Balanced metabolite concentration");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(conc_balanced_experiment,
                  "conc_balanced_experiment", stan::model::index_uni(1)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 237;
            if (pstream__) {
              stan::math::stan_print(pstream__, "flux_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(flux_train, "flux_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 238;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_init: ");
              stan::math::stan_print(pstream__, conc_init);
              *(pstream__) << std::endl;
            }
            current_statement__ = 239;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_unbalanced_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(conc_unbalanced_train,
                  "conc_unbalanced_train", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 240;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "log_conc_unbalanced_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_unbalanced_train_z,
                  "log_conc_unbalanced_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 241;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_enzyme_experiment: ");
              stan::math::stan_print(pstream__, conc_enzyme_experiment);
              *(pstream__) << std::endl;
            }
            current_statement__ = 242;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_conc_enzyme_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_enzyme_train_z,
                  "log_conc_enzyme_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 243;
            if (pstream__) {
              stan::math::stan_print(pstream__, "km: ");
              stan::math::stan_print(pstream__, km);
              *(pstream__) << std::endl;
            }
            current_statement__ = 244;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_km_z: ");
              stan::math::stan_print(pstream__, log_km_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 245;
            if (pstream__) {
              stan::math::stan_print(pstream__, "drain_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(drain_train, "drain_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 246;
            if (pstream__) {
              stan::math::stan_print(pstream__, "drain_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(drain_train_z, "drain_train_z",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 247;
            if (pstream__) {
              stan::math::stan_print(pstream__, "kcat: ");
              stan::math::stan_print(pstream__, kcat);
              *(pstream__) << std::endl;
            }
            current_statement__ = 248;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_kcat_z: ");
              stan::math::stan_print(pstream__, log_kcat_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 249;
            if (pstream__) {
              stan::math::stan_print(pstream__, "dgr_train: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(dgr_train, "dgr_train",
                  stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 250;
            if (pstream__) {
              stan::math::stan_print(pstream__, "ki: ");
              stan::math::stan_print(pstream__, ki);
              *(pstream__) << std::endl;
            }
            current_statement__ = 251;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_ki_z: ");
              stan::math::stan_print(pstream__, log_ki_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 252;
            if (pstream__) {
              stan::math::stan_print(pstream__, "dissociation_constant: ");
              stan::math::stan_print(pstream__, dissociation_constant);
              *(pstream__) << std::endl;
            }
            current_statement__ = 253;
            if (pstream__) {
              stan::math::stan_print(pstream__,
                "log_dissociation_constant_z: ");
              stan::math::stan_print(pstream__, log_dissociation_constant_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 254;
            if (pstream__) {
              stan::math::stan_print(pstream__, "transfer_constant: ");
              stan::math::stan_print(pstream__, transfer_constant);
              *(pstream__) << std::endl;
            }
            current_statement__ = 255;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_transfer_constant_z: ");
              stan::math::stan_print(pstream__, log_transfer_constant_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 256;
            if (pstream__) {
              stan::math::stan_print(pstream__, "kcat_pme: ");
              stan::math::stan_print(pstream__, kcat_pme);
              *(pstream__) << std::endl;
            }
            current_statement__ = 257;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_kcat_pme_z: ");
              stan::math::stan_print(pstream__, log_kcat_pme_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 258;
            if (pstream__) {
              stan::math::stan_print(pstream__, "conc_pme_experiment: ");
              stan::math::stan_print(pstream__, conc_pme_experiment);
              *(pstream__) << std::endl;
            }
            current_statement__ = 259;
            if (pstream__) {
              stan::math::stan_print(pstream__, "log_conc_pme_train_z: ");
              stan::math::stan_print(pstream__,
                stan::model::rvalue(log_conc_pme_train_z,
                  "log_conc_pme_train_z", stan::model::index_uni(e)));
              *(pstream__) << std::endl;
            }
            current_statement__ = 260;
            if (pstream__) {
              stan::math::stan_print(pstream__, "psi_train: ");
              stan::math::stan_print(pstream__, psi_train);
              *(pstream__) << std::endl;
            }
            current_statement__ = 261;
            if (pstream__) {
              stan::math::stan_print(pstream__, "psi_train_z: ");
              stan::math::stan_print(pstream__, psi_train_z);
              *(pstream__) << std::endl;
            }
            current_statement__ = 262;
            std::stringstream errmsg_stream__;
            stan::math::stan_print(&errmsg_stream__, "Rejecting");
            throw std::domain_error(errmsg_stream__.str());
          }
        }
      }
      current_statement__ = 24;
      stan::math::check_greater_or_equal(function__, "conc_train",
        conc_train, 0);
      if (emit_transformed_parameters__) {
        out__.write(km);
        out__.write(ki);
        out__.write(kcat);
        out__.write(dissociation_constant);
        out__.write(transfer_constant);
        out__.write(kcat_pme);
        out__.write(psi_train);
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(drain_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(conc_enzyme_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(conc_unbalanced_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(conc_pme_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(conc_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(flux_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            out__.write(dgr_train[(sym2__ - 1)][(sym1__ - 1)]);
          }
        }
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      Eigen::Matrix<double,-1,1> yrep_conc_train =
        Eigen::Matrix<double,-1,1>::Constant(N_conc_measurement_train,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> yrep_flux_train =
        Eigen::Matrix<double,-1,1>::Constant(N_flux_measurement_train,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> llik_conc_train =
        Eigen::Matrix<double,-1,1>::Constant(N_conc_measurement_train,
          std::numeric_limits<double>::quiet_NaN());
      Eigen::Matrix<double,-1,1> llik_flux_train =
        Eigen::Matrix<double,-1,1>::Constant(N_flux_measurement_train,
          std::numeric_limits<double>::quiet_NaN());
      std::vector<Eigen::Matrix<double,-1,1>> free_enzyme_ratio_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> saturation_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> allostery_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> phosphorylation_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> reversibility_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> keq_train =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_train,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 270;
      for (int c = 1; c <= N_conc_measurement_train; ++c) {
        current_statement__ = 267;
        stan::model::assign(yrep_conc_train,
          stan::math::lognormal_rng(
            stan::math::log(
              stan::model::rvalue(conc_train, "conc_train",
                stan::model::index_uni(
                  stan::model::rvalue(experiment_yconc_train,
                    "experiment_yconc_train", stan::model::index_uni(c))),
                stan::model::index_uni(
                  stan::model::rvalue(mic_ix_yconc_train,
                    "mic_ix_yconc_train", stan::model::index_uni(c))))),
            stan::model::rvalue(sigma_yconc_train, "sigma_yconc_train",
              stan::model::index_uni(c)), base_rng__),
          "assigning variable yrep_conc_train", stan::model::index_uni(c));
        current_statement__ = 268;
        stan::model::assign(llik_conc_train,
          stan::math::lognormal_lpdf<false>(
            stan::model::rvalue(yconc_train, "yconc_train",
              stan::model::index_uni(c)),
            stan::math::log(
              stan::model::rvalue(conc_train, "conc_train",
                stan::model::index_uni(
                  stan::model::rvalue(experiment_yconc_train,
                    "experiment_yconc_train", stan::model::index_uni(c))),
                stan::model::index_uni(
                  stan::model::rvalue(mic_ix_yconc_train,
                    "mic_ix_yconc_train", stan::model::index_uni(c))))),
            stan::model::rvalue(sigma_yconc_train, "sigma_yconc_train",
              stan::model::index_uni(c))),
          "assigning variable llik_conc_train", stan::model::index_uni(c));
      }
      current_statement__ = 274;
      for (int f = 1; f <= N_flux_measurement_train; ++f) {
        current_statement__ = 271;
        stan::model::assign(yrep_flux_train,
          stan::math::normal_rng(
            stan::model::rvalue(flux_train, "flux_train",
              stan::model::index_uni(
                stan::model::rvalue(experiment_yflux_train,
                  "experiment_yflux_train", stan::model::index_uni(f))),
              stan::model::index_uni(
                stan::model::rvalue(reaction_yflux_train,
                  "reaction_yflux_train", stan::model::index_uni(f)))),
            stan::model::rvalue(sigma_yflux_train, "sigma_yflux_train",
              stan::model::index_uni(f)), base_rng__),
          "assigning variable yrep_flux_train", stan::model::index_uni(f));
        current_statement__ = 272;
        stan::model::assign(llik_flux_train,
          stan::math::normal_lpdf<false>(
            stan::model::rvalue(yflux_train, "yflux_train",
              stan::model::index_uni(f)),
            stan::model::rvalue(flux_train, "flux_train",
              stan::model::index_uni(
                stan::model::rvalue(experiment_yflux_train,
                  "experiment_yflux_train", stan::model::index_uni(f))),
              stan::model::index_uni(
                stan::model::rvalue(reaction_yflux_train,
                  "reaction_yflux_train", stan::model::index_uni(f)))),
            stan::model::rvalue(sigma_yflux_train, "sigma_yflux_train",
              stan::model::index_uni(f))),
          "assigning variable llik_flux_train", stan::model::index_uni(f));
      }
      current_statement__ = 280;
      for (int e = 1; e <= N_experiment_train; ++e) {
        Eigen::Matrix<double,-1,1> inline_get_keq_return_sym571__;
        {
          local_scalar_t__ inline_get_keq_minus_RT_sym572__;
          current_statement__ = 275;
          inline_get_keq_minus_RT_sym572__ = (-0.008314 *
            stan::model::rvalue(temperature_train, "temperature_train",
              stan::model::index_uni(e)));
          current_statement__ = 276;
          stan::math::validate_non_negative_index("dgrs", "cols(S)",
            stan::math::cols(S));
          Eigen::Matrix<local_scalar_t__,-1,1> inline_get_keq_dgrs_sym573__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::cols(S),
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_keq_inline_get_dgr_return_sym5___sym574__;
          {
            local_scalar_t__
              inline_get_keq_inline_get_dgr_minus_RT_sym6___sym575__ =
              DUMMY_VAR__;
            local_scalar_t__
              inline_get_keq_inline_get_dgr_dgf_water_sym7___sym576__ =
              DUMMY_VAR__;
            local_scalar_t__
              inline_get_keq_inline_get_dgr_F_sym8___sym577__ = DUMMY_VAR__;
            current_statement__ = 54;
            stan::math::validate_non_negative_index("dgrs", "cols(S)",
              stan::math::cols(S));
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_keq_inline_get_dgr_dgrs_sym9___sym578__;
            current_statement__ = 55;
            stan::model::assign(
              inline_get_keq_inline_get_dgr_dgrs_sym9___sym578__,
              stan::math::fma(
                stan::math::multiply(transported_charge,
                  stan::model::rvalue(psi_train, "psi_train",
                    stan::model::index_uni(e))), 96.5,
                stan::math::fma(water_stoichiometry, -150.9,
                  stan::math::multiply(stan::math::transpose(S),
                    stan::model::rvalue(dgf, "dgf",
                      stan::model::index_multi(mic_to_met))))),
              "assigning variable inline_get_keq_inline_get_dgr_dgrs_sym9___sym578__");
            current_statement__ = 56;
            stan::model::assign(
              inline_get_keq_inline_get_dgr_return_sym5___sym574__,
              inline_get_keq_inline_get_dgr_dgrs_sym9___sym578__,
              "assigning variable inline_get_keq_inline_get_dgr_return_sym5___sym574__");
          }
          current_statement__ = 278;
          stan::model::assign(inline_get_keq_return_sym571__,
            stan::math::exp(
              stan::math::divide(
                inline_get_keq_inline_get_dgr_return_sym5___sym574__,
                inline_get_keq_minus_RT_sym572__)),
            "assigning variable inline_get_keq_return_sym571__");
        }
        stan::model::assign(keq_train, inline_get_keq_return_sym571__,
          "assigning variable keq_train", stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1>
          inline_get_free_enzyme_ratio_return_sym580__;
        {
          int inline_get_free_enzyme_ratio_N_edge_sym581__;
          current_statement__ = 111;
          inline_get_free_enzyme_ratio_N_edge_sym581__ = stan::math::cols(S);
          current_statement__ = 112;
          stan::math::validate_non_negative_index("denom", "N_edge",
            inline_get_free_enzyme_ratio_N_edge_sym581__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_free_enzyme_ratio_denom_sym582__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_free_enzyme_ratio_N_edge_sym581__,
              DUMMY_VAR__);
          current_statement__ = 143;
          for (int inline_get_free_enzyme_ratio_f_sym601__ = 1; inline_get_free_enzyme_ratio_f_sym601__
               <=
               inline_get_free_enzyme_ratio_N_edge_sym581__; ++inline_get_free_enzyme_ratio_f_sym601__) {
            current_statement__ = 117;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_free_enzyme_ratio_f_sym601__ - 1)], 3)) {
              current_statement__ = 114;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym582__, 1,
                "assigning variable inline_get_free_enzyme_ratio_denom_sym582__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym601__));
              continue;
            }
            int inline_get_free_enzyme_ratio_N_sub_sym583__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__;
            {
              current_statement__ = 65;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__ = ((
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(1)))
                + 1);
            }
            int inline_get_free_enzyme_ratio_N_prod_sym585__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__;
            {
              current_statement__ = 65;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__ = ((
                stan::model::rvalue(prod_by_edge_bounds,
                  "prod_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(prod_by_edge_bounds,
                  "prod_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(1)))
                + 1);
            }
            int inline_get_free_enzyme_ratio_N_ci_sym587__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym588__;
            {
              current_statement__ = 65;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym588__ = ((
                stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym601__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 121;
            stan::math::validate_non_negative_index("sub_ix", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__);
            std::vector<int> inline_get_free_enzyme_ratio_sub_ix_sym589__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym590__;
            {
              current_statement__ = 69;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym590__,
                stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym590__");
            }
            current_statement__ = 123;
            stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__);
            std::vector<int>
              inline_get_free_enzyme_ratio_sub_km_ix_sym591__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym592__;
            {
              current_statement__ = 69;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym592__,
                stan::model::rvalue(sub_km_ix_by_edge_long,
                  "sub_km_ix_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym592__");
            }
            current_statement__ = 125;
            stan::math::validate_non_negative_index("prod_ix", "N_prod",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__);
            std::vector<int> inline_get_free_enzyme_ratio_prod_ix_sym593__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym594__;
            {
              current_statement__ = 69;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym594__,
                stan::model::rvalue(prod_by_edge_long, "prod_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym594__");
            }
            current_statement__ = 127;
            stan::math::validate_non_negative_index("sub_over_km", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_free_enzyme_ratio_sub_over_km_sym595__;
            current_statement__ = 128;
            stan::model::assign(
              inline_get_free_enzyme_ratio_sub_over_km_sym595__,
              stan::math::elt_divide(
                stan::model::rvalue(
                  stan::model::rvalue(conc_train, "conc_train",
                    stan::model::index_uni(e)), "conc_train[e]",
                  stan::model::index_multi(
                    inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym590__)),
                stan::model::rvalue(km, "km",
                  stan::model::index_multi(
                    inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym592__))),
              "assigning variable inline_get_free_enzyme_ratio_sub_over_km_sym595__");
            current_statement__ = 129;
            stan::model::assign(inline_get_free_enzyme_ratio_denom_sym582__,
              stan::math::prod(
                stan::math::pow(
                  stan::math::add(
                    stan::math::rep_vector(1,
                      inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym584__),
                    inline_get_free_enzyme_ratio_sub_over_km_sym595__),
                  stan::math::fabs(
                    stan::model::rvalue(S, "S",
                      stan::model::index_multi(
                        inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym590__),
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym601__))))),
              "assigning variable inline_get_free_enzyme_ratio_denom_sym582__",
              stan::model::index_uni(inline_get_free_enzyme_ratio_f_sym601__));
            current_statement__ = 136;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_free_enzyme_ratio_f_sym601__ - 1)], 1)) {
              current_statement__ = 130;
              stan::math::validate_non_negative_index("prod_km_ix", "N_prod",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__);
              std::vector<int>
                inline_get_free_enzyme_ratio_prod_km_ix_sym596__ =
                std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym597__;
              {
                current_statement__ = 69;
                stan::model::assign(
                  inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym597__,
                  stan::model::rvalue(prod_km_ix_by_edge_long,
                    "prod_km_ix_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(prod_km_ix_by_edge_bounds,
                        "prod_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym601__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(prod_km_ix_by_edge_bounds,
                        "prod_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym601__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym597__");
              }
              current_statement__ = 132;
              stan::math::validate_non_negative_index("prod_over_km",
                "N_prod",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_free_enzyme_ratio_prod_over_km_sym598__;
              current_statement__ = 133;
              stan::model::assign(
                inline_get_free_enzyme_ratio_prod_over_km_sym598__,
                stan::math::elt_divide(
                  stan::model::rvalue(
                    stan::model::rvalue(conc_train, "conc_train",
                      stan::model::index_uni(e)), "conc_train[e]",
                    stan::model::index_multi(
                      inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym594__)),
                  stan::model::rvalue(km, "km",
                    stan::model::index_multi(
                      inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym597__))),
                "assigning variable inline_get_free_enzyme_ratio_prod_over_km_sym598__");
              current_statement__ = 134;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym582__,
                (inline_get_free_enzyme_ratio_denom_sym582__[(inline_get_free_enzyme_ratio_f_sym601__
                - 1)] +
                (stan::math::prod(
                   stan::math::pow(
                     stan::math::add(
                       stan::math::rep_vector(1,
                         inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym586__),
                       inline_get_free_enzyme_ratio_prod_over_km_sym598__),
                     stan::math::fabs(
                       stan::model::rvalue(S, "S",
                         stan::model::index_multi(
                           inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym594__),
                         stan::model::index_uni(
                           inline_get_free_enzyme_ratio_f_sym601__))))) -
                1)),
                "assigning variable inline_get_free_enzyme_ratio_denom_sym582__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym601__));
            }
            current_statement__ = 141;
            if (stan::math::logical_gt(
                  inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym588__,
                  0)) {
              current_statement__ = 137;
              stan::math::validate_non_negative_index("ci_ix", "N_ci",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym588__);
              std::vector<int> inline_get_free_enzyme_ratio_ci_ix_sym599__ =
                std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym588__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym600__;
              {
                current_statement__ = 69;
                stan::model::assign(
                  inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym600__,
                  stan::model::rvalue(ci_ix_long, "ci_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym601__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym601__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym600__");
              }
              current_statement__ = 139;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym582__,
                (inline_get_free_enzyme_ratio_denom_sym582__[(inline_get_free_enzyme_ratio_f_sym601__
                - 1)] +
                stan::math::sum(
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_train, "conc_train",
                        stan::model::index_uni(e)), "conc_train[e]",
                      stan::model::index_multi(
                        stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                          stan::model::index_multi(
                            inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym600__)))),
                    stan::model::rvalue(ki, "ki",
                      stan::model::index_multi(
                        inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym600__))))),
                "assigning variable inline_get_free_enzyme_ratio_denom_sym582__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym601__));
            }
          }
          current_statement__ = 144;
          stan::model::assign(inline_get_free_enzyme_ratio_return_sym580__,
            stan::math::inv(inline_get_free_enzyme_ratio_denom_sym582__),
            "assigning variable inline_get_free_enzyme_ratio_return_sym580__");
        }
        stan::model::assign(free_enzyme_ratio_train,
          inline_get_free_enzyme_ratio_return_sym580__,
          "assigning variable free_enzyme_ratio_train",
          stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_saturation_return_sym603__;
        {
          int inline_get_saturation_N_edge_sym604__;
          current_statement__ = 147;
          inline_get_saturation_N_edge_sym604__ = stan::math::size(
                                                    sub_by_edge_bounds);
          current_statement__ = 148;
          stan::math::validate_non_negative_index("prod_conc_over_km",
            "N_edge", inline_get_saturation_N_edge_sym604__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_saturation_prod_conc_over_km_sym605__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_saturation_N_edge_sym604__,
              DUMMY_VAR__);
          current_statement__ = 161;
          for (int inline_get_saturation_f_sym612__ = 1; inline_get_saturation_f_sym612__
               <=
               inline_get_saturation_N_edge_sym604__; ++inline_get_saturation_f_sym612__) {
            current_statement__ = 153;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_saturation_f_sym612__ - 1)], 3)) {
              current_statement__ = 150;
              stan::model::assign(
                inline_get_saturation_prod_conc_over_km_sym605__, 1,
                "assigning variable inline_get_saturation_prod_conc_over_km_sym605__",
                stan::model::index_uni(inline_get_saturation_f_sym612__));
              continue;
            }
            int inline_get_saturation_N_sub_sym606__ =
              std::numeric_limits<int>::min();
            int
              inline_get_saturation_inline_measure_ragged_return_sym11___sym607__;
            {
              current_statement__ = 65;
              inline_get_saturation_inline_measure_ragged_return_sym11___sym607__ = ((
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(inline_get_saturation_f_sym612__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(inline_get_saturation_f_sym612__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 155;
            stan::math::validate_non_negative_index("sub_ix", "N_sub",
              inline_get_saturation_inline_measure_ragged_return_sym11___sym607__);
            std::vector<int> inline_get_saturation_sub_ix_sym608__ =
              std::vector<int>(inline_get_saturation_inline_measure_ragged_return_sym11___sym607__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_saturation_inline_extract_ragged_return_sym13___sym609__;
            {
              current_statement__ = 69;
              stan::model::assign(
                inline_get_saturation_inline_extract_ragged_return_sym13___sym609__,
                stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym612__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym612__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_saturation_inline_extract_ragged_return_sym13___sym609__");
            }
            current_statement__ = 157;
            stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
              inline_get_saturation_inline_measure_ragged_return_sym11___sym607__);
            std::vector<int> inline_get_saturation_sub_km_ix_sym610__ =
              std::vector<int>(inline_get_saturation_inline_measure_ragged_return_sym11___sym607__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_saturation_inline_extract_ragged_return_sym15___sym611__;
            {
              current_statement__ = 69;
              stan::model::assign(
                inline_get_saturation_inline_extract_ragged_return_sym15___sym611__,
                stan::model::rvalue(sub_km_ix_by_edge_long,
                  "sub_km_ix_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym612__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym612__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_saturation_inline_extract_ragged_return_sym15___sym611__");
            }
            current_statement__ = 159;
            stan::model::assign(
              inline_get_saturation_prod_conc_over_km_sym605__,
              stan::math::prod(
                stan::math::elt_divide(
                  stan::model::rvalue(
                    stan::model::rvalue(conc_train, "conc_train",
                      stan::model::index_uni(e)), "conc_train[e]",
                    stan::model::index_multi(
                      inline_get_saturation_inline_extract_ragged_return_sym13___sym609__)),
                  stan::model::rvalue(km, "km",
                    stan::model::index_multi(
                      inline_get_saturation_inline_extract_ragged_return_sym15___sym611__)))),
              "assigning variable inline_get_saturation_prod_conc_over_km_sym605__",
              stan::model::index_uni(inline_get_saturation_f_sym612__));
          }
          current_statement__ = 162;
          stan::model::assign(inline_get_saturation_return_sym603__,
            stan::math::elt_multiply(
              inline_get_saturation_prod_conc_over_km_sym605__,
              stan::model::rvalue(free_enzyme_ratio_train,
                "free_enzyme_ratio_train", stan::model::index_uni(e))),
            "assigning variable inline_get_saturation_return_sym603__");
        }
        stan::model::assign(saturation_train,
          inline_get_saturation_return_sym603__,
          "assigning variable saturation_train", stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_allostery_return_sym614__;
        {
          int inline_get_allostery_N_edge_sym615__;
          current_statement__ = 165;
          inline_get_allostery_N_edge_sym615__ = stan::math::size(
                                                   allostery_ix_bounds);
          current_statement__ = 166;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_allostery_N_edge_sym615__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_allostery_out_sym616__;
          current_statement__ = 167;
          stan::model::assign(inline_get_allostery_out_sym616__,
            stan::math::rep_vector(1, inline_get_allostery_N_edge_sym615__),
            "assigning variable inline_get_allostery_out_sym616__");
          current_statement__ = 185;
          for (int inline_get_allostery_f_sym627__ = 1; inline_get_allostery_f_sym627__
               <=
               inline_get_allostery_N_edge_sym615__; ++inline_get_allostery_f_sym627__) {
            int inline_get_allostery_N_allostery_sym617__ =
              std::numeric_limits<int>::min();
            int
              inline_get_allostery_inline_measure_ragged_return_sym33___sym618__;
            {
              current_statement__ = 65;
              inline_get_allostery_inline_measure_ragged_return_sym33___sym618__ = ((
                stan::model::rvalue(allostery_ix_bounds,
                  "allostery_ix_bounds",
                  stan::model::index_uni(inline_get_allostery_f_sym627__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(allostery_ix_bounds,
                  "allostery_ix_bounds",
                  stan::model::index_uni(inline_get_allostery_f_sym627__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 171;
            if (stan::math::logical_eq(
                  inline_get_allostery_inline_measure_ragged_return_sym33___sym618__,
                  0)) {
              continue;
            }
            local_scalar_t__ inline_get_allostery_Q_num_sym619__;
            current_statement__ = 172;
            inline_get_allostery_Q_num_sym619__ = 1;
            local_scalar_t__ inline_get_allostery_Q_denom_sym620__;
            current_statement__ = 173;
            inline_get_allostery_Q_denom_sym620__ = 1;
            local_scalar_t__ inline_get_allostery_tc_edge_sym621__;
            current_statement__ = 174;
            inline_get_allostery_tc_edge_sym621__ = stan::model::rvalue(
                                                      transfer_constant,
                                                      "transfer_constant",
                                                      stan::model::index_uni(
                                                        edge_to_tc[(inline_get_allostery_f_sym627__
                                                        - 1)]));
            {
              std::vector<int> inline_get_allostery_sym1___sym622__;
              std::vector<int>
                inline_get_allostery_inline_extract_ragged_return_sym35___sym623__;
              {
                current_statement__ = 69;
                stan::model::assign(
                  inline_get_allostery_inline_extract_ragged_return_sym35___sym623__,
                  stan::model::rvalue(allostery_ix_long, "allostery_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(allostery_ix_bounds,
                        "allostery_ix_bounds",
                        stan::model::index_uni(
                          inline_get_allostery_f_sym627__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(allostery_ix_bounds,
                        "allostery_ix_bounds",
                        stan::model::index_uni(
                          inline_get_allostery_f_sym627__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_allostery_inline_extract_ragged_return_sym35___sym623__");
              }
              current_statement__ = 176;
              for (int inline_get_allostery_sym3___sym626__ = 1; inline_get_allostery_sym3___sym626__
                   <=
                   stan::math::size(
                     inline_get_allostery_inline_extract_ragged_return_sym35___sym623__); ++inline_get_allostery_sym3___sym626__) {
                int inline_get_allostery_allostery_sym624__;
                current_statement__ = 176;
                inline_get_allostery_allostery_sym624__ = inline_get_allostery_inline_extract_ragged_return_sym35___sym623__[(inline_get_allostery_sym3___sym626__
                  - 1)];
                local_scalar_t__ inline_get_allostery_conc_over_dc_sym625__;
                current_statement__ = 177;
                inline_get_allostery_conc_over_dc_sym625__ = (stan::model::rvalue(
                                                                stan::model::rvalue(
                                                                  conc_train,
                                                                  "conc_train",
                                                                  stan::model::index_uni(
                                                                    e)),
                                                                "conc_train[e]",
                                                                stan::model::index_uni(
                                                                  allostery_mic[(inline_get_allostery_allostery_sym624__
                                                                  - 1)]))
                  /
                  dissociation_constant[(inline_get_allostery_allostery_sym624__
                  - 1)]);
                current_statement__ = 182;
                if (stan::math::logical_eq(
                      allostery_type[(inline_get_allostery_allostery_sym624__
                      - 1)], 1)) {
                  current_statement__ = 180;
                  inline_get_allostery_Q_denom_sym620__ = (inline_get_allostery_Q_denom_sym620__
                    + inline_get_allostery_conc_over_dc_sym625__);
                } else {
                  current_statement__ = 178;
                  inline_get_allostery_Q_num_sym619__ = (inline_get_allostery_Q_num_sym619__
                    + inline_get_allostery_conc_over_dc_sym625__);
                }
              }
            }
            current_statement__ = 183;
            stan::model::assign(inline_get_allostery_out_sym616__,
              stan::math::inv(
                stan::math::fma(inline_get_allostery_tc_edge_sym621__,
                  stan::math::pow(
                    ((stan::model::rvalue(free_enzyme_ratio_train,
                        "free_enzyme_ratio_train", stan::model::index_uni(e))[(inline_get_allostery_f_sym627__
                    - 1)] * inline_get_allostery_Q_num_sym619__) /
                    inline_get_allostery_Q_denom_sym620__),
                    subunits[(inline_get_allostery_f_sym627__ - 1)]), 1)),
              "assigning variable inline_get_allostery_out_sym616__",
              stan::model::index_uni(inline_get_allostery_f_sym627__));
          }
          current_statement__ = 186;
          stan::model::assign(inline_get_allostery_return_sym614__,
            inline_get_allostery_out_sym616__,
            "assigning variable inline_get_allostery_return_sym614__");
        }
        stan::model::assign(allostery_train,
          inline_get_allostery_return_sym614__,
          "assigning variable allostery_train", stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_phosphorylation_return_sym629__;
        {
          int inline_get_phosphorylation_N_edge_sym630__;
          current_statement__ = 189;
          inline_get_phosphorylation_N_edge_sym630__ = stan::math::size(
                                                         phosphorylation_ix_bounds);
          current_statement__ = 190;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_phosphorylation_N_edge_sym630__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_phosphorylation_out_sym631__;
          current_statement__ = 191;
          stan::model::assign(inline_get_phosphorylation_out_sym631__,
            stan::math::rep_vector(1,
              inline_get_phosphorylation_N_edge_sym630__),
            "assigning variable inline_get_phosphorylation_out_sym631__");
          current_statement__ = 208;
          for (int inline_get_phosphorylation_f_sym641__ = 1; inline_get_phosphorylation_f_sym641__
               <=
               inline_get_phosphorylation_N_edge_sym630__; ++inline_get_phosphorylation_f_sym641__) {
            int inline_get_phosphorylation_N_phos_sym632__ =
              std::numeric_limits<int>::min();
            int
              inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym633__;
            {
              current_statement__ = 65;
              inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym633__ = ((
                stan::model::rvalue(phosphorylation_ix_bounds,
                  "phosphorylation_ix_bounds",
                  stan::model::index_uni(
                    inline_get_phosphorylation_f_sym641__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(phosphorylation_ix_bounds,
                  "phosphorylation_ix_bounds",
                  stan::model::index_uni(
                    inline_get_phosphorylation_f_sym641__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 195;
            if (stan::math::logical_eq(
                  inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym633__,
                  0)) {
              continue;
            }
            local_scalar_t__ inline_get_phosphorylation_alpha_sym634__;
            current_statement__ = 196;
            inline_get_phosphorylation_alpha_sym634__ = 0;
            local_scalar_t__ inline_get_phosphorylation_beta_sym635__;
            current_statement__ = 197;
            inline_get_phosphorylation_beta_sym635__ = 0;
            {
              std::vector<int> inline_get_phosphorylation_sym1___sym636__;
              std::vector<int>
                inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym637__;
              {
                current_statement__ = 69;
                stan::model::assign(
                  inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym637__,
                  stan::model::rvalue(phosphorylation_ix_long,
                    "phosphorylation_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(phosphorylation_ix_bounds,
                        "phosphorylation_ix_bounds",
                        stan::model::index_uni(
                          inline_get_phosphorylation_f_sym641__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(phosphorylation_ix_bounds,
                        "phosphorylation_ix_bounds",
                        stan::model::index_uni(
                          inline_get_phosphorylation_f_sym641__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym637__");
              }
              current_statement__ = 199;
              for (int inline_get_phosphorylation_sym3___sym640__ = 1; inline_get_phosphorylation_sym3___sym640__
                   <=
                   stan::math::size(
                     inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym637__); ++inline_get_phosphorylation_sym3___sym640__) {
                int inline_get_phosphorylation_phos_sym638__;
                current_statement__ = 199;
                inline_get_phosphorylation_phos_sym638__ = inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym637__[(inline_get_phosphorylation_sym3___sym640__
                  - 1)];
                local_scalar_t__
                  inline_get_phosphorylation_kcat_times_conc_sym639__;
                current_statement__ = 200;
                inline_get_phosphorylation_kcat_times_conc_sym639__ = (
                  stan::model::rvalue(kcat_pme, "kcat_pme",
                    stan::model::index_uni(
                      phosphorylation_pme[(inline_get_phosphorylation_phos_sym638__
                      - 1)]))
                  *
                  stan::model::rvalue(
                    stan::model::rvalue(conc_pme_train, "conc_pme_train",
                      stan::model::index_uni(e)), "conc_pme_train[e]",
                    stan::model::index_uni(
                      phosphorylation_pme[(inline_get_phosphorylation_phos_sym638__
                      - 1)])));
                current_statement__ = 205;
                if (stan::math::logical_eq(
                      phosphorylation_type[(inline_get_phosphorylation_phos_sym638__
                      - 1)], 2)) {
                  current_statement__ = 203;
                  inline_get_phosphorylation_alpha_sym634__ = (inline_get_phosphorylation_alpha_sym634__
                    + inline_get_phosphorylation_kcat_times_conc_sym639__);
                } else {
                  current_statement__ = 201;
                  inline_get_phosphorylation_beta_sym635__ = (inline_get_phosphorylation_beta_sym635__
                    + inline_get_phosphorylation_kcat_times_conc_sym639__);
                }
              }
            }
            current_statement__ = 206;
            stan::model::assign(inline_get_phosphorylation_out_sym631__,
              stan::math::pow((inline_get_phosphorylation_beta_sym635__ /
                (inline_get_phosphorylation_alpha_sym634__ +
                inline_get_phosphorylation_beta_sym635__)),
                subunits[(inline_get_phosphorylation_f_sym641__ - 1)]),
              "assigning variable inline_get_phosphorylation_out_sym631__",
              stan::model::index_uni(inline_get_phosphorylation_f_sym641__));
          }
          current_statement__ = 209;
          stan::model::assign(inline_get_phosphorylation_return_sym629__,
            inline_get_phosphorylation_out_sym631__,
            "assigning variable inline_get_phosphorylation_return_sym629__");
        }
        stan::model::assign(phosphorylation_train,
          inline_get_phosphorylation_return_sym629__,
          "assigning variable phosphorylation_train",
          stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_reversibility_return_sym643__;
        {
          local_scalar_t__ inline_get_reversibility_RT_sym644__;
          current_statement__ = 97;
          inline_get_reversibility_RT_sym644__ = (0.008314 *
            stan::model::rvalue(temperature_train, "temperature_train",
              stan::model::index_uni(e)));
          int inline_get_reversibility_N_edge_sym645__;
          current_statement__ = 98;
          inline_get_reversibility_N_edge_sym645__ = stan::math::cols(S);
          current_statement__ = 99;
          stan::math::validate_non_negative_index("reaction_quotient",
            "N_edge", inline_get_reversibility_N_edge_sym645__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_reversibility_reaction_quotient_sym646__;
          current_statement__ = 100;
          stan::model::assign(
            inline_get_reversibility_reaction_quotient_sym646__,
            stan::math::multiply(stan::math::transpose(S),
              stan::math::log(
                stan::model::rvalue(conc_train, "conc_train",
                  stan::model::index_uni(e)))),
            "assigning variable inline_get_reversibility_reaction_quotient_sym646__");
          current_statement__ = 101;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_reversibility_N_edge_sym645__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_reversibility_out_sym647__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_reversibility_N_edge_sym645__,
              DUMMY_VAR__);
          current_statement__ = 107;
          for (int inline_get_reversibility_f_sym648__ = 1; inline_get_reversibility_f_sym648__
               <=
               inline_get_reversibility_N_edge_sym645__; ++inline_get_reversibility_f_sym648__) {
            current_statement__ = 105;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_reversibility_f_sym648__ - 1)], 1)) {
              current_statement__ = 104;
              stan::model::assign(inline_get_reversibility_out_sym647__, (1 -
                stan::math::exp(
                  (stan::math::fma(inline_get_reversibility_RT_sym644__,
                     inline_get_reversibility_reaction_quotient_sym646__[(inline_get_reversibility_f_sym648__
                     - 1)],
                     stan::model::rvalue(dgr_train, "dgr_train",
                       stan::model::index_uni(e))[(inline_get_reversibility_f_sym648__
                     - 1)]) / inline_get_reversibility_RT_sym644__))),
                "assigning variable inline_get_reversibility_out_sym647__",
                stan::model::index_uni(inline_get_reversibility_f_sym648__));
            } else {
              current_statement__ = 103;
              stan::model::assign(inline_get_reversibility_out_sym647__, 1,
                "assigning variable inline_get_reversibility_out_sym647__",
                stan::model::index_uni(inline_get_reversibility_f_sym648__));
            }
          }
          current_statement__ = 108;
          stan::model::assign(inline_get_reversibility_return_sym643__,
            inline_get_reversibility_out_sym647__,
            "assigning variable inline_get_reversibility_return_sym643__");
        }
        stan::model::assign(reversibility_train,
          inline_get_reversibility_return_sym643__,
          "assigning variable reversibility_train", stan::model::index_uni(e));
      }
      out__.write(yrep_conc_train);
      out__.write(yrep_flux_train);
      out__.write(llik_conc_train);
      out__.write(llik_flux_train);
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(free_enzyme_ratio_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(saturation_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(allostery_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(phosphorylation_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(reversibility_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          out__.write(keq_train[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> dgf;
      current_statement__ = 1;
      stan::model::assign(dgf,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_metabolite),
        "assigning variable dgf");
      out__.write(dgf);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_z;
      current_statement__ = 2;
      stan::model::assign(log_kcat_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_enzyme),
        "assigning variable log_kcat_z");
      out__.write(log_kcat_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_km_z;
      current_statement__ = 3;
      stan::model::assign(log_km_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_km),
        "assigning variable log_km_z");
      out__.write(log_km_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_pme_z;
      current_statement__ = 4;
      stan::model::assign(log_kcat_pme_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pme),
        "assigning variable log_kcat_pme_z");
      out__.write(log_kcat_pme_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_ki_z;
      current_statement__ = 5;
      stan::model::assign(log_ki_z,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(N_competitive_inhibition),
        "assigning variable log_ki_z");
      out__.write(log_ki_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_dissociation_constant_z;
      current_statement__ = 6;
      stan::model::assign(log_dissociation_constant_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_allostery),
        "assigning variable log_dissociation_constant_z");
      out__.write(log_dissociation_constant_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_transfer_constant_z;
      current_statement__ = 7;
      stan::model::assign(log_transfer_constant_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_allosteric_enzyme),
        "assigning variable log_transfer_constant_z");
      out__.write(log_transfer_constant_z);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_train_z;
      current_statement__ = 8;
      stan::model::assign(psi_train_z,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train),
        "assigning variable psi_train_z");
      out__.write(psi_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> drain_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_drain,
            DUMMY_VAR__));
      current_statement__ = 9;
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        current_statement__ = 9;
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          current_statement__ = 9;
          stan::model::assign(drain_train_z, in__.read<local_scalar_t__>(),
            "assigning variable drain_train_z",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(drain_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_enzyme_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme,
            DUMMY_VAR__));
      current_statement__ = 10;
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        current_statement__ = 10;
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          current_statement__ = 10;
          stan::model::assign(log_conc_enzyme_train_z,
            in__.read<local_scalar_t__>(),
            "assigning variable log_conc_enzyme_train_z",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(log_conc_enzyme_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_pme_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__));
      current_statement__ = 11;
      for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
        current_statement__ = 11;
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          current_statement__ = 11;
          stan::model::assign(log_conc_pme_train_z,
            in__.read<local_scalar_t__>(),
            "assigning variable log_conc_pme_train_z",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(log_conc_pme_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_unbalanced_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_unbalanced,
            DUMMY_VAR__));
      current_statement__ = 12;
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        current_statement__ = 12;
        for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
          current_statement__ = 12;
          stan::model::assign(log_conc_unbalanced_train_z,
            in__.read<local_scalar_t__>(),
            "assigning variable log_conc_unbalanced_train_z",
            stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
        }
      }
      out__.write(log_conc_unbalanced_train_z);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "dgf", "double",
        std::vector<size_t>{static_cast<size_t>(N_metabolite)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "log_kcat_z",
        "double", std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "log_km_z",
        "double", std::vector<size_t>{static_cast<size_t>(N_km)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "log_kcat_pme_z",
        "double", std::vector<size_t>{static_cast<size_t>(N_pme)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization", "log_ki_z",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization",
        "log_dissociation_constant_z", "double",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization",
        "log_transfer_constant_z", "double",
        std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)});
      current_statement__ = 8;
      context__.validate_dims("parameter initialization", "psi_train_z",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train)});
      current_statement__ = 9;
      context__.validate_dims("parameter initialization", "drain_train_z",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_drain)});
      current_statement__ = 10;
      context__.validate_dims("parameter initialization",
        "log_conc_enzyme_train_z", "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_enzyme)});
      current_statement__ = 11;
      context__.validate_dims("parameter initialization",
        "log_conc_pme_train_z", "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_pme)});
      current_statement__ = 12;
      context__.validate_dims("parameter initialization",
        "log_conc_unbalanced_train_z", "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_train),
          static_cast<size_t>(N_unbalanced)});
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> dgf =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_metabolite,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> dgf_flat__;
        current_statement__ = 1;
        dgf_flat__ = context__.vals_r("dgf");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_metabolite; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(dgf, dgf_flat__[(pos__ - 1)],
            "assigning variable dgf", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(dgf);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_kcat_z_flat__;
        current_statement__ = 2;
        log_kcat_z_flat__ = context__.vals_r("log_kcat_z");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(log_kcat_z, log_kcat_z_flat__[(pos__ - 1)],
            "assigning variable log_kcat_z", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_kcat_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_km_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_km, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_km_z_flat__;
        current_statement__ = 3;
        log_km_z_flat__ = context__.vals_r("log_km_z");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(log_km_z, log_km_z_flat__[(pos__ - 1)],
            "assigning variable log_km_z", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_km_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_kcat_pme_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_kcat_pme_z_flat__;
        current_statement__ = 4;
        log_kcat_pme_z_flat__ = context__.vals_r("log_kcat_pme_z");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(log_kcat_pme_z, log_kcat_pme_z_flat__[(pos__ -
            1)], "assigning variable log_kcat_pme_z",
            stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_kcat_pme_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_ki_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_competitive_inhibition,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_ki_z_flat__;
        current_statement__ = 5;
        log_ki_z_flat__ = context__.vals_r("log_ki_z");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(log_ki_z, log_ki_z_flat__[(pos__ - 1)],
            "assigning variable log_ki_z", stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_ki_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_dissociation_constant_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allostery,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_dissociation_constant_z_flat__;
        current_statement__ = 6;
        log_dissociation_constant_z_flat__ = context__.vals_r("log_dissociation_constant_z");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(log_dissociation_constant_z,
            log_dissociation_constant_z_flat__[(pos__ - 1)],
            "assigning variable log_dissociation_constant_z",
            stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_dissociation_constant_z);
      Eigen::Matrix<local_scalar_t__,-1,1> log_transfer_constant_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allosteric_enzyme,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> log_transfer_constant_z_flat__;
        current_statement__ = 7;
        log_transfer_constant_z_flat__ = context__.vals_r("log_transfer_constant_z");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
          current_statement__ = 7;
          stan::model::assign(log_transfer_constant_z,
            log_transfer_constant_z_flat__[(pos__ - 1)],
            "assigning variable log_transfer_constant_z",
            stan::model::index_uni(sym1__));
          current_statement__ = 7;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(log_transfer_constant_z);
      Eigen::Matrix<local_scalar_t__,-1,1> psi_train_z =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_experiment_train,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> psi_train_z_flat__;
        current_statement__ = 8;
        psi_train_z_flat__ = context__.vals_r("psi_train_z");
        current_statement__ = 8;
        pos__ = 1;
        current_statement__ = 8;
        for (int sym1__ = 1; sym1__ <= N_experiment_train; ++sym1__) {
          current_statement__ = 8;
          stan::model::assign(psi_train_z, psi_train_z_flat__[(pos__ - 1)],
            "assigning variable psi_train_z", stan::model::index_uni(sym1__));
          current_statement__ = 8;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(psi_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> drain_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_drain,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> drain_train_z_flat__;
        current_statement__ = 9;
        drain_train_z_flat__ = context__.vals_r("drain_train_z");
        current_statement__ = 9;
        pos__ = 1;
        current_statement__ = 9;
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          current_statement__ = 9;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 9;
            stan::model::assign(drain_train_z, drain_train_z_flat__[(pos__ -
              1)], "assigning variable drain_train_z",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 9;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(drain_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_enzyme_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> log_conc_enzyme_train_z_flat__;
        current_statement__ = 10;
        log_conc_enzyme_train_z_flat__ = context__.vals_r("log_conc_enzyme_train_z");
        current_statement__ = 10;
        pos__ = 1;
        current_statement__ = 10;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 10;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 10;
            stan::model::assign(log_conc_enzyme_train_z,
              log_conc_enzyme_train_z_flat__[(pos__ - 1)],
              "assigning variable log_conc_enzyme_train_z",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 10;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(log_conc_enzyme_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_pme_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> log_conc_pme_train_z_flat__;
        current_statement__ = 11;
        log_conc_pme_train_z_flat__ = context__.vals_r("log_conc_pme_train_z");
        current_statement__ = 11;
        pos__ = 1;
        current_statement__ = 11;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 11;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 11;
            stan::model::assign(log_conc_pme_train_z,
              log_conc_pme_train_z_flat__[(pos__ - 1)],
              "assigning variable log_conc_pme_train_z",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 11;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(log_conc_pme_train_z);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>
        log_conc_unbalanced_train_z =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_train,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_unbalanced,
            DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> log_conc_unbalanced_train_z_flat__;
        current_statement__ = 12;
        log_conc_unbalanced_train_z_flat__ = context__.vals_r("log_conc_unbalanced_train_z");
        current_statement__ = 12;
        pos__ = 1;
        current_statement__ = 12;
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 12;
          for (int sym2__ = 1; sym2__ <= N_experiment_train; ++sym2__) {
            current_statement__ = 12;
            stan::model::assign(log_conc_unbalanced_train_z,
              log_conc_unbalanced_train_z_flat__[(pos__ - 1)],
              "assigning variable log_conc_unbalanced_train_z",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 12;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(log_conc_unbalanced_train_z);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"dgf", "log_kcat_z", "log_km_z",
                "log_kcat_pme_z", "log_ki_z", "log_dissociation_constant_z",
                "log_transfer_constant_z", "psi_train_z", "drain_train_z",
                "log_conc_enzyme_train_z", "log_conc_pme_train_z",
                "log_conc_unbalanced_train_z"};
    if (emit_transformed_parameters__) {
      std::vector<std::string>
        temp{"km", "ki", "kcat", "dissociation_constant",
             "transfer_constant", "kcat_pme", "psi_train", "drain_train",
             "conc_enzyme_train", "conc_unbalanced_train", "conc_pme_train",
             "conc_train", "flux_train", "dgr_train"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"yrep_conc_train", "yrep_flux_train", "llik_conc_train",
             "llik_flux_train", "free_enzyme_ratio_train",
             "saturation_train", "allostery_train", "phosphorylation_train",
             "reversibility_train", "keq_train"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_metabolite)},
                std::vector<size_t>{static_cast<size_t>(N_enzyme)},
                std::vector<size_t>{static_cast<size_t>(N_km)},
                std::vector<size_t>{static_cast<size_t>(N_pme)},
                std::vector<size_t>{static_cast<size_t>(
                                      N_competitive_inhibition)},
                std::vector<size_t>{static_cast<size_t>(N_allostery)},
                std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_train)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_train),
                  static_cast<size_t>(N_drain)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_train),
                  static_cast<size_t>(N_enzyme)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_train),
                  static_cast<size_t>(N_pme)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_train),
                  static_cast<size_t>(N_unbalanced)}};
    if (emit_transformed_parameters__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_km)},
             std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)},
             std::vector<size_t>{static_cast<size_t>(N_enzyme)},
             std::vector<size_t>{static_cast<size_t>(N_allostery)},
             std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)},
             std::vector<size_t>{static_cast<size_t>(N_pme)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_drain)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_enzyme)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_unbalanced)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_pme)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_mic)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_reaction)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)},
             std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)},
             std::vector<size_t>{static_cast<size_t>(N_conc_measurement_train)},
             std::vector<size_t>{static_cast<size_t>(N_flux_measurement_train)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_train),
               static_cast<size_t>(N_edge)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym790__ = 1; sym790__ <= N_metabolite; ++sym790__) {
      param_names__.emplace_back(std::string() + "dgf" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_kcat_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_km; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_km_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_kcat_pme_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_competitive_inhibition; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_ki_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_allostery; ++sym790__) {
      param_names__.emplace_back(std::string() +
        "log_dissociation_constant_z" + '.' + std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_allosteric_enzyme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_transfer_constant_z" +
        '.' + std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_experiment_train; ++sym790__) {
      param_names__.emplace_back(std::string() + "psi_train_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_drain; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "drain_train_z" + '.' +
          std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "log_conc_enzyme_train_z"
          + '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "log_conc_pme_train_z" +
          '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_unbalanced; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() +
          "log_conc_unbalanced_train_z" + '.' + std::to_string(sym791__) +
          '.' + std::to_string(sym790__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym790__ = 1; sym790__ <= N_km; ++sym790__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_competitive_inhibition; ++sym790__) {
        param_names__.emplace_back(std::string() + "ki" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
        param_names__.emplace_back(std::string() + "kcat" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_allostery; ++sym790__) {
        param_names__.emplace_back(std::string() + "dissociation_constant" +
          '.' + std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_allosteric_enzyme; ++sym790__) {
        param_names__.emplace_back(std::string() + "transfer_constant" + '.'
          + std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
        param_names__.emplace_back(std::string() + "kcat_pme" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_experiment_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "psi_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_drain; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "drain_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_enzyme_train" +
            '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_unbalanced; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_unbalanced_train"
            + '.' + std::to_string(sym791__) + '.' +
            std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_pme_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_mic; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_reaction; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "flux_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "dgr_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym790__ = 1; sym790__ <= N_conc_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "yrep_conc_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_flux_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "yrep_flux_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_conc_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "llik_conc_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_flux_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "llik_flux_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() +
            "free_enzyme_ratio_train" + '.' + std::to_string(sym791__) + '.'
            + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "saturation_train" + '.'
            + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "allostery_train" + '.'
            + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "phosphorylation_train"
            + '.' + std::to_string(sym791__) + '.' +
            std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "reversibility_train" +
            '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "keq_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym790__ = 1; sym790__ <= N_metabolite; ++sym790__) {
      param_names__.emplace_back(std::string() + "dgf" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_kcat_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_km; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_km_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_kcat_pme_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_competitive_inhibition; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_ki_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_allostery; ++sym790__) {
      param_names__.emplace_back(std::string() +
        "log_dissociation_constant_z" + '.' + std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_allosteric_enzyme; ++sym790__) {
      param_names__.emplace_back(std::string() + "log_transfer_constant_z" +
        '.' + std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_experiment_train; ++sym790__) {
      param_names__.emplace_back(std::string() + "psi_train_z" + '.' +
        std::to_string(sym790__));
    }
    for (int sym790__ = 1; sym790__ <= N_drain; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "drain_train_z" + '.' +
          std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "log_conc_enzyme_train_z"
          + '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() + "log_conc_pme_train_z" +
          '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
      }
    }
    for (int sym790__ = 1; sym790__ <= N_unbalanced; ++sym790__) {
      for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
        param_names__.emplace_back(std::string() +
          "log_conc_unbalanced_train_z" + '.' + std::to_string(sym791__) +
          '.' + std::to_string(sym790__));
      }
    }
    if (emit_transformed_parameters__) {
      for (int sym790__ = 1; sym790__ <= N_km; ++sym790__) {
        param_names__.emplace_back(std::string() + "km" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_competitive_inhibition; ++sym790__) {
        param_names__.emplace_back(std::string() + "ki" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
        param_names__.emplace_back(std::string() + "kcat" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_allostery; ++sym790__) {
        param_names__.emplace_back(std::string() + "dissociation_constant" +
          '.' + std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_allosteric_enzyme; ++sym790__) {
        param_names__.emplace_back(std::string() + "transfer_constant" + '.'
          + std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
        param_names__.emplace_back(std::string() + "kcat_pme" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_experiment_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "psi_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_drain; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "drain_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_enzyme; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_enzyme_train" +
            '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_unbalanced; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_unbalanced_train"
            + '.' + std::to_string(sym791__) + '.' +
            std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_pme; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_pme_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_mic; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "conc_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_reaction; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "flux_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "dgr_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
    }
    if (emit_generated_quantities__) {
      for (int sym790__ = 1; sym790__ <= N_conc_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "yrep_conc_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_flux_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "yrep_flux_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_conc_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "llik_conc_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_flux_measurement_train; ++sym790__) {
        param_names__.emplace_back(std::string() + "llik_flux_train" + '.' +
          std::to_string(sym790__));
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() +
            "free_enzyme_ratio_train" + '.' + std::to_string(sym791__) + '.'
            + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "saturation_train" + '.'
            + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "allostery_train" + '.'
            + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "phosphorylation_train"
            + '.' + std::to_string(sym791__) + '.' +
            std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "reversibility_train" +
            '.' + std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
      for (int sym790__ = 1; sym790__ <= N_edge; ++sym790__) {
        for (int sym791__ = 1; sym791__ <= N_experiment_train; ++sym791__) {
          param_names__.emplace_back(std::string() + "keq_train" + '.' +
            std::to_string(sym791__) + '.' + std::to_string(sym790__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"dgf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_metabolite) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"log_km_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_pme_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"parameters\"},{\"name\":\"log_ki_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"log_dissociation_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"log_transfer_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"psi_train_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment_train) + "},\"block\":\"parameters\"},{\"name\":\"drain_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_enzyme_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_pme_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_unbalanced_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat_pme\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment_train) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drain_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_enzyme_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_unbalanced_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_pme_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"dgr_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yrep_conc_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"yrep_flux_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik_conc_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik_flux_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"keq_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"dgf\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_metabolite) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"log_km_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"log_kcat_pme_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"parameters\"},{\"name\":\"log_ki_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"log_dissociation_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"log_transfer_constant_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"psi_train_z\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment_train) + "},\"block\":\"parameters\"},{\"name\":\"drain_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_enzyme_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_pme_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"parameters\"},{\"name\":\"log_conc_unbalanced_train_z\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"parameters\"},{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"transformed_parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"transformed_parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"kcat_pme\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"transformed_parameters\"},{\"name\":\"psi_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_experiment_train) + "},\"block\":\"transformed_parameters\"},{\"name\":\"drain_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_enzyme_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_unbalanced_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_pme_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"conc_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"flux_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"dgr_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"transformed_parameters\"},{\"name\":\"yrep_conc_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"yrep_flux_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik_conc_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_conc_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"llik_flux_train\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_flux_measurement_train) + "},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"keq_train\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_train) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((N_metabolite + N_enzyme) + N_km) +
      N_pme) + N_competitive_inhibition) + N_allostery) +
      N_allosteric_enzyme) + N_experiment_train) + (N_experiment_train *
      N_drain)) + (N_experiment_train * N_enzyme)) + (N_experiment_train *
      N_pme)) + (N_experiment_train * N_unbalanced));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((N_km + N_competitive_inhibition) + N_enzyme) +
      N_allostery) + N_allosteric_enzyme) + N_pme) + N_experiment_train) +
      (N_experiment_train * N_drain)) + (N_experiment_train * N_enzyme)) +
      (N_experiment_train * N_unbalanced)) + (N_experiment_train * N_pme)) +
      (N_experiment_train * N_mic)) + (N_experiment_train * N_reaction)) +
      (N_experiment_train * N_edge)));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((N_conc_measurement_train + N_flux_measurement_train) +
      N_conc_measurement_train) + N_flux_measurement_train) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((((((((((N_metabolite + N_enzyme) + N_km) +
      N_pme) + N_competitive_inhibition) + N_allostery) +
      N_allosteric_enzyme) + N_experiment_train) + (N_experiment_train *
      N_drain)) + (N_experiment_train * N_enzyme)) + (N_experiment_train *
      N_pme)) + (N_experiment_train * N_unbalanced));
    const size_t num_transformed = emit_transformed_parameters *
      ((((((((((((((N_km + N_competitive_inhibition) + N_enzyme) +
      N_allostery) + N_allosteric_enzyme) + N_pme) + N_experiment_train) +
      (N_experiment_train * N_drain)) + (N_experiment_train * N_enzyme)) +
      (N_experiment_train * N_unbalanced)) + (N_experiment_train * N_pme)) +
      (N_experiment_train * N_mic)) + (N_experiment_train * N_reaction)) +
      (N_experiment_train * N_edge)));
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((N_conc_measurement_train + N_flux_measurement_train) +
      N_conc_measurement_train) + N_flux_measurement_train) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)) +
      (N_experiment_train * N_edge)) + (N_experiment_train * N_edge)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_model_namespace::model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_model_namespace::profiles__;
}
#endif
