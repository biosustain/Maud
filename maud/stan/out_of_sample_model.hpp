// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace out_of_sample_model_model_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 405> locations_array__ =
  {" (found before start of program)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 79, column 2 to column 18)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 80, column 2 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 81, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 82, column 2 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 83, column 2 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 84, column 2 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 85, column 2 to column 51)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 88, column 2 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 89, column 2 to column 56)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 90, column 2 to column 55)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 91, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 92, column 2 to column 61)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 93, column 2 to column 54)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 94, column 2 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 95, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 96, column 2 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 97, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 98, column 2 to column 61)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 101, column 4 to column 90)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 102, column 4 to column 109)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 103, column 4 to column 128)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 104, column 4 to column 116)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 100, column 32 to line 105, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 100, column 2 to line 105, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 108, column 4 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 109, column 11 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 109, column 4 to column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 110, column 11 to column 16)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 110, column 4 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 111, column 20 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 111, column 4 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 112, column 4 to column 74)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 79, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 113, column 4 to column 71)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 115, column 12 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 115, column 6 to line 116, column 82)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 90, column 2, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 117, column 6 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 114, column 29 to line 118, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 114, column 4 to line 118, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 120, column 12 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 120, column 6 to line 121, column 76)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 122, column 6 to column 76)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 119, column 29 to line 123, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 119, column 4 to line 123, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 124, column 4 to line 171, column 39)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 172, column 4 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 173, column 4 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 174, column 11 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 174, column 4 to line 211, column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 308, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 309, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 309, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 260, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 261, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 261, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 264, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 263, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 263, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 262, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 262, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 267, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 310, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 310, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 162, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 163, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 164, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 164, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 165, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 165, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 170, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 168, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 167, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 166, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 166, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 172, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 311, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 311, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 133, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 134, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 134, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 137, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 138, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 136, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 136, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 140, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 141, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 142, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 143, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 143, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 144, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 144, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 145, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 145, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 146, column 13, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 146, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 147, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 149, column 14, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 149, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 150, column 15, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 150, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 151, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 148, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 148, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 154, column 14, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 154, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 155, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 153, column 19, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 153, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 135, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 135, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 158, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 327, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 327, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 101, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 102, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 102, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 105, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 106, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 104, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 104, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 108, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 109, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 109, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 110, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 110, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 111, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 103, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 103, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 113, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 335, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 335, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 186, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 187, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 187, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 189, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 191, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 190, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 190, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 193, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 194, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 195, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 196, column 24, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 196, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 197, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 202, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 201, column 13, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 199, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 198, column 43, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 198, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 205, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 188, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 188, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 207, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 345, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 345, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 217, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 218, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 218, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 220, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 222, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 221, column 22, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 221, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 224, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 225, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 226, column 19, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 226, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 227, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 232, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 231, column 12, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 229, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 228, column 33, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 228, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 235, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 219, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 219, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 237, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 352, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 352, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 247, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 248, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 248, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 251, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 252, column 17, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 252, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 253, column 8, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 250, column 28, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 250, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 249, column 23, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 249, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 256, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 359, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 213, column 6 to column 56)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 212, column 23 to line 214, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 212, column 4 to line 214, column 5)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 107, column 32 to line 215, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 107, column 2 to line 215, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 216, column 32 to line 259, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 216, column 2 to line 259, column 3)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 4, column 2 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 5, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 6, column 2 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 7, column 2 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 8, column 2 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 9, column 2 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 10, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 11, column 2 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 12, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 13, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 14, column 2 to column 23)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 15, column 2 to column 22)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 16, column 2 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 17, column 2 to column 35)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 18, column 2 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 19, column 2 to column 21)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 20, column 2 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 21, column 9 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 21, column 16 to column 22)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 21, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 22, column 8 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 22, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 23, column 8 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 23, column 2 to column 65)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 24, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 24, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 25, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 25, column 2 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 26, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 26, column 2 to column 59)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 27, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 27, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 28, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 28, column 2 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 29, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 29, column 2 to column 63)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 30, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 30, column 2 to column 57)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 31, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 31, column 2 to column 60)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 32, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 32, column 2 to column 69)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 33, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 33, column 2 to column 72)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 34, column 8 to column 18)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 34, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 35, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 35, column 2 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 36, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 36, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 37, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 37, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 38, column 8 to column 16)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 38, column 2 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 39, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 39, column 2 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 40, column 8 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 40, column 2 to column 47)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 41, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 41, column 2 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 42, column 8 to column 32)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 42, column 2 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 43, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 43, column 2 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 44, column 8 to column 19)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 44, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 45, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 45, column 2 to column 43)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 46, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 46, column 2 to column 55)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 47, column 8 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 47, column 2 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 48, column 8 to column 13)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 48, column 2 to column 58)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 49, column 9 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 49, column 2 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 50, column 9 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 50, column 2 to column 36)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 51, column 18 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 51, column 2 to column 37)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 53, column 2 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 54, column 2 to column 38)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 55, column 2 to column 35)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 56, column 8 to column 30)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 56, column 2 to column 86)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 57, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 57, column 2 to column 62)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 58, column 8 to column 27)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 58, column 2 to column 77)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 59, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 59, column 2 to column 59)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 60, column 9 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 60, column 2 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 62, column 11 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 62, column 37 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 62, column 2 to column 66)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 63, column 11 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 63, column 37 to column 49)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 63, column 2 to column 79)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 64, column 11 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 64, column 37 to column 45)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 64, column 2 to column 71)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 65, column 11 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 65, column 37 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 65, column 2 to column 64)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 67, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 67, column 43 to column 61)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 67, column 2 to column 73)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 68, column 2 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 69, column 2 to column 15)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 70, column 2 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 71, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 72, column 2 to column 34)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 73, column 2 to column 26)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 76, column 2 to column 24)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 79, column 9 to column 13)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 80, column 9 to column 33)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 81, column 9 to column 17)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 82, column 9 to column 20)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 83, column 9 to column 28)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 84, column 9 to column 14)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 85, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 85, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 88, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 88, column 43 to column 48)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 89, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 89, column 34 to column 44)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 90, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 90, column 34 to column 39)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 91, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 91, column 34 to column 46)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 92, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 92, column 34 to column 42)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 93, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 93, column 34 to column 41)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 94, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 94, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 95, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 95, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 96, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 96, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 97, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 97, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 98, column 8 to column 25)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 98, column 34 to column 40)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 8, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 2, column 40, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 17, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 11, column 44, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 26, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 28, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 27, column 25, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 27, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 30, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 20, column 45, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 10, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 27, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 39, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 41, column 6, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 40, column 25, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 40, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 43, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 33, column 49, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 51, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 52, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 53, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 54, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 54, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 55, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 46, column 133, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 63, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 64, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 64, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 65, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 58, column 133, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 70, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 70, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 71, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 72, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 73, column 31, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 73, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 74, column 31, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 74, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 75, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 68, column 82, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 78, column 42, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 82, column 59, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 100, column 46, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 131, column 51, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 161, column 96, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 185, column 3, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 216, column 45, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 246, column 59, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 259, column 92, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 307, column 55, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 404, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 404, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 405, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 406, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 407, column 11, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 407, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 445, column 4, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)",
  " (in '/Users/tedgro/repos/biosustain/Maud/maud/stan/functions.stan', line 403, column 54, included from\n'/Users/tedgro/repos/biosustain/Maud/maud/stan/out_of_sample_model.stan', line 1, column 0)"};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
       z_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_log_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
           z_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
       const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
       pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>* = nullptr>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
           pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_dgr(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_keq(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>* = nullptr>
int
check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__, const T2__&
                   abs_thresh, const T3__& rel_thresh, std::ostream*
                   pstream__);
int
measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__);
std::vector<int>
extract_ragged(const std::vector<int>& ix_long,
               const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
get_saturation(const T0__& conc_arg__, const T1__& km_arg__, const T2__&
               free_enzyme_ratio_arg__, const std::vector<int>&
               sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
               sub_km_ix_by_edge_bounds, const std::vector<int>&
               sub_by_edge_long, const std::vector<std::vector<int>>&
               sub_by_edge_bounds, const std::vector<int>& edge_type,
               std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                      const T2__& km_arg__, const T3__& ki_arg__,
                      const std::vector<int>& edge_type,
                      const std::vector<int>& ci_mic_ix,
                      const std::vector<int>& sub_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      sub_km_ix_by_edge_bounds, const std::vector<int>&
                      prod_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      prod_km_ix_by_edge_bounds, const std::vector<int>&
                      sub_by_edge_long, const std::vector<std::vector<int>>&
                      sub_by_edge_bounds, const std::vector<int>&
                      prod_by_edge_long, const std::vector<std::vector<int>>&
                      prod_by_edge_bounds, const std::vector<int>&
                      ci_ix_long, const std::vector<std::vector<int>>&
                      ci_ix_bounds, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>>,-1,1>
get_reversibility(const T0__& dgr_arg__, const T1__& temperature, const T2__&
                  S_arg__, const T3__& conc_arg__, const std::vector<int>&
                  edge_type, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
              const T2__& tc_arg__, const T3__& dc_arg__, const T4__&
              subunits_arg__, const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              std::ostream* pstream__);
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T6__>>,-1,1>
get_phosphorylation(const T0__& kcat_pme_arg__, const T1__& conc_pme_arg__,
                    const std::vector<int>& phos_ix_long,
                    const std::vector<std::vector<int>>& phos_ix_bounds,
                    const std::vector<int>& phos_type,
                    const std::vector<int>& phos_pme, const T6__&
                    subunits_arg__, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T6__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T6__>,-1,1>
get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                  const std::vector<int>& edge_to_drain,
                  const std::vector<int>& sub_by_edge_long,
                  const std::vector<std::vector<int>>& sub_by_edge_bounds,
                  const std::vector<int>& edge_type, const T6__&
                  drain_small_conc_corrector, std::ostream* pstream__);
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                 const std::vector<int>& edge_to_enzyme,
                 const std::vector<int>& edge_type, std::ostream* pstream__);
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::promote_args_t<stan::base_type_t<T10__>, T11__,
                    T12__, stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,1>
get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__, const T2__&
              dgr_arg__, const T3__& kcat_arg__, const T4__& km_arg__,
              const T5__& ki_arg__, const T6__& tc_arg__, const T7__&
              dc_arg__, const T8__& kcat_pme_arg__, const T9__&
              conc_pme_arg__, const T10__& drain_arg__, const T11__&
              temperature, const T12__& drain_small_conc_corrector,
              const T13__& S_arg__, const T14__& subunits_arg__,
              const std::vector<int>& edge_type, const std::vector<int>&
              edge_to_enzyme, const std::vector<int>& edge_to_drain,
              const std::vector<int>& ci_mic_ix, const std::vector<int>&
              sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              sub_km_ix_by_edge_bounds, const std::vector<int>&
              prod_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              prod_km_ix_by_edge_bounds, const std::vector<int>&
              sub_by_edge_long, const std::vector<std::vector<int>>&
              sub_by_edge_bounds, const std::vector<int>& prod_by_edge_long,
              const std::vector<std::vector<int>>& prod_by_edge_bounds,
              const std::vector<int>& ci_ix_long,
              const std::vector<std::vector<int>>& ci_ix_bounds,
              const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              const std::vector<int>& phos_ix_long,
              const std::vector<std::vector<int>>& phos_ix_bounds,
              const std::vector<int>& phosphorylation_type,
              const std::vector<int>& phosphorylation_pme, std::ostream*
              pstream__);
template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_eigen_matrix_dynamic<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>>* = nullptr>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                  stan::promote_args_t<stan::base_type_t<T12__>,
                    stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                    T15__, T16__,
                    stan::promote_args_t<stan::base_type_t<T17__>,
                      stan::base_type_t<T18__>>>>>,-1,1>
dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
             const T2__& unbalanced_arg__, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme_arg__, const T6__& dgr_arg__, const T7__& kcat_arg__,
             const T8__& km_arg__, const T9__& ki_arg__, const T10__&
             tc_arg__, const T11__& dc_arg__, const T12__& kcat_pme_arg__,
             const T13__& conc_pme_arg__, const T14__& drain_arg__,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S_arg__, const T18__&
             subunits_arg__, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme, std::ostream*
             pstream__);
struct dbalanced_dt_variadic2_functor__ {
  template <typename T0__, typename T1__, typename T2__, typename T5__,
            typename T6__, typename T7__, typename T8__, typename T9__,
            typename T10__, typename T11__, typename T12__, typename T13__,
            typename T14__, typename T15__, typename T16__, typename T17__,
            typename T18__,
            stan::require_all_t<stan::is_stan_scalar<T0__>,
                                stan::is_col_vector<T1__>,
                                stan::is_vt_not_complex<T1__>,
                                stan::is_col_vector<T2__>,
                                stan::is_vt_not_complex<T2__>,
                                stan::is_col_vector<T5__>,
                                stan::is_vt_not_complex<T5__>,
                                stan::is_col_vector<T6__>,
                                stan::is_vt_not_complex<T6__>,
                                stan::is_col_vector<T7__>,
                                stan::is_vt_not_complex<T7__>,
                                stan::is_col_vector<T8__>,
                                stan::is_vt_not_complex<T8__>,
                                stan::is_col_vector<T9__>,
                                stan::is_vt_not_complex<T9__>,
                                stan::is_col_vector<T10__>,
                                stan::is_vt_not_complex<T10__>,
                                stan::is_col_vector<T11__>,
                                stan::is_vt_not_complex<T11__>,
                                stan::is_col_vector<T12__>,
                                stan::is_vt_not_complex<T12__>,
                                stan::is_col_vector<T13__>,
                                stan::is_vt_not_complex<T13__>,
                                stan::is_col_vector<T14__>,
                                stan::is_vt_not_complex<T14__>,
                                stan::is_stan_scalar<T15__>,
                                stan::is_stan_scalar<T16__>,
                                stan::is_eigen_matrix_dynamic<T17__>,
                                stan::is_vt_not_complex<T17__>,
                                stan::is_col_vector<T18__>,
                                stan::is_vt_not_complex<T18__>>* = nullptr>
  Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                  stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>,
                  stan::promote_args_t<stan::base_type_t<T7__>,
                    stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                    stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                    stan::promote_args_t<stan::base_type_t<T12__>,
                      stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                      T15__, T16__,
                      stan::promote_args_t<stan::base_type_t<T17__>,
                        stan::base_type_t<T18__>>>>>,-1,1>
  operator()(const T0__& time, const T1__& current_balanced, std::ostream*
             pstream__, const T2__& unbalanced, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme, const T6__& dgr, const T7__& kcat, const T8__& km,
             const T9__& ki, const T10__& tc, const T11__& dc, const T12__&
             kcat_pme, const T13__& conc_pme, const T14__& drain,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S, const T18__&
             subunits, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme) const {
    return dbalanced_dt(time, current_balanced, unbalanced, balanced_ix,
             unbalanced_ix, enzyme, dgr, kcat, km, ki, tc, dc, kcat_pme,
             conc_pme, drain, temperature, drain_small_conc_corrector, S,
             subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
             sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
             prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
             sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
             prod_by_edge_bounds, ci_ix_long, ci_ix_bounds,
             allostery_ix_long, allostery_ix_bounds, allostery_type,
             allostery_mic, edge_to_tc, phosphorylation_ix_long,
             phosphorylation_ix_bounds, phosphorylation_type,
             phosphorylation_pme, pstream__);
  }
};
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
       z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 345;
    return stan::math::fma(
             stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(2)), z,
             stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(1)));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>>,-1,1>
unz_log_1d(const std::vector<Eigen::Matrix<T0__,-1,1>>& mnsd, const T1__&
           z_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& z = stan::math::to_ref(z_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 347;
    return stan::math::exp(
             stan::math::fma(
               stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(2)),
               z,
               stan::model::rvalue(mnsd, "mnsd", stan::model::index_uni(1))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
       const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
       pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 349;
    stan::math::validate_non_negative_index("out", "size(z)",
      stan::math::size(z));
    current_statement__ = 350;
    stan::math::validate_non_negative_index("out", "rows(z[1])",
      stan::math::rows(stan::model::rvalue(z, "z", stan::model::index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> out =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(z),
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                         stan::model::rvalue(
                                                           z, "z",
                                                           stan::model::index_uni(
                                                             1))),
          DUMMY_VAR__));
    current_statement__ = 354;
    for (int ex = 1; ex <= stan::math::size(z); ++ex) {
      current_statement__ = 352;
      stan::model::assign(out,
        unz_1d(
          stan::model::rvalue(mnsd, "mnsd", stan::model::index_omni(),
            stan::model::index_uni(ex)),
          stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
        "assigning variable out", stan::model::index_uni(ex));
    }
    current_statement__ = 355;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_stan_scalar<T1__>>*>
std::vector<Eigen::Matrix<stan::promote_args_t<T0__, T1__>,-1,1>>
unz_log_2d(const std::vector<std::vector<Eigen::Matrix<T0__,-1,1>>>& mnsd,
           const std::vector<Eigen::Matrix<T1__,-1,1>>& z, std::ostream*
           pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__, T1__>;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 357;
    stan::math::validate_non_negative_index("out", "size(z)",
      stan::math::size(z));
    current_statement__ = 358;
    stan::math::validate_non_negative_index("out", "rows(z[1])",
      stan::math::rows(stan::model::rvalue(z, "z", stan::model::index_uni(1))));
    std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> out =
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(stan::math::size(z),
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(stan::math::rows(
                                                         stan::model::rvalue(
                                                           z, "z",
                                                           stan::model::index_uni(
                                                             1))),
          DUMMY_VAR__));
    current_statement__ = 362;
    for (int ex = 1; ex <= stan::math::size(z); ++ex) {
      current_statement__ = 360;
      stan::model::assign(out,
        unz_log_1d(
          stan::model::rvalue(mnsd, "mnsd", stan::model::index_omni(),
            stan::model::index_uni(ex)),
          stan::model::rvalue(z, "z", stan::model::index_uni(ex)), pstream__),
        "assigning variable out", stan::model::index_uni(ex));
    }
    current_statement__ = 363;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_dgr(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T6__>>;
  int current_statement__ = 0;
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& dgf = stan::math::to_ref(dgf_arg__);
  const auto& water_stoichiometry =
    stan::math::to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = stan::math::to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ minus_RT = DUMMY_VAR__;
    local_scalar_t__ dgf_water = DUMMY_VAR__;
    local_scalar_t__ F = DUMMY_VAR__;
    current_statement__ = 368;
    stan::math::validate_non_negative_index("dgrs", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> dgrs;
    current_statement__ = 369;
    stan::model::assign(dgrs,
      stan::math::fma(stan::math::multiply(trans_charge, psi), 96.5,
        stan::math::fma(water_stoichiometry, -150.9,
          stan::math::multiply(stan::math::transpose(S),
            stan::model::rvalue(dgf, "dgf",
              stan::model::index_multi(mic_to_met))))),
      "assigning variable dgrs");
    current_statement__ = 370;
    return dgrs;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T4__,
          typename T5__, typename T6__,
          stan::require_all_t<stan::is_eigen_matrix_dynamic<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T2__, stan::base_type_t<T4__>,
                stan::base_type_t<T5__>, stan::promote_args_t<T6__>>,-1,1>
get_keq(const T0__& S_arg__, const T1__& dgf_arg__, const T2__& temperature,
        const std::vector<int>& mic_to_met, const T4__&
        water_stoichiometry_arg__, const T5__& trans_charge_arg__,
        const T6__& psi, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__,
                             stan::base_type_t<T4__>,
                             stan::base_type_t<T5__>,
                             stan::promote_args_t<T6__>>;
  int current_statement__ = 0;
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& dgf = stan::math::to_ref(dgf_arg__);
  const auto& water_stoichiometry =
    stan::math::to_ref(water_stoichiometry_arg__);
  const auto& trans_charge = stan::math::to_ref(trans_charge_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ minus_RT;
    current_statement__ = 372;
    minus_RT = (-0.008314 * temperature);
    current_statement__ = 373;
    stan::math::validate_non_negative_index("dgrs", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> dgrs;
    current_statement__ = 374;
    stan::model::assign(dgrs,
      get_dgr(S, dgf, temperature, mic_to_met, water_stoichiometry,
        trans_charge, psi, pstream__), "assigning variable dgrs");
    current_statement__ = 375;
    return stan::math::exp(stan::math::divide(dgrs, minus_RT));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T2__>,
                              stan::is_stan_scalar<T3__>>*>
int
check_steady_state(const T0__& Sv_arg__, const T1__& conc_arg__, const T2__&
                   abs_thresh, const T3__& rel_thresh, std::ostream*
                   pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T2__, T3__>;
  int current_statement__ = 0;
  const auto& Sv = stan::math::to_ref(Sv_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 377;
    stan::math::validate_non_negative_index("rel_thresh_per_conc",
      "rows(conc)", stan::math::rows(conc));
    Eigen::Matrix<local_scalar_t__,-1,1> rel_thresh_per_conc;
    current_statement__ = 378;
    stan::model::assign(rel_thresh_per_conc,
      stan::math::multiply(conc, rel_thresh),
      "assigning variable rel_thresh_per_conc");
    int relative_check_failed;
    current_statement__ = 379;
    relative_check_failed = stan::math::logical_gt(
                              stan::math::max(
                                stan::math::subtract(stan::math::fabs(Sv),
                                  rel_thresh_per_conc)), 0);
    int absolute_check_failed;
    current_statement__ = 380;
    absolute_check_failed = stan::math::logical_gt(
                              stan::math::max(stan::math::fabs(Sv)),
                              abs_thresh);
    current_statement__ = 382;
    if (relative_check_failed) {
      current_statement__ = 381;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Sv ");
        stan::math::stan_print(pstream__, Sv);
        stan::math::stan_print(pstream__, " not within ");
        stan::math::stan_print(pstream__, rel_thresh_per_conc);
        stan::math::stan_print(pstream__, " of zero.");
        *(pstream__) << std::endl;
      }
    }
    current_statement__ = 384;
    if (absolute_check_failed) {
      current_statement__ = 383;
      if (pstream__) {
        stan::math::stan_print(pstream__, "Sv ");
        stan::math::stan_print(pstream__, Sv);
        stan::math::stan_print(pstream__, " not within ");
        stan::math::stan_print(pstream__, abs_thresh);
        stan::math::stan_print(pstream__, " of zero.");
        *(pstream__) << std::endl;
      }
    }
    current_statement__ = 385;
    return ((stan::math::primitive_value(relative_check_failed) ||
           stan::math::primitive_value(absolute_check_failed)) ? 0 : 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
int
measure_ragged(const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 33;
    return ((stan::model::rvalue(bounds, "bounds", stan::model::index_uni(i),
               stan::model::index_uni(2))
           -
           stan::model::rvalue(bounds, "bounds", stan::model::index_uni(i),
             stan::model::index_uni(1)))
           + 1);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
std::vector<int>
extract_ragged(const std::vector<int>& ix_long,
               const std::vector<std::vector<int>>& bounds, const int& i,
               std::ostream* pstream__) {
  using local_scalar_t__ = double;
  int current_statement__ = 0;
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 37;
    return stan::model::rvalue(ix_long, "ix_long",
             stan::model::index_min_max(
               stan::model::rvalue(bounds, "bounds",
                 stan::model::index_uni(i), stan::model::index_uni(1)),
               stan::model::rvalue(bounds, "bounds",
                 stan::model::index_uni(i), stan::model::index_uni(2))));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>>,-1,1>
get_saturation(const T0__& conc_arg__, const T1__& km_arg__, const T2__&
               free_enzyme_ratio_arg__, const std::vector<int>&
               sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
               sub_km_ix_by_edge_bounds, const std::vector<int>&
               sub_by_edge_long, const std::vector<std::vector<int>>&
               sub_by_edge_bounds, const std::vector<int>& edge_type,
               std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 115;
    N_edge = stan::math::size(sub_by_edge_bounds);
    current_statement__ = 116;
    stan::math::validate_non_negative_index("prod_conc_over_km", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> prod_conc_over_km =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 129;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 121;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 118;
        stan::model::assign(prod_conc_over_km, 1,
          "assigning variable prod_conc_over_km", stan::model::index_uni(f));
        continue;
      }
      int N_sub;
      current_statement__ = 122;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      current_statement__ = 123;
      stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 124;
      stan::model::assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 125;
      stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
      std::vector<int> sub_km_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 126;
      stan::model::assign(sub_km_ix,
        extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds, f,
          pstream__), "assigning variable sub_km_ix");
      current_statement__ = 127;
      stan::model::assign(prod_conc_over_km,
        stan::math::prod(
          stan::math::elt_divide(
            stan::model::rvalue(conc, "conc",
              stan::model::index_multi(sub_ix)),
            stan::model::rvalue(km, "km", stan::model::index_multi(sub_km_ix)))),
        "assigning variable prod_conc_over_km", stan::model::index_uni(f));
    }
    current_statement__ = 130;
    return stan::math::elt_multiply(prod_conc_over_km, free_enzyme_ratio);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_eigen_matrix_dynamic<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>>,-1,1>
get_free_enzyme_ratio(const T0__& conc_arg__, const T1__& S_arg__,
                      const T2__& km_arg__, const T3__& ki_arg__,
                      const std::vector<int>& edge_type,
                      const std::vector<int>& ci_mic_ix,
                      const std::vector<int>& sub_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      sub_km_ix_by_edge_bounds, const std::vector<int>&
                      prod_km_ix_by_edge_long,
                      const std::vector<std::vector<int>>&
                      prod_km_ix_by_edge_bounds, const std::vector<int>&
                      sub_by_edge_long, const std::vector<std::vector<int>>&
                      sub_by_edge_bounds, const std::vector<int>&
                      prod_by_edge_long, const std::vector<std::vector<int>>&
                      prod_by_edge_bounds, const std::vector<int>&
                      ci_ix_long, const std::vector<std::vector<int>>&
                      ci_ix_bounds, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 79;
    N_edge = stan::math::cols(S);
    current_statement__ = 80;
    stan::math::validate_non_negative_index("denom", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> denom =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 111;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 85;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 82;
        stan::model::assign(denom, 1, "assigning variable denom",
          stan::model::index_uni(f));
        continue;
      }
      int N_sub;
      current_statement__ = 86;
      N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
      int N_prod;
      current_statement__ = 87;
      N_prod = measure_ragged(prod_by_edge_bounds, f, pstream__);
      int N_ci;
      current_statement__ = 88;
      N_ci = measure_ragged(ci_ix_bounds, f, pstream__);
      current_statement__ = 89;
      stan::math::validate_non_negative_index("sub_ix", "N_sub", N_sub);
      std::vector<int> sub_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 90;
      stan::model::assign(sub_ix,
        extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
        "assigning variable sub_ix");
      current_statement__ = 91;
      stan::math::validate_non_negative_index("sub_km_ix", "N_sub", N_sub);
      std::vector<int> sub_km_ix =
        std::vector<int>(N_sub, std::numeric_limits<int>::min());
      current_statement__ = 92;
      stan::model::assign(sub_km_ix,
        extract_ragged(sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds, f,
          pstream__), "assigning variable sub_km_ix");
      current_statement__ = 93;
      stan::math::validate_non_negative_index("prod_ix", "N_prod", N_prod);
      std::vector<int> prod_ix =
        std::vector<int>(N_prod, std::numeric_limits<int>::min());
      current_statement__ = 94;
      stan::model::assign(prod_ix,
        extract_ragged(prod_by_edge_long, prod_by_edge_bounds, f, pstream__),
        "assigning variable prod_ix");
      current_statement__ = 95;
      stan::math::validate_non_negative_index("sub_over_km", "N_sub", N_sub);
      Eigen::Matrix<local_scalar_t__,-1,1> sub_over_km;
      current_statement__ = 96;
      stan::model::assign(sub_over_km,
        stan::math::elt_divide(
          stan::model::rvalue(conc, "conc", stan::model::index_multi(sub_ix)),
          stan::model::rvalue(km, "km", stan::model::index_multi(sub_km_ix))),
        "assigning variable sub_over_km");
      current_statement__ = 97;
      stan::model::assign(denom,
        stan::math::prod(
          stan::math::pow(
            stan::math::add(stan::math::rep_vector(1, N_sub), sub_over_km),
            stan::math::fabs(
              stan::model::rvalue(S, "S", stan::model::index_multi(sub_ix),
                stan::model::index_uni(f))))), "assigning variable denom",
        stan::model::index_uni(f));
      current_statement__ = 104;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 1)) {
        current_statement__ = 98;
        stan::math::validate_non_negative_index("prod_km_ix", "N_prod",
          N_prod);
        std::vector<int> prod_km_ix =
          std::vector<int>(N_prod, std::numeric_limits<int>::min());
        current_statement__ = 99;
        stan::model::assign(prod_km_ix,
          extract_ragged(prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            f, pstream__), "assigning variable prod_km_ix");
        current_statement__ = 100;
        stan::math::validate_non_negative_index("prod_over_km", "N_prod",
          N_prod);
        Eigen::Matrix<local_scalar_t__,-1,1> prod_over_km;
        current_statement__ = 101;
        stan::model::assign(prod_over_km,
          stan::math::elt_divide(
            stan::model::rvalue(conc, "conc",
              stan::model::index_multi(prod_ix)),
            stan::model::rvalue(km, "km",
              stan::model::index_multi(prod_km_ix))),
          "assigning variable prod_over_km");
        current_statement__ = 102;
        stan::model::assign(denom,
          (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
          (stan::math::prod(
             stan::math::pow(
               stan::math::add(stan::math::rep_vector(1, N_prod),
                 prod_over_km),
               stan::math::fabs(
                 stan::model::rvalue(S, "S",
                   stan::model::index_multi(prod_ix),
                   stan::model::index_uni(f))))) - 1)),
          "assigning variable denom", stan::model::index_uni(f));
      }
      current_statement__ = 109;
      if (stan::math::logical_gt(N_ci, 0)) {
        current_statement__ = 105;
        stan::math::validate_non_negative_index("ci_ix", "N_ci", N_ci);
        std::vector<int> ci_ix =
          std::vector<int>(N_ci, std::numeric_limits<int>::min());
        current_statement__ = 106;
        stan::model::assign(ci_ix,
          extract_ragged(ci_ix_long, ci_ix_bounds, f, pstream__),
          "assigning variable ci_ix");
        current_statement__ = 107;
        stan::model::assign(denom,
          (stan::model::rvalue(denom, "denom", stan::model::index_uni(f)) +
          stan::math::sum(
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(
                  stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                    stan::model::index_multi(ci_ix)))),
              stan::model::rvalue(ki, "ki", stan::model::index_multi(ci_ix))))),
          "assigning variable denom", stan::model::index_uni(f));
      }
    }
    current_statement__ = 112;
    return stan::math::inv(denom);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_stan_scalar<T1__>,
                              stan::is_eigen_matrix_dynamic<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>, T1__,
                stan::base_type_t<T2__>, stan::base_type_t<T3__>>,-1,1>
get_reversibility(const T0__& dgr_arg__, const T1__& temperature, const T2__&
                  S_arg__, const T3__& conc_arg__, const std::vector<int>&
                  edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             T1__, stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>>;
  int current_statement__ = 0;
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    local_scalar_t__ RT;
    current_statement__ = 65;
    RT = (0.008314 * temperature);
    int N_edge;
    current_statement__ = 66;
    N_edge = stan::math::cols(S);
    current_statement__ = 67;
    stan::math::validate_non_negative_index("reaction_quotient", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> reaction_quotient;
    current_statement__ = 68;
    stan::model::assign(reaction_quotient,
      stan::math::multiply(stan::math::transpose(S), stan::math::log(conc)),
      "assigning variable reaction_quotient");
    current_statement__ = 69;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__);
    current_statement__ = 75;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 73;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 1)) {
        current_statement__ = 72;
        stan::model::assign(out, (1 -
          stan::math::exp(
            (stan::math::fma(RT,
               stan::model::rvalue(reaction_quotient, "reaction_quotient",
                 stan::model::index_uni(f)),
               stan::model::rvalue(dgr, "dgr", stan::model::index_uni(f))) /
            RT))), "assigning variable out", stan::model::index_uni(f));
      } else {
        current_statement__ = 71;
        stan::model::assign(out, 1, "assigning variable out",
          stan::model::index_uni(f));
      }
    }
    current_statement__ = 76;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>>,-1,1>
get_allostery(const T0__& conc_arg__, const T1__& free_enzyme_ratio_arg__,
              const T2__& tc_arg__, const T3__& dc_arg__, const T4__&
              subunits_arg__, const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& free_enzyme_ratio = stan::math::to_ref(free_enzyme_ratio_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 133;
    N_edge = stan::math::size(allostery_ix_bounds);
    current_statement__ = 134;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 135;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 153;
    for (int f = 1; f <= N_edge; ++f) {
      int N_allostery;
      current_statement__ = 136;
      N_allostery = measure_ragged(allostery_ix_bounds, f, pstream__);
      current_statement__ = 139;
      if (stan::math::logical_eq(N_allostery, 0)) {
        continue;
      }
      local_scalar_t__ Q_num;
      current_statement__ = 140;
      Q_num = 1;
      local_scalar_t__ Q_denom;
      current_statement__ = 141;
      Q_denom = 1;
      local_scalar_t__ tc_edge;
      current_statement__ = 142;
      tc_edge = stan::model::rvalue(tc, "tc",
                  stan::model::index_uni(
                    stan::model::rvalue(edge_to_tc, "edge_to_tc",
                      stan::model::index_uni(f))));
      {
        std::vector<int> sym1__;
        current_statement__ = 143;
        stan::model::assign(sym1__,
          extract_ragged(allostery_ix_long, allostery_ix_bounds, f, pstream__),
          "assigning variable sym1__");
        current_statement__ = 144;
        for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
          int allostery;
          current_statement__ = 144;
          allostery = sym1__[(sym3__ - 1)];
          local_scalar_t__ conc_over_dc;
          current_statement__ = 145;
          conc_over_dc = (stan::model::rvalue(conc, "conc",
                            stan::model::index_uni(
                              stan::model::rvalue(allostery_mic,
                                "allostery_mic",
                                stan::model::index_uni(allostery))))
            /
            stan::model::rvalue(dc, "dc", stan::model::index_uni(allostery)));
          current_statement__ = 150;
          if (stan::math::logical_eq(
                stan::model::rvalue(allostery_type, "allostery_type",
                  stan::model::index_uni(allostery)), 1)) {
            current_statement__ = 148;
            Q_denom = (Q_denom + conc_over_dc);
          } else {
            current_statement__ = 146;
            Q_num = (Q_num + conc_over_dc);
          }
        }
      }
      current_statement__ = 151;
      stan::model::assign(out,
        stan::math::inv(
          stan::math::fma(tc_edge,
            stan::math::pow(
              ((stan::model::rvalue(free_enzyme_ratio, "free_enzyme_ratio",
                  stan::model::index_uni(f)) * Q_num) / Q_denom),
              stan::model::rvalue(subunits, "subunits",
                stan::model::index_uni(f))), 1)), "assigning variable out",
        stan::model::index_uni(f));
    }
    current_statement__ = 154;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T6__>>,-1,1>
get_phosphorylation(const T0__& kcat_pme_arg__, const T1__& conc_pme_arg__,
                    const std::vector<int>& phos_ix_long,
                    const std::vector<std::vector<int>>& phos_ix_bounds,
                    const std::vector<int>& phos_type,
                    const std::vector<int>& phos_pme, const T6__&
                    subunits_arg__, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T6__>>;
  int current_statement__ = 0;
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 157;
    N_edge = stan::math::size(phos_ix_bounds);
    current_statement__ = 158;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 159;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 176;
    for (int f = 1; f <= N_edge; ++f) {
      int N_phos;
      current_statement__ = 160;
      N_phos = measure_ragged(phos_ix_bounds, f, pstream__);
      current_statement__ = 163;
      if (stan::math::logical_eq(N_phos, 0)) {
        continue;
      }
      local_scalar_t__ alpha;
      current_statement__ = 164;
      alpha = 0;
      local_scalar_t__ beta;
      current_statement__ = 165;
      beta = 0;
      {
        std::vector<int> sym1__;
        current_statement__ = 166;
        stan::model::assign(sym1__,
          extract_ragged(phos_ix_long, phos_ix_bounds, f, pstream__),
          "assigning variable sym1__");
        current_statement__ = 167;
        for (int sym3__ = 1; sym3__ <= stan::math::size(sym1__); ++sym3__) {
          int phos;
          current_statement__ = 167;
          phos = sym1__[(sym3__ - 1)];
          local_scalar_t__ kcat_times_conc;
          current_statement__ = 168;
          kcat_times_conc = (stan::model::rvalue(kcat_pme, "kcat_pme",
                               stan::model::index_uni(
                                 stan::model::rvalue(phos_pme, "phos_pme",
                                   stan::model::index_uni(phos))))
            *
            stan::model::rvalue(conc_pme, "conc_pme",
              stan::model::index_uni(
                stan::model::rvalue(phos_pme, "phos_pme",
                  stan::model::index_uni(phos)))));
          current_statement__ = 173;
          if (stan::math::logical_eq(
                stan::model::rvalue(phos_type, "phos_type",
                  stan::model::index_uni(phos)), 2)) {
            current_statement__ = 171;
            alpha = (alpha + kcat_times_conc);
          } else {
            current_statement__ = 169;
            beta = (beta + kcat_times_conc);
          }
        }
      }
      current_statement__ = 174;
      stan::model::assign(out,
        stan::math::pow((beta / (alpha + beta)),
          stan::model::rvalue(subunits, "subunits", stan::model::index_uni(f))),
        "assigning variable out", stan::model::index_uni(f));
    }
    current_statement__ = 177;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T6__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_stan_scalar<T6__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, T6__>,-1,1>
get_drain_by_edge(const T0__& drain_arg__, const T1__& conc_arg__,
                  const std::vector<int>& edge_to_drain,
                  const std::vector<int>& sub_by_edge_long,
                  const std::vector<std::vector<int>>& sub_by_edge_bounds,
                  const std::vector<int>& edge_type, const T6__&
                  drain_small_conc_corrector, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>, T6__>;
  int current_statement__ = 0;
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& conc = stan::math::to_ref(conc_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 180;
    N_edge = stan::math::size(edge_type);
    current_statement__ = 181;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 182;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 190;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 188;
      if (stan::math::logical_eq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        int N_sub;
        current_statement__ = 183;
        N_sub = measure_ragged(sub_by_edge_bounds, f, pstream__);
        current_statement__ = 184;
        stan::math::validate_non_negative_index("subs", "N_sub", N_sub);
        std::vector<int> subs =
          std::vector<int>(N_sub, std::numeric_limits<int>::min());
        current_statement__ = 185;
        stan::model::assign(subs,
          extract_ragged(sub_by_edge_long, sub_by_edge_bounds, f, pstream__),
          "assigning variable subs");
        current_statement__ = 186;
        stan::model::assign(out,
          (stan::model::rvalue(drain, "drain",
             stan::model::index_uni(
               stan::model::rvalue(edge_to_drain, "edge_to_drain",
                 stan::model::index_uni(f)))) *
          stan::math::prod(
            stan::math::elt_divide(
              stan::model::rvalue(conc, "conc",
                stan::model::index_multi(subs)),
              stan::math::add(
                stan::model::rvalue(conc, "conc",
                  stan::model::index_multi(subs)), drain_small_conc_corrector)))),
          "assigning variable out", stan::model::index_uni(f));
      }
    }
    current_statement__ = 191;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>>,-1,1>
get_vmax_by_edge(const T0__& enzyme_arg__, const T1__& kcat_arg__,
                 const std::vector<int>& edge_to_enzyme,
                 const std::vector<int>& edge_type, std::ostream* pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>>;
  int current_statement__ = 0;
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 54;
    N_edge = stan::math::size(edge_to_enzyme);
    current_statement__ = 55;
    stan::math::validate_non_negative_index("out", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> out;
    current_statement__ = 56;
    stan::model::assign(out, stan::math::rep_vector(1, N_edge),
      "assigning variable out");
    current_statement__ = 61;
    for (int f = 1; f <= N_edge; ++f) {
      current_statement__ = 59;
      if (stan::math::logical_neq(
            stan::model::rvalue(edge_type, "edge_type",
              stan::model::index_uni(f)), 3)) {
        current_statement__ = 57;
        stan::model::assign(out,
          (stan::model::rvalue(enzyme, "enzyme",
             stan::model::index_uni(
               stan::model::rvalue(edge_to_enzyme, "edge_to_enzyme",
                 stan::model::index_uni(f)))) *
          stan::model::rvalue(kcat, "kcat",
            stan::model::index_uni(
              stan::model::rvalue(edge_to_enzyme, "edge_to_enzyme",
                stan::model::index_uni(f))))), "assigning variable out",
          stan::model::index_uni(f));
      }
    }
    current_statement__ = 62;
    return out;
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T3__,
          typename T4__, typename T5__, typename T6__, typename T7__,
          typename T8__, typename T9__, typename T10__, typename T11__,
          typename T12__, typename T13__, typename T14__,
          stan::require_all_t<stan::is_col_vector<T0__>,
                              stan::is_vt_not_complex<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T3__>,
                              stan::is_vt_not_complex<T3__>,
                              stan::is_col_vector<T4__>,
                              stan::is_vt_not_complex<T4__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_stan_scalar<T11__>,
                              stan::is_stan_scalar<T12__>,
                              stan::is_eigen_matrix_dynamic<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>>*>
Eigen::Matrix<stan::promote_args_t<stan::base_type_t<T0__>,
                stan::base_type_t<T1__>, stan::base_type_t<T2__>,
                stan::base_type_t<T3__>, stan::base_type_t<T4__>,
                stan::promote_args_t<stan::base_type_t<T5__>,
                  stan::base_type_t<T6__>, stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::promote_args_t<stan::base_type_t<T10__>, T11__,
                    T12__, stan::base_type_t<T13__>,
                    stan::base_type_t<T14__>>>>,-1,1>
get_edge_flux(const T0__& conc_arg__, const T1__& enzyme_arg__, const T2__&
              dgr_arg__, const T3__& kcat_arg__, const T4__& km_arg__,
              const T5__& ki_arg__, const T6__& tc_arg__, const T7__&
              dc_arg__, const T8__& kcat_pme_arg__, const T9__&
              conc_pme_arg__, const T10__& drain_arg__, const T11__&
              temperature, const T12__& drain_small_conc_corrector,
              const T13__& S_arg__, const T14__& subunits_arg__,
              const std::vector<int>& edge_type, const std::vector<int>&
              edge_to_enzyme, const std::vector<int>& edge_to_drain,
              const std::vector<int>& ci_mic_ix, const std::vector<int>&
              sub_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              sub_km_ix_by_edge_bounds, const std::vector<int>&
              prod_km_ix_by_edge_long, const std::vector<std::vector<int>>&
              prod_km_ix_by_edge_bounds, const std::vector<int>&
              sub_by_edge_long, const std::vector<std::vector<int>>&
              sub_by_edge_bounds, const std::vector<int>& prod_by_edge_long,
              const std::vector<std::vector<int>>& prod_by_edge_bounds,
              const std::vector<int>& ci_ix_long,
              const std::vector<std::vector<int>>& ci_ix_bounds,
              const std::vector<int>& allostery_ix_long,
              const std::vector<std::vector<int>>& allostery_ix_bounds,
              const std::vector<int>& allostery_type, const std::vector<int>&
              allostery_mic, const std::vector<int>& edge_to_tc,
              const std::vector<int>& phos_ix_long,
              const std::vector<std::vector<int>>& phos_ix_bounds,
              const std::vector<int>& phosphorylation_type,
              const std::vector<int>& phosphorylation_pme, std::ostream*
              pstream__) {
  using local_scalar_t__ = stan::promote_args_t<stan::base_type_t<T0__>,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T3__>,
                             stan::base_type_t<T4__>,
                             stan::promote_args_t<stan::base_type_t<T5__>,
                               stan::base_type_t<T6__>,
                               stan::base_type_t<T7__>,
                               stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>,
                               stan::promote_args_t<stan::base_type_t<T10__>,
                                 T11__, T12__, stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>>>>;
  int current_statement__ = 0;
  const auto& conc = stan::math::to_ref(conc_arg__);
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    int N_edge;
    current_statement__ = 51;
    N_edge = stan::math::cols(S);
    current_statement__ = 52;
    stan::math::validate_non_negative_index("vmax", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> vmax;
    current_statement__ = 53;
    stan::model::assign(vmax,
      get_vmax_by_edge(enzyme, kcat, edge_to_enzyme, edge_type, pstream__),
      "assigning variable vmax");
    current_statement__ = 63;
    stan::math::validate_non_negative_index("reversibility", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> reversibility;
    current_statement__ = 64;
    stan::model::assign(reversibility,
      get_reversibility(dgr, temperature, S, conc, edge_type, pstream__),
      "assigning variable reversibility");
    current_statement__ = 77;
    stan::math::validate_non_negative_index("free_enzyme_ratio", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> free_enzyme_ratio;
    current_statement__ = 78;
    stan::model::assign(free_enzyme_ratio,
      get_free_enzyme_ratio(conc, S, km, ki, edge_type, ci_mic_ix,
        sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
        prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds, sub_by_edge_long,
        sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
        ci_ix_long, ci_ix_bounds, pstream__),
      "assigning variable free_enzyme_ratio");
    current_statement__ = 113;
    stan::math::validate_non_negative_index("saturation", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> saturation;
    current_statement__ = 114;
    stan::model::assign(saturation,
      get_saturation(conc, km, free_enzyme_ratio, sub_km_ix_by_edge_long,
        sub_km_ix_by_edge_bounds, sub_by_edge_long, sub_by_edge_bounds,
        edge_type, pstream__), "assigning variable saturation");
    current_statement__ = 131;
    stan::math::validate_non_negative_index("allostery", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> allostery;
    current_statement__ = 132;
    stan::model::assign(allostery,
      get_allostery(conc, free_enzyme_ratio, tc, dc, subunits,
        allostery_ix_long, allostery_ix_bounds, allostery_type,
        allostery_mic, edge_to_tc, pstream__), "assigning variable allostery");
    current_statement__ = 155;
    stan::math::validate_non_negative_index("phosphorylation", "N_edge",
      N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> phosphorylation;
    current_statement__ = 156;
    stan::model::assign(phosphorylation,
      get_phosphorylation(kcat_pme, conc_pme, phos_ix_long, phos_ix_bounds,
        phosphorylation_type, phosphorylation_pme, subunits, pstream__),
      "assigning variable phosphorylation");
    current_statement__ = 178;
    stan::math::validate_non_negative_index("drain_by_edge", "N_edge", N_edge);
    Eigen::Matrix<local_scalar_t__,-1,1> drain_by_edge;
    current_statement__ = 179;
    stan::model::assign(drain_by_edge,
      get_drain_by_edge(drain, conc, edge_to_drain, sub_by_edge_long,
        sub_by_edge_bounds, edge_type, drain_small_conc_corrector, pstream__),
      "assigning variable drain_by_edge");
    current_statement__ = 192;
    return stan::math::elt_multiply(
             stan::math::elt_multiply(
               stan::math::elt_multiply(
                 stan::math::elt_multiply(
                   stan::math::elt_multiply(vmax, saturation), reversibility),
                 allostery), phosphorylation), drain_by_edge);
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
template <typename T0__, typename T1__, typename T2__, typename T5__,
          typename T6__, typename T7__, typename T8__, typename T9__,
          typename T10__, typename T11__, typename T12__, typename T13__,
          typename T14__, typename T15__, typename T16__, typename T17__,
          typename T18__,
          stan::require_all_t<stan::is_stan_scalar<T0__>,
                              stan::is_col_vector<T1__>,
                              stan::is_vt_not_complex<T1__>,
                              stan::is_col_vector<T2__>,
                              stan::is_vt_not_complex<T2__>,
                              stan::is_col_vector<T5__>,
                              stan::is_vt_not_complex<T5__>,
                              stan::is_col_vector<T6__>,
                              stan::is_vt_not_complex<T6__>,
                              stan::is_col_vector<T7__>,
                              stan::is_vt_not_complex<T7__>,
                              stan::is_col_vector<T8__>,
                              stan::is_vt_not_complex<T8__>,
                              stan::is_col_vector<T9__>,
                              stan::is_vt_not_complex<T9__>,
                              stan::is_col_vector<T10__>,
                              stan::is_vt_not_complex<T10__>,
                              stan::is_col_vector<T11__>,
                              stan::is_vt_not_complex<T11__>,
                              stan::is_col_vector<T12__>,
                              stan::is_vt_not_complex<T12__>,
                              stan::is_col_vector<T13__>,
                              stan::is_vt_not_complex<T13__>,
                              stan::is_col_vector<T14__>,
                              stan::is_vt_not_complex<T14__>,
                              stan::is_stan_scalar<T15__>,
                              stan::is_stan_scalar<T16__>,
                              stan::is_eigen_matrix_dynamic<T17__>,
                              stan::is_vt_not_complex<T17__>,
                              stan::is_col_vector<T18__>,
                              stan::is_vt_not_complex<T18__>>*>
Eigen::Matrix<stan::promote_args_t<T0__, stan::base_type_t<T1__>,
                stan::base_type_t<T2__>, stan::base_type_t<T5__>,
                stan::base_type_t<T6__>,
                stan::promote_args_t<stan::base_type_t<T7__>,
                  stan::base_type_t<T8__>, stan::base_type_t<T9__>,
                  stan::base_type_t<T10__>, stan::base_type_t<T11__>,
                  stan::promote_args_t<stan::base_type_t<T12__>,
                    stan::base_type_t<T13__>, stan::base_type_t<T14__>,
                    T15__, T16__,
                    stan::promote_args_t<stan::base_type_t<T17__>,
                      stan::base_type_t<T18__>>>>>,-1,1>
dbalanced_dt(const T0__& time, const T1__& current_balanced_arg__,
             const T2__& unbalanced_arg__, const std::vector<int>&
             balanced_ix, const std::vector<int>& unbalanced_ix, const T5__&
             enzyme_arg__, const T6__& dgr_arg__, const T7__& kcat_arg__,
             const T8__& km_arg__, const T9__& ki_arg__, const T10__&
             tc_arg__, const T11__& dc_arg__, const T12__& kcat_pme_arg__,
             const T13__& conc_pme_arg__, const T14__& drain_arg__,
             const T15__& temperature, const T16__&
             drain_small_conc_corrector, const T17__& S_arg__, const T18__&
             subunits_arg__, const std::vector<int>& edge_type,
             const std::vector<int>& edge_to_enzyme, const std::vector<int>&
             edge_to_drain, const std::vector<int>& ci_mic_ix,
             const std::vector<int>& sub_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& sub_km_ix_by_edge_bounds,
             const std::vector<int>& prod_km_ix_by_edge_long,
             const std::vector<std::vector<int>>& prod_km_ix_by_edge_bounds,
             const std::vector<int>& sub_by_edge_long,
             const std::vector<std::vector<int>>& sub_by_edge_bounds,
             const std::vector<int>& prod_by_edge_long,
             const std::vector<std::vector<int>>& prod_by_edge_bounds,
             const std::vector<int>& ci_ix_long,
             const std::vector<std::vector<int>>& ci_ix_bounds,
             const std::vector<int>& allostery_ix_long,
             const std::vector<std::vector<int>>& allostery_ix_bounds,
             const std::vector<int>& allostery_type, const std::vector<int>&
             allostery_mic, const std::vector<int>& edge_to_tc,
             const std::vector<int>& phosphorylation_ix_long,
             const std::vector<std::vector<int>>& phosphorylation_ix_bounds,
             const std::vector<int>& phosphorylation_type,
             const std::vector<int>& phosphorylation_pme, std::ostream*
             pstream__) {
  using local_scalar_t__ = stan::promote_args_t<T0__,
                             stan::base_type_t<T1__>,
                             stan::base_type_t<T2__>,
                             stan::base_type_t<T5__>,
                             stan::base_type_t<T6__>,
                             stan::promote_args_t<stan::base_type_t<T7__>,
                               stan::base_type_t<T8__>,
                               stan::base_type_t<T9__>,
                               stan::base_type_t<T10__>,
                               stan::base_type_t<T11__>,
                               stan::promote_args_t<stan::base_type_t<T12__>,
                                 stan::base_type_t<T13__>,
                                 stan::base_type_t<T14__>, T15__, T16__,
                                 stan::promote_args_t<stan::base_type_t<T17__>,
                                   stan::base_type_t<T18__>>>>>;
  int current_statement__ = 0;
  const auto& current_balanced = stan::math::to_ref(current_balanced_arg__);
  const auto& unbalanced = stan::math::to_ref(unbalanced_arg__);
  const auto& enzyme = stan::math::to_ref(enzyme_arg__);
  const auto& dgr = stan::math::to_ref(dgr_arg__);
  const auto& kcat = stan::math::to_ref(kcat_arg__);
  const auto& km = stan::math::to_ref(km_arg__);
  const auto& ki = stan::math::to_ref(ki_arg__);
  const auto& tc = stan::math::to_ref(tc_arg__);
  const auto& dc = stan::math::to_ref(dc_arg__);
  const auto& kcat_pme = stan::math::to_ref(kcat_pme_arg__);
  const auto& conc_pme = stan::math::to_ref(conc_pme_arg__);
  const auto& drain = stan::math::to_ref(drain_arg__);
  const auto& S = stan::math::to_ref(S_arg__);
  const auto& subunits = stan::math::to_ref(subunits_arg__);
  static constexpr bool propto__ = true;
  // suppress unused var warning
  (void) propto__;
  local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
  // suppress unused var warning
  (void) DUMMY_VAR__;
  try {
    current_statement__ = 397;
    stan::math::validate_non_negative_index("current_concentration",
      "rows(current_balanced) + rows(unbalanced)",
      (stan::math::rows(current_balanced) + stan::math::rows(unbalanced)));
    Eigen::Matrix<local_scalar_t__,-1,1> current_concentration =
      Eigen::Matrix<local_scalar_t__,-1,1>::Constant((stan::math::rows(
                                                        current_balanced) +
        stan::math::rows(unbalanced)), DUMMY_VAR__);
    current_statement__ = 399;
    stan::model::assign(current_concentration, current_balanced,
      "assigning variable current_concentration",
      stan::model::index_multi(balanced_ix));
    current_statement__ = 400;
    stan::model::assign(current_concentration, unbalanced,
      "assigning variable current_concentration",
      stan::model::index_multi(unbalanced_ix));
    current_statement__ = 401;
    stan::math::validate_non_negative_index("edge_flux", "cols(S)",
      stan::math::cols(S));
    Eigen::Matrix<local_scalar_t__,-1,1> edge_flux;
    current_statement__ = 402;
    stan::model::assign(edge_flux,
      get_edge_flux(current_concentration, enzyme, dgr, kcat, km, ki, tc, dc,
        kcat_pme, conc_pme, drain, temperature, drain_small_conc_corrector,
        S, subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
        sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
        prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds, sub_by_edge_long,
        sub_by_edge_bounds, prod_by_edge_long, prod_by_edge_bounds,
        ci_ix_long, ci_ix_bounds, allostery_ix_long, allostery_ix_bounds,
        allostery_type, allostery_mic, edge_to_tc, phosphorylation_ix_long,
        phosphorylation_ix_bounds, phosphorylation_type, phosphorylation_pme,
        pstream__), "assigning variable edge_flux");
    current_statement__ = 403;
    return stan::model::rvalue(stan::math::multiply(S, edge_flux),
             "(S * edge_flux)", stan::model::index_multi(balanced_ix));
  } catch (const std::exception& e) {
    stan::lang::rethrow_located(e, locations_array__[current_statement__]);
  }
}
class out_of_sample_model_model final : public model_base_crtp<out_of_sample_model_model> {
 private:
  int N_mic;
  int N_edge_sub;
  int N_edge_prod;
  int N_unbalanced;
  int N_metabolite;
  int N_km;
  int N_sub_km;
  int N_prod_km;
  int N_reaction;
  int N_enzyme;
  int N_drain;
  int N_edge;
  int N_allostery;
  int N_allosteric_enzyme;
  int N_phosphorylation;
  int N_pme;
  int N_competitive_inhibition;
  Eigen::Matrix<double,-1,-1> S_data__;
  std::vector<int> balanced_mic_ix;
  std::vector<int> unbalanced_mic_ix;
  std::vector<int> ci_mic_ix;
  std::vector<int> edge_type;
  std::vector<int> edge_to_enzyme;
  std::vector<int> edge_to_tc;
  std::vector<int> edge_to_drain;
  std::vector<int> edge_to_reaction;
  std::vector<int> allostery_type;
  std::vector<int> allostery_mic;
  std::vector<int> phosphorylation_type;
  std::vector<int> phosphorylation_pme;
  std::vector<int> sub_by_edge_long;
  std::vector<std::vector<int>> sub_by_edge_bounds;
  std::vector<int> prod_by_edge_long;
  std::vector<std::vector<int>> prod_by_edge_bounds;
  std::vector<int> sub_km_ix_by_edge_long;
  std::vector<std::vector<int>> sub_km_ix_by_edge_bounds;
  std::vector<int> prod_km_ix_by_edge_long;
  std::vector<std::vector<int>> prod_km_ix_by_edge_bounds;
  std::vector<int> ci_ix_long;
  std::vector<std::vector<int>> ci_ix_bounds;
  std::vector<int> allostery_ix_long;
  std::vector<std::vector<int>> allostery_ix_bounds;
  std::vector<int> phosphorylation_ix_long;
  std::vector<std::vector<int>> phosphorylation_ix_bounds;
  std::vector<int> mic_to_met;
  Eigen::Matrix<double,-1,1> water_stoichiometry_data__;
  Eigen::Matrix<double,-1,1> transported_charge_data__;
  Eigen::Matrix<double,-1,1> subunits_data__;
  int N_experiment_test;
  int N_enzyme_knockout_test;
  int N_pme_knockout_test;
  std::vector<int> enzyme_knockout_test_long;
  std::vector<std::vector<int>> enzyme_knockout_test_bounds;
  std::vector<int> pme_knockout_test_long;
  std::vector<std::vector<int>> pme_knockout_test_bounds;
  Eigen::Matrix<double,-1,1> temperature_test_data__;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> priors_conc_phos_test;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>>
    priors_conc_unbalanced_test;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>>
    priors_conc_enzyme_test;
  std::vector<std::vector<Eigen::Matrix<double,-1,1>>> priors_drain_test;
  std::vector<Eigen::Matrix<double,-1,1>> conc_init;
  double rel_tol;
  double abs_tol;
  int max_num_steps;
  int likelihood;
  double drain_small_conc_corrector;
  double timepoint;
  double initial_time;
  Eigen::Map<Eigen::Matrix<double,-1,-1>> S{nullptr, 0, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> water_stoichiometry{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> transported_charge{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> subunits{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> temperature_test{nullptr, 0};
 public:
  ~out_of_sample_model_model() {}
  out_of_sample_model_model(stan::io::var_context& context__, unsigned int
                            random_seed__ = 0, std::ostream*
                            pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "out_of_sample_model_model_namespace::out_of_sample_model_model";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__;
      pos__ = 1;
      current_statement__ = 200;
      context__.validate_dims("data initialization", "N_mic", "int",
        std::vector<size_t>{});
      N_mic = std::numeric_limits<int>::min();
      current_statement__ = 200;
      N_mic = context__.vals_i("N_mic")[(1 - 1)];
      current_statement__ = 200;
      stan::math::check_greater_or_equal(function__, "N_mic", N_mic, 1);
      current_statement__ = 201;
      context__.validate_dims("data initialization", "N_edge_sub", "int",
        std::vector<size_t>{});
      N_edge_sub = std::numeric_limits<int>::min();
      current_statement__ = 201;
      N_edge_sub = context__.vals_i("N_edge_sub")[(1 - 1)];
      current_statement__ = 201;
      stan::math::check_greater_or_equal(function__, "N_edge_sub",
        N_edge_sub, 1);
      current_statement__ = 202;
      context__.validate_dims("data initialization", "N_edge_prod", "int",
        std::vector<size_t>{});
      N_edge_prod = std::numeric_limits<int>::min();
      current_statement__ = 202;
      N_edge_prod = context__.vals_i("N_edge_prod")[(1 - 1)];
      current_statement__ = 202;
      stan::math::check_greater_or_equal(function__, "N_edge_prod",
        N_edge_prod, 1);
      current_statement__ = 203;
      context__.validate_dims("data initialization", "N_unbalanced", "int",
        std::vector<size_t>{});
      N_unbalanced = std::numeric_limits<int>::min();
      current_statement__ = 203;
      N_unbalanced = context__.vals_i("N_unbalanced")[(1 - 1)];
      current_statement__ = 203;
      stan::math::check_greater_or_equal(function__, "N_unbalanced",
        N_unbalanced, 1);
      current_statement__ = 204;
      context__.validate_dims("data initialization", "N_metabolite", "int",
        std::vector<size_t>{});
      N_metabolite = std::numeric_limits<int>::min();
      current_statement__ = 204;
      N_metabolite = context__.vals_i("N_metabolite")[(1 - 1)];
      current_statement__ = 204;
      stan::math::check_greater_or_equal(function__, "N_metabolite",
        N_metabolite, 1);
      current_statement__ = 205;
      context__.validate_dims("data initialization", "N_km", "int",
        std::vector<size_t>{});
      N_km = std::numeric_limits<int>::min();
      current_statement__ = 205;
      N_km = context__.vals_i("N_km")[(1 - 1)];
      current_statement__ = 205;
      stan::math::check_greater_or_equal(function__, "N_km", N_km, 1);
      current_statement__ = 206;
      context__.validate_dims("data initialization", "N_sub_km", "int",
        std::vector<size_t>{});
      N_sub_km = std::numeric_limits<int>::min();
      current_statement__ = 206;
      N_sub_km = context__.vals_i("N_sub_km")[(1 - 1)];
      current_statement__ = 206;
      stan::math::check_greater_or_equal(function__, "N_sub_km", N_sub_km, 1);
      current_statement__ = 207;
      context__.validate_dims("data initialization", "N_prod_km", "int",
        std::vector<size_t>{});
      N_prod_km = std::numeric_limits<int>::min();
      current_statement__ = 207;
      N_prod_km = context__.vals_i("N_prod_km")[(1 - 1)];
      current_statement__ = 207;
      stan::math::check_greater_or_equal(function__, "N_prod_km", N_prod_km,
        1);
      current_statement__ = 208;
      context__.validate_dims("data initialization", "N_reaction", "int",
        std::vector<size_t>{});
      N_reaction = std::numeric_limits<int>::min();
      current_statement__ = 208;
      N_reaction = context__.vals_i("N_reaction")[(1 - 1)];
      current_statement__ = 208;
      stan::math::check_greater_or_equal(function__, "N_reaction",
        N_reaction, 1);
      current_statement__ = 209;
      context__.validate_dims("data initialization", "N_enzyme", "int",
        std::vector<size_t>{});
      N_enzyme = std::numeric_limits<int>::min();
      current_statement__ = 209;
      N_enzyme = context__.vals_i("N_enzyme")[(1 - 1)];
      current_statement__ = 209;
      stan::math::check_greater_or_equal(function__, "N_enzyme", N_enzyme, 1);
      current_statement__ = 210;
      context__.validate_dims("data initialization", "N_drain", "int",
        std::vector<size_t>{});
      N_drain = std::numeric_limits<int>::min();
      current_statement__ = 210;
      N_drain = context__.vals_i("N_drain")[(1 - 1)];
      current_statement__ = 210;
      stan::math::check_greater_or_equal(function__, "N_drain", N_drain, 0);
      current_statement__ = 211;
      context__.validate_dims("data initialization", "N_edge", "int",
        std::vector<size_t>{});
      N_edge = std::numeric_limits<int>::min();
      current_statement__ = 211;
      N_edge = context__.vals_i("N_edge")[(1 - 1)];
      current_statement__ = 211;
      stan::math::check_greater_or_equal(function__, "N_edge", N_edge, 1);
      current_statement__ = 212;
      context__.validate_dims("data initialization", "N_allostery", "int",
        std::vector<size_t>{});
      N_allostery = std::numeric_limits<int>::min();
      current_statement__ = 212;
      N_allostery = context__.vals_i("N_allostery")[(1 - 1)];
      current_statement__ = 212;
      stan::math::check_greater_or_equal(function__, "N_allostery",
        N_allostery, 0);
      current_statement__ = 213;
      context__.validate_dims("data initialization", "N_allosteric_enzyme",
        "int", std::vector<size_t>{});
      N_allosteric_enzyme = std::numeric_limits<int>::min();
      current_statement__ = 213;
      N_allosteric_enzyme = context__.vals_i("N_allosteric_enzyme")[(1 - 1)];
      current_statement__ = 213;
      stan::math::check_greater_or_equal(function__, "N_allosteric_enzyme",
        N_allosteric_enzyme, 0);
      current_statement__ = 214;
      context__.validate_dims("data initialization", "N_phosphorylation",
        "int", std::vector<size_t>{});
      N_phosphorylation = std::numeric_limits<int>::min();
      current_statement__ = 214;
      N_phosphorylation = context__.vals_i("N_phosphorylation")[(1 - 1)];
      current_statement__ = 214;
      stan::math::check_greater_or_equal(function__, "N_phosphorylation",
        N_phosphorylation, 0);
      current_statement__ = 215;
      context__.validate_dims("data initialization", "N_pme", "int",
        std::vector<size_t>{});
      N_pme = std::numeric_limits<int>::min();
      current_statement__ = 215;
      N_pme = context__.vals_i("N_pme")[(1 - 1)];
      current_statement__ = 215;
      stan::math::check_greater_or_equal(function__, "N_pme", N_pme, 0);
      current_statement__ = 216;
      context__.validate_dims("data initialization",
        "N_competitive_inhibition", "int", std::vector<size_t>{});
      N_competitive_inhibition = std::numeric_limits<int>::min();
      current_statement__ = 216;
      N_competitive_inhibition = context__.vals_i("N_competitive_inhibition")[(1
        - 1)];
      current_statement__ = 216;
      stan::math::check_greater_or_equal(function__,
        "N_competitive_inhibition", N_competitive_inhibition, 0);
      current_statement__ = 217;
      stan::math::validate_non_negative_index("S", "N_mic", N_mic);
      current_statement__ = 218;
      stan::math::validate_non_negative_index("S", "N_edge", N_edge);
      current_statement__ = 219;
      context__.validate_dims("data initialization", "S", "double",
        std::vector<size_t>{static_cast<size_t>(N_mic),
          static_cast<size_t>(N_edge)});
      S_data__ = Eigen::Matrix<double,-1,-1>::Constant(N_mic, N_edge,
                   std::numeric_limits<double>::quiet_NaN());
      new (&S) Eigen::Map<Eigen::Matrix<double,-1,-1>>(S_data__.data(),
        N_mic, N_edge);
      {
        std::vector<local_scalar_t__> S_flat__;
        current_statement__ = 219;
        S_flat__ = context__.vals_r("S");
        current_statement__ = 219;
        pos__ = 1;
        current_statement__ = 219;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 219;
          for (int sym2__ = 1; sym2__ <= N_mic; ++sym2__) {
            current_statement__ = 219;
            stan::model::assign(S, S_flat__[(pos__ - 1)],
              "assigning variable S", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 219;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 220;
      stan::math::validate_non_negative_index("balanced_mic_ix",
        "N_mic - N_unbalanced", (N_mic - N_unbalanced));
      current_statement__ = 221;
      context__.validate_dims("data initialization", "balanced_mic_ix",
        "int",
        std::vector<size_t>{static_cast<size_t>((N_mic - N_unbalanced))});
      balanced_mic_ix = std::vector<int>((N_mic - N_unbalanced),
                          std::numeric_limits<int>::min());
      current_statement__ = 221;
      balanced_mic_ix = context__.vals_i("balanced_mic_ix");
      current_statement__ = 221;
      stan::math::check_greater_or_equal(function__, "balanced_mic_ix",
        balanced_mic_ix, 1);
      current_statement__ = 221;
      stan::math::check_less_or_equal(function__, "balanced_mic_ix",
        balanced_mic_ix, N_mic);
      current_statement__ = 222;
      stan::math::validate_non_negative_index("unbalanced_mic_ix",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 223;
      context__.validate_dims("data initialization", "unbalanced_mic_ix",
        "int", std::vector<size_t>{static_cast<size_t>(N_unbalanced)});
      unbalanced_mic_ix = std::vector<int>(N_unbalanced,
                            std::numeric_limits<int>::min());
      current_statement__ = 223;
      unbalanced_mic_ix = context__.vals_i("unbalanced_mic_ix");
      current_statement__ = 223;
      stan::math::check_greater_or_equal(function__, "unbalanced_mic_ix",
        unbalanced_mic_ix, 1);
      current_statement__ = 223;
      stan::math::check_less_or_equal(function__, "unbalanced_mic_ix",
        unbalanced_mic_ix, N_mic);
      current_statement__ = 224;
      stan::math::validate_non_negative_index("ci_mic_ix",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 225;
      context__.validate_dims("data initialization", "ci_mic_ix", "int",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      ci_mic_ix = std::vector<int>(N_competitive_inhibition,
                    std::numeric_limits<int>::min());
      current_statement__ = 225;
      ci_mic_ix = context__.vals_i("ci_mic_ix");
      current_statement__ = 225;
      stan::math::check_greater_or_equal(function__, "ci_mic_ix", ci_mic_ix,
        1);
      current_statement__ = 225;
      stan::math::check_less_or_equal(function__, "ci_mic_ix", ci_mic_ix,
        N_mic);
      current_statement__ = 226;
      stan::math::validate_non_negative_index("edge_type", "N_edge", N_edge);
      current_statement__ = 227;
      context__.validate_dims("data initialization", "edge_type", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_type = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      current_statement__ = 227;
      edge_type = context__.vals_i("edge_type");
      current_statement__ = 227;
      stan::math::check_greater_or_equal(function__, "edge_type", edge_type,
        1);
      current_statement__ = 227;
      stan::math::check_less_or_equal(function__, "edge_type", edge_type, 3);
      current_statement__ = 228;
      stan::math::validate_non_negative_index("edge_to_enzyme", "N_edge",
        N_edge);
      current_statement__ = 229;
      context__.validate_dims("data initialization", "edge_to_enzyme", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_enzyme = std::vector<int>(N_edge,
                         std::numeric_limits<int>::min());
      current_statement__ = 229;
      edge_to_enzyme = context__.vals_i("edge_to_enzyme");
      current_statement__ = 229;
      stan::math::check_greater_or_equal(function__, "edge_to_enzyme",
        edge_to_enzyme, 0);
      current_statement__ = 229;
      stan::math::check_less_or_equal(function__, "edge_to_enzyme",
        edge_to_enzyme, N_enzyme);
      current_statement__ = 230;
      stan::math::validate_non_negative_index("edge_to_tc", "N_edge", N_edge);
      current_statement__ = 231;
      context__.validate_dims("data initialization", "edge_to_tc", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_tc = std::vector<int>(N_edge, std::numeric_limits<int>::min());
      current_statement__ = 231;
      edge_to_tc = context__.vals_i("edge_to_tc");
      current_statement__ = 231;
      stan::math::check_greater_or_equal(function__, "edge_to_tc",
        edge_to_tc, 0);
      current_statement__ = 231;
      stan::math::check_less_or_equal(function__, "edge_to_tc", edge_to_tc,
        N_allostery);
      current_statement__ = 232;
      stan::math::validate_non_negative_index("edge_to_drain", "N_edge",
        N_edge);
      current_statement__ = 233;
      context__.validate_dims("data initialization", "edge_to_drain", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_drain = std::vector<int>(N_edge,
                        std::numeric_limits<int>::min());
      current_statement__ = 233;
      edge_to_drain = context__.vals_i("edge_to_drain");
      current_statement__ = 233;
      stan::math::check_greater_or_equal(function__, "edge_to_drain",
        edge_to_drain, 0);
      current_statement__ = 233;
      stan::math::check_less_or_equal(function__, "edge_to_drain",
        edge_to_drain, N_drain);
      current_statement__ = 234;
      stan::math::validate_non_negative_index("edge_to_reaction", "N_edge",
        N_edge);
      current_statement__ = 235;
      context__.validate_dims("data initialization", "edge_to_reaction",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge)});
      edge_to_reaction = std::vector<int>(N_edge,
                           std::numeric_limits<int>::min());
      current_statement__ = 235;
      edge_to_reaction = context__.vals_i("edge_to_reaction");
      current_statement__ = 235;
      stan::math::check_greater_or_equal(function__, "edge_to_reaction",
        edge_to_reaction, 0);
      current_statement__ = 235;
      stan::math::check_less_or_equal(function__, "edge_to_reaction",
        edge_to_reaction, N_reaction);
      current_statement__ = 236;
      stan::math::validate_non_negative_index("allostery_type",
        "N_allostery", N_allostery);
      current_statement__ = 237;
      context__.validate_dims("data initialization", "allostery_type", "int",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_type = std::vector<int>(N_allostery,
                         std::numeric_limits<int>::min());
      current_statement__ = 237;
      allostery_type = context__.vals_i("allostery_type");
      current_statement__ = 237;
      stan::math::check_greater_or_equal(function__, "allostery_type",
        allostery_type, 1);
      current_statement__ = 237;
      stan::math::check_less_or_equal(function__, "allostery_type",
        allostery_type, 2);
      current_statement__ = 238;
      stan::math::validate_non_negative_index("allostery_mic", "N_allostery",
        N_allostery);
      current_statement__ = 239;
      context__.validate_dims("data initialization", "allostery_mic", "int",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_mic = std::vector<int>(N_allostery,
                        std::numeric_limits<int>::min());
      current_statement__ = 239;
      allostery_mic = context__.vals_i("allostery_mic");
      current_statement__ = 239;
      stan::math::check_greater_or_equal(function__, "allostery_mic",
        allostery_mic, 1);
      current_statement__ = 239;
      stan::math::check_less_or_equal(function__, "allostery_mic",
        allostery_mic, N_mic);
      current_statement__ = 240;
      stan::math::validate_non_negative_index("phosphorylation_type",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 241;
      context__.validate_dims("data initialization", "phosphorylation_type",
        "int", std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_type = std::vector<int>(N_phosphorylation,
                               std::numeric_limits<int>::min());
      current_statement__ = 241;
      phosphorylation_type = context__.vals_i("phosphorylation_type");
      current_statement__ = 241;
      stan::math::check_greater_or_equal(function__, "phosphorylation_type",
        phosphorylation_type, 1);
      current_statement__ = 241;
      stan::math::check_less_or_equal(function__, "phosphorylation_type",
        phosphorylation_type, 2);
      current_statement__ = 242;
      stan::math::validate_non_negative_index("phosphorylation_pme",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 243;
      context__.validate_dims("data initialization", "phosphorylation_pme",
        "int", std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_pme = std::vector<int>(N_phosphorylation,
                              std::numeric_limits<int>::min());
      current_statement__ = 243;
      phosphorylation_pme = context__.vals_i("phosphorylation_pme");
      current_statement__ = 243;
      stan::math::check_greater_or_equal(function__, "phosphorylation_pme",
        phosphorylation_pme, 1);
      current_statement__ = 243;
      stan::math::check_less_or_equal(function__, "phosphorylation_pme",
        phosphorylation_pme, N_pme);
      current_statement__ = 244;
      stan::math::validate_non_negative_index("sub_by_edge_long",
        "N_edge_sub", N_edge_sub);
      current_statement__ = 245;
      context__.validate_dims("data initialization", "sub_by_edge_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge_sub)});
      sub_by_edge_long = std::vector<int>(N_edge_sub,
                           std::numeric_limits<int>::min());
      current_statement__ = 245;
      sub_by_edge_long = context__.vals_i("sub_by_edge_long");
      current_statement__ = 246;
      stan::math::validate_non_negative_index("sub_by_edge_bounds", "N_edge",
        N_edge);
      current_statement__ = 247;
      context__.validate_dims("data initialization", "sub_by_edge_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      sub_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                             std::vector<int>(2,
                               std::numeric_limits<int>::min()));
      {
        std::vector<int> sub_by_edge_bounds_flat__;
        current_statement__ = 247;
        sub_by_edge_bounds_flat__ = context__.vals_i("sub_by_edge_bounds");
        current_statement__ = 247;
        pos__ = 1;
        current_statement__ = 247;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 247;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 247;
            stan::model::assign(sub_by_edge_bounds,
              sub_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 247;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 248;
      stan::math::validate_non_negative_index("prod_by_edge_long",
        "N_edge_prod", N_edge_prod);
      current_statement__ = 249;
      context__.validate_dims("data initialization", "prod_by_edge_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_edge_prod)});
      prod_by_edge_long = std::vector<int>(N_edge_prod,
                            std::numeric_limits<int>::min());
      current_statement__ = 249;
      prod_by_edge_long = context__.vals_i("prod_by_edge_long");
      current_statement__ = 250;
      stan::math::validate_non_negative_index("prod_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 251;
      context__.validate_dims("data initialization", "prod_by_edge_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      prod_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                              std::vector<int>(2,
                                std::numeric_limits<int>::min()));
      {
        std::vector<int> prod_by_edge_bounds_flat__;
        current_statement__ = 251;
        prod_by_edge_bounds_flat__ = context__.vals_i("prod_by_edge_bounds");
        current_statement__ = 251;
        pos__ = 1;
        current_statement__ = 251;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 251;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 251;
            stan::model::assign(prod_by_edge_bounds,
              prod_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 251;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 252;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_long",
        "N_sub_km", N_sub_km);
      current_statement__ = 253;
      context__.validate_dims("data initialization",
        "sub_km_ix_by_edge_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_sub_km)});
      sub_km_ix_by_edge_long = std::vector<int>(N_sub_km,
                                 std::numeric_limits<int>::min());
      current_statement__ = 253;
      sub_km_ix_by_edge_long = context__.vals_i("sub_km_ix_by_edge_long");
      current_statement__ = 254;
      stan::math::validate_non_negative_index("sub_km_ix_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 255;
      context__.validate_dims("data initialization",
        "sub_km_ix_by_edge_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      sub_km_ix_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                                   std::vector<int>(2,
                                     std::numeric_limits<int>::min()));
      {
        std::vector<int> sub_km_ix_by_edge_bounds_flat__;
        current_statement__ = 255;
        sub_km_ix_by_edge_bounds_flat__ = context__.vals_i("sub_km_ix_by_edge_bounds");
        current_statement__ = 255;
        pos__ = 1;
        current_statement__ = 255;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 255;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 255;
            stan::model::assign(sub_km_ix_by_edge_bounds,
              sub_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable sub_km_ix_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 255;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 256;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_long",
        "N_prod_km", N_prod_km);
      current_statement__ = 257;
      context__.validate_dims("data initialization",
        "prod_km_ix_by_edge_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_prod_km)});
      prod_km_ix_by_edge_long = std::vector<int>(N_prod_km,
                                  std::numeric_limits<int>::min());
      current_statement__ = 257;
      prod_km_ix_by_edge_long = context__.vals_i("prod_km_ix_by_edge_long");
      current_statement__ = 258;
      stan::math::validate_non_negative_index("prod_km_ix_by_edge_bounds",
        "N_edge", N_edge);
      current_statement__ = 259;
      context__.validate_dims("data initialization",
        "prod_km_ix_by_edge_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      prod_km_ix_by_edge_bounds = std::vector<std::vector<int>>(N_edge,
                                    std::vector<int>(2,
                                      std::numeric_limits<int>::min()));
      {
        std::vector<int> prod_km_ix_by_edge_bounds_flat__;
        current_statement__ = 259;
        prod_km_ix_by_edge_bounds_flat__ = context__.vals_i("prod_km_ix_by_edge_bounds");
        current_statement__ = 259;
        pos__ = 1;
        current_statement__ = 259;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 259;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 259;
            stan::model::assign(prod_km_ix_by_edge_bounds,
              prod_km_ix_by_edge_bounds_flat__[(pos__ - 1)],
              "assigning variable prod_km_ix_by_edge_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 259;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 260;
      stan::math::validate_non_negative_index("ci_ix_long",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 261;
      context__.validate_dims("data initialization", "ci_ix_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      ci_ix_long = std::vector<int>(N_competitive_inhibition,
                     std::numeric_limits<int>::min());
      current_statement__ = 261;
      ci_ix_long = context__.vals_i("ci_ix_long");
      current_statement__ = 262;
      stan::math::validate_non_negative_index("ci_ix_bounds", "N_edge",
        N_edge);
      current_statement__ = 263;
      context__.validate_dims("data initialization", "ci_ix_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      ci_ix_bounds = std::vector<std::vector<int>>(N_edge,
                       std::vector<int>(2, std::numeric_limits<int>::min()));
      {
        std::vector<int> ci_ix_bounds_flat__;
        current_statement__ = 263;
        ci_ix_bounds_flat__ = context__.vals_i("ci_ix_bounds");
        current_statement__ = 263;
        pos__ = 1;
        current_statement__ = 263;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 263;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 263;
            stan::model::assign(ci_ix_bounds, ci_ix_bounds_flat__[(pos__ -
              1)], "assigning variable ci_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 263;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 264;
      stan::math::validate_non_negative_index("allostery_ix_long",
        "N_allostery", N_allostery);
      current_statement__ = 265;
      context__.validate_dims("data initialization", "allostery_ix_long",
        "int", std::vector<size_t>{static_cast<size_t>(N_allostery)});
      allostery_ix_long = std::vector<int>(N_allostery,
                            std::numeric_limits<int>::min());
      current_statement__ = 265;
      allostery_ix_long = context__.vals_i("allostery_ix_long");
      current_statement__ = 266;
      stan::math::validate_non_negative_index("allostery_ix_bounds",
        "N_edge", N_edge);
      current_statement__ = 267;
      context__.validate_dims("data initialization", "allostery_ix_bounds",
        "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      allostery_ix_bounds = std::vector<std::vector<int>>(N_edge,
                              std::vector<int>(2,
                                std::numeric_limits<int>::min()));
      {
        std::vector<int> allostery_ix_bounds_flat__;
        current_statement__ = 267;
        allostery_ix_bounds_flat__ = context__.vals_i("allostery_ix_bounds");
        current_statement__ = 267;
        pos__ = 1;
        current_statement__ = 267;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 267;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 267;
            stan::model::assign(allostery_ix_bounds,
              allostery_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable allostery_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 267;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 268;
      stan::math::validate_non_negative_index("phosphorylation_ix_long",
        "N_phosphorylation", N_phosphorylation);
      current_statement__ = 269;
      context__.validate_dims("data initialization",
        "phosphorylation_ix_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_phosphorylation)});
      phosphorylation_ix_long = std::vector<int>(N_phosphorylation,
                                  std::numeric_limits<int>::min());
      current_statement__ = 269;
      phosphorylation_ix_long = context__.vals_i("phosphorylation_ix_long");
      current_statement__ = 270;
      stan::math::validate_non_negative_index("phosphorylation_ix_bounds",
        "N_edge", N_edge);
      current_statement__ = 271;
      context__.validate_dims("data initialization",
        "phosphorylation_ix_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_edge),
          static_cast<size_t>(2)});
      phosphorylation_ix_bounds = std::vector<std::vector<int>>(N_edge,
                                    std::vector<int>(2,
                                      std::numeric_limits<int>::min()));
      {
        std::vector<int> phosphorylation_ix_bounds_flat__;
        current_statement__ = 271;
        phosphorylation_ix_bounds_flat__ = context__.vals_i("phosphorylation_ix_bounds");
        current_statement__ = 271;
        pos__ = 1;
        current_statement__ = 271;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 271;
          for (int sym2__ = 1; sym2__ <= N_edge; ++sym2__) {
            current_statement__ = 271;
            stan::model::assign(phosphorylation_ix_bounds,
              phosphorylation_ix_bounds_flat__[(pos__ - 1)],
              "assigning variable phosphorylation_ix_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 271;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 272;
      stan::math::validate_non_negative_index("mic_to_met", "N_mic", N_mic);
      current_statement__ = 273;
      context__.validate_dims("data initialization", "mic_to_met", "int",
        std::vector<size_t>{static_cast<size_t>(N_mic)});
      mic_to_met = std::vector<int>(N_mic, std::numeric_limits<int>::min());
      current_statement__ = 273;
      mic_to_met = context__.vals_i("mic_to_met");
      current_statement__ = 273;
      stan::math::check_greater_or_equal(function__, "mic_to_met",
        mic_to_met, 1);
      current_statement__ = 273;
      stan::math::check_less_or_equal(function__, "mic_to_met", mic_to_met,
        N_metabolite);
      current_statement__ = 274;
      stan::math::validate_non_negative_index("water_stoichiometry",
        "N_edge", N_edge);
      current_statement__ = 275;
      context__.validate_dims("data initialization", "water_stoichiometry",
        "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      water_stoichiometry_data__ = Eigen::Matrix<double,-1,1>::Constant(N_edge,
                                     std::numeric_limits<double>::quiet_NaN());
      new (&water_stoichiometry)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(water_stoichiometry_data__.data(),
        N_edge);
      {
        std::vector<local_scalar_t__> water_stoichiometry_flat__;
        current_statement__ = 275;
        water_stoichiometry_flat__ = context__.vals_r("water_stoichiometry");
        current_statement__ = 275;
        pos__ = 1;
        current_statement__ = 275;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 275;
          stan::model::assign(water_stoichiometry,
            water_stoichiometry_flat__[(pos__ - 1)],
            "assigning variable water_stoichiometry",
            stan::model::index_uni(sym1__));
          current_statement__ = 275;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 276;
      stan::math::validate_non_negative_index("transported_charge", "N_edge",
        N_edge);
      current_statement__ = 277;
      context__.validate_dims("data initialization", "transported_charge",
        "double", std::vector<size_t>{static_cast<size_t>(N_edge)});
      transported_charge_data__ = Eigen::Matrix<double,-1,1>::Constant(N_edge,
                                    std::numeric_limits<double>::quiet_NaN());
      new (&transported_charge)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(transported_charge_data__.data(),
        N_edge);
      {
        std::vector<local_scalar_t__> transported_charge_flat__;
        current_statement__ = 277;
        transported_charge_flat__ = context__.vals_r("transported_charge");
        current_statement__ = 277;
        pos__ = 1;
        current_statement__ = 277;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 277;
          stan::model::assign(transported_charge,
            transported_charge_flat__[(pos__ - 1)],
            "assigning variable transported_charge",
            stan::model::index_uni(sym1__));
          current_statement__ = 277;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 278;
      stan::math::validate_non_negative_index("subunits", "N_enzyme",
        N_enzyme);
      current_statement__ = 279;
      context__.validate_dims("data initialization", "subunits", "double",
        std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      subunits_data__ = Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
                          std::numeric_limits<double>::quiet_NaN());
      new (&subunits)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(subunits_data__.data(),
        N_enzyme);
      {
        std::vector<local_scalar_t__> subunits_flat__;
        current_statement__ = 279;
        subunits_flat__ = context__.vals_r("subunits");
        current_statement__ = 279;
        pos__ = 1;
        current_statement__ = 279;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 279;
          stan::model::assign(subunits, subunits_flat__[(pos__ - 1)],
            "assigning variable subunits", stan::model::index_uni(sym1__));
          current_statement__ = 279;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 279;
      stan::math::check_greater_or_equal(function__, "subunits", subunits, 1);
      current_statement__ = 280;
      context__.validate_dims("data initialization", "N_experiment_test",
        "int", std::vector<size_t>{});
      N_experiment_test = std::numeric_limits<int>::min();
      current_statement__ = 280;
      N_experiment_test = context__.vals_i("N_experiment_test")[(1 - 1)];
      current_statement__ = 280;
      stan::math::check_greater_or_equal(function__, "N_experiment_test",
        N_experiment_test, 1);
      current_statement__ = 281;
      context__.validate_dims("data initialization",
        "N_enzyme_knockout_test", "int", std::vector<size_t>{});
      N_enzyme_knockout_test = std::numeric_limits<int>::min();
      current_statement__ = 281;
      N_enzyme_knockout_test = context__.vals_i("N_enzyme_knockout_test")[(1
        - 1)];
      current_statement__ = 281;
      stan::math::check_greater_or_equal(function__,
        "N_enzyme_knockout_test", N_enzyme_knockout_test, 0);
      current_statement__ = 282;
      context__.validate_dims("data initialization", "N_pme_knockout_test",
        "int", std::vector<size_t>{});
      N_pme_knockout_test = std::numeric_limits<int>::min();
      current_statement__ = 282;
      N_pme_knockout_test = context__.vals_i("N_pme_knockout_test")[(1 - 1)];
      current_statement__ = 282;
      stan::math::check_greater_or_equal(function__, "N_pme_knockout_test",
        N_pme_knockout_test, 0);
      current_statement__ = 283;
      stan::math::validate_non_negative_index("enzyme_knockout_test_long",
        "N_enzyme_knockout_test", N_enzyme_knockout_test);
      current_statement__ = 284;
      context__.validate_dims("data initialization",
        "enzyme_knockout_test_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_enzyme_knockout_test)});
      enzyme_knockout_test_long = std::vector<int>(N_enzyme_knockout_test,
                                    std::numeric_limits<int>::min());
      current_statement__ = 284;
      enzyme_knockout_test_long = context__.vals_i("enzyme_knockout_test_long");
      current_statement__ = 284;
      stan::math::check_greater_or_equal(function__,
        "enzyme_knockout_test_long", enzyme_knockout_test_long, 0);
      current_statement__ = 284;
      stan::math::check_less_or_equal(function__,
        "enzyme_knockout_test_long", enzyme_knockout_test_long, N_enzyme);
      current_statement__ = 285;
      stan::math::validate_non_negative_index("enzyme_knockout_test_bounds",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 286;
      context__.validate_dims("data initialization",
        "enzyme_knockout_test_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(2)});
      enzyme_knockout_test_bounds = std::vector<std::vector<int>>(N_experiment_test,
                                      std::vector<int>(2,
                                        std::numeric_limits<int>::min()));
      {
        std::vector<int> enzyme_knockout_test_bounds_flat__;
        current_statement__ = 286;
        enzyme_knockout_test_bounds_flat__ = context__.vals_i("enzyme_knockout_test_bounds");
        current_statement__ = 286;
        pos__ = 1;
        current_statement__ = 286;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 286;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 286;
            stan::model::assign(enzyme_knockout_test_bounds,
              enzyme_knockout_test_bounds_flat__[(pos__ - 1)],
              "assigning variable enzyme_knockout_test_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 286;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 287;
      stan::math::validate_non_negative_index("pme_knockout_test_long",
        "N_pme_knockout_test", N_pme_knockout_test);
      current_statement__ = 288;
      context__.validate_dims("data initialization",
        "pme_knockout_test_long", "int",
        std::vector<size_t>{static_cast<size_t>(N_pme_knockout_test)});
      pme_knockout_test_long = std::vector<int>(N_pme_knockout_test,
                                 std::numeric_limits<int>::min());
      current_statement__ = 288;
      pme_knockout_test_long = context__.vals_i("pme_knockout_test_long");
      current_statement__ = 288;
      stan::math::check_greater_or_equal(function__,
        "pme_knockout_test_long", pme_knockout_test_long, 0);
      current_statement__ = 288;
      stan::math::check_less_or_equal(function__, "pme_knockout_test_long",
        pme_knockout_test_long, N_pme);
      current_statement__ = 289;
      stan::math::validate_non_negative_index("pme_knockout_test_bounds",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 290;
      context__.validate_dims("data initialization",
        "pme_knockout_test_bounds", "int",
        std::vector<size_t>{static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(2)});
      pme_knockout_test_bounds = std::vector<std::vector<int>>(N_experiment_test,
                                   std::vector<int>(2,
                                     std::numeric_limits<int>::min()));
      {
        std::vector<int> pme_knockout_test_bounds_flat__;
        current_statement__ = 290;
        pme_knockout_test_bounds_flat__ = context__.vals_i("pme_knockout_test_bounds");
        current_statement__ = 290;
        pos__ = 1;
        current_statement__ = 290;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 290;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 290;
            stan::model::assign(pme_knockout_test_bounds,
              pme_knockout_test_bounds_flat__[(pos__ - 1)],
              "assigning variable pme_knockout_test_bounds",
              stan::model::index_uni(sym2__), stan::model::index_uni(sym1__));
            current_statement__ = 290;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 291;
      stan::math::validate_non_negative_index("temperature_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 292;
      context__.validate_dims("data initialization", "temperature_test",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_test)});
      temperature_test_data__ = Eigen::Matrix<double,-1,1>::Constant(N_experiment_test,
                                  std::numeric_limits<double>::quiet_NaN());
      new (&temperature_test)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(temperature_test_data__.data(),
        N_experiment_test);
      {
        std::vector<local_scalar_t__> temperature_test_flat__;
        current_statement__ = 292;
        temperature_test_flat__ = context__.vals_r("temperature_test");
        current_statement__ = 292;
        pos__ = 1;
        current_statement__ = 292;
        for (int sym1__ = 1; sym1__ <= N_experiment_test; ++sym1__) {
          current_statement__ = 292;
          stan::model::assign(temperature_test,
            temperature_test_flat__[(pos__ - 1)],
            "assigning variable temperature_test",
            stan::model::index_uni(sym1__));
          current_statement__ = 292;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 293;
      stan::math::validate_non_negative_index("priors_conc_phos_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 294;
      stan::math::validate_non_negative_index("priors_conc_phos_test",
        "N_pme", N_pme);
      current_statement__ = 295;
      context__.validate_dims("data initialization", "priors_conc_phos_test",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_test), static_cast<size_t>(N_pme)});
      priors_conc_phos_test = std::vector<
                                std::vector<Eigen::Matrix<double,-1,1>>>(2,
                                std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
                                  Eigen::Matrix<double,-1,1>::Constant(N_pme,
                                    std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_conc_phos_test_flat__;
        current_statement__ = 295;
        priors_conc_phos_test_flat__ = context__.vals_r("priors_conc_phos_test");
        current_statement__ = 295;
        pos__ = 1;
        current_statement__ = 295;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 295;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 295;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 295;
              stan::model::assign(priors_conc_phos_test,
                priors_conc_phos_test_flat__[(pos__ - 1)],
                "assigning variable priors_conc_phos_test",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 295;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 296;
      stan::math::validate_non_negative_index("priors_conc_unbalanced_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 297;
      stan::math::validate_non_negative_index("priors_conc_unbalanced_test",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 298;
      context__.validate_dims("data initialization",
        "priors_conc_unbalanced_test", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(N_unbalanced)});
      priors_conc_unbalanced_test = std::vector<
                                      std::vector<Eigen::Matrix<double,-1,1>>>(2,
                                      std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
                                        Eigen::Matrix<double,-1,1>::Constant(N_unbalanced,
                                          std::numeric_limits<double>::quiet_NaN(
                                            ))));
      {
        std::vector<local_scalar_t__> priors_conc_unbalanced_test_flat__;
        current_statement__ = 298;
        priors_conc_unbalanced_test_flat__ = context__.vals_r("priors_conc_unbalanced_test");
        current_statement__ = 298;
        pos__ = 1;
        current_statement__ = 298;
        for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
          current_statement__ = 298;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 298;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 298;
              stan::model::assign(priors_conc_unbalanced_test,
                priors_conc_unbalanced_test_flat__[(pos__ - 1)],
                "assigning variable priors_conc_unbalanced_test",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 298;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 299;
      stan::math::validate_non_negative_index("priors_conc_enzyme_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 300;
      stan::math::validate_non_negative_index("priors_conc_enzyme_test",
        "N_enzyme", N_enzyme);
      current_statement__ = 301;
      context__.validate_dims("data initialization",
        "priors_conc_enzyme_test", "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(N_enzyme)});
      priors_conc_enzyme_test = std::vector<
                                  std::vector<Eigen::Matrix<double,-1,1>>>(2,
                                  std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
                                    Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
                                      std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_conc_enzyme_test_flat__;
        current_statement__ = 301;
        priors_conc_enzyme_test_flat__ = context__.vals_r("priors_conc_enzyme_test");
        current_statement__ = 301;
        pos__ = 1;
        current_statement__ = 301;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 301;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 301;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 301;
              stan::model::assign(priors_conc_enzyme_test,
                priors_conc_enzyme_test_flat__[(pos__ - 1)],
                "assigning variable priors_conc_enzyme_test",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 301;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 302;
      stan::math::validate_non_negative_index("priors_drain_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 303;
      stan::math::validate_non_negative_index("priors_drain_test", "N_drain",
        N_drain);
      current_statement__ = 304;
      context__.validate_dims("data initialization", "priors_drain_test",
        "double",
        std::vector<size_t>{static_cast<size_t>(2),
          static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(N_drain)});
      priors_drain_test = std::vector<
                            std::vector<Eigen::Matrix<double,-1,1>>>(2,
                            std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
                              Eigen::Matrix<double,-1,1>::Constant(N_drain,
                                std::numeric_limits<double>::quiet_NaN())));
      {
        std::vector<local_scalar_t__> priors_drain_test_flat__;
        current_statement__ = 304;
        priors_drain_test_flat__ = context__.vals_r("priors_drain_test");
        current_statement__ = 304;
        pos__ = 1;
        current_statement__ = 304;
        for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
          current_statement__ = 304;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 304;
            for (int sym3__ = 1; sym3__ <= 2; ++sym3__) {
              current_statement__ = 304;
              stan::model::assign(priors_drain_test,
                priors_drain_test_flat__[(pos__ - 1)],
                "assigning variable priors_drain_test",
                stan::model::index_uni(sym3__),
                stan::model::index_uni(sym2__),
                stan::model::index_uni(sym1__));
              current_statement__ = 304;
              pos__ = (pos__ + 1);
            }
          }
        }
      }
      current_statement__ = 305;
      stan::math::validate_non_negative_index("conc_init",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 306;
      stan::math::validate_non_negative_index("conc_init",
        "N_mic - N_unbalanced", (N_mic - N_unbalanced));
      current_statement__ = 307;
      context__.validate_dims("data initialization", "conc_init", "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_test),
          static_cast<size_t>((N_mic - N_unbalanced))});
      conc_init = std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
                    Eigen::Matrix<double,-1,1>::Constant((N_mic -
                      N_unbalanced),
                      std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> conc_init_flat__;
        current_statement__ = 307;
        conc_init_flat__ = context__.vals_r("conc_init");
        current_statement__ = 307;
        pos__ = 1;
        current_statement__ = 307;
        for (int sym1__ = 1; sym1__ <= (N_mic - N_unbalanced); ++sym1__) {
          current_statement__ = 307;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 307;
            stan::model::assign(conc_init, conc_init_flat__[(pos__ - 1)],
              "assigning variable conc_init", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 307;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 307;
      stan::math::check_greater_or_equal(function__, "conc_init", conc_init,
        0);
      current_statement__ = 308;
      context__.validate_dims("data initialization", "rel_tol", "double",
        std::vector<size_t>{});
      rel_tol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 308;
      rel_tol = context__.vals_r("rel_tol")[(1 - 1)];
      current_statement__ = 309;
      context__.validate_dims("data initialization", "abs_tol", "double",
        std::vector<size_t>{});
      abs_tol = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 309;
      abs_tol = context__.vals_r("abs_tol")[(1 - 1)];
      current_statement__ = 310;
      context__.validate_dims("data initialization", "max_num_steps", "int",
        std::vector<size_t>{});
      max_num_steps = std::numeric_limits<int>::min();
      current_statement__ = 310;
      max_num_steps = context__.vals_i("max_num_steps")[(1 - 1)];
      current_statement__ = 311;
      context__.validate_dims("data initialization", "likelihood", "int",
        std::vector<size_t>{});
      likelihood = std::numeric_limits<int>::min();
      current_statement__ = 311;
      likelihood = context__.vals_i("likelihood")[(1 - 1)];
      current_statement__ = 311;
      stan::math::check_greater_or_equal(function__, "likelihood",
        likelihood, 0);
      current_statement__ = 311;
      stan::math::check_less_or_equal(function__, "likelihood", likelihood, 1);
      current_statement__ = 312;
      context__.validate_dims("data initialization",
        "drain_small_conc_corrector", "double", std::vector<size_t>{});
      drain_small_conc_corrector = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 312;
      drain_small_conc_corrector = context__.vals_r("drain_small_conc_corrector")[(1
        - 1)];
      current_statement__ = 313;
      context__.validate_dims("data initialization", "timepoint", "double",
        std::vector<size_t>{});
      timepoint = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 313;
      timepoint = context__.vals_r("timepoint")[(1 - 1)];
      current_statement__ = 313;
      stan::math::check_greater_or_equal(function__, "timepoint", timepoint,
        0);
      current_statement__ = 314;
      initial_time = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 314;
      initial_time = 0;
      current_statement__ = 315;
      stan::math::validate_non_negative_index("km", "N_km", N_km);
      current_statement__ = 316;
      stan::math::validate_non_negative_index("ki",
        "N_competitive_inhibition", N_competitive_inhibition);
      current_statement__ = 317;
      stan::math::validate_non_negative_index("kcat", "N_enzyme", N_enzyme);
      current_statement__ = 318;
      stan::math::validate_non_negative_index("dissociation_constant",
        "N_allostery", N_allostery);
      current_statement__ = 319;
      stan::math::validate_non_negative_index("transfer_constant",
        "N_allosteric_enzyme", N_allosteric_enzyme);
      current_statement__ = 320;
      stan::math::validate_non_negative_index("kcat_pme", "N_pme", N_pme);
      current_statement__ = 321;
      stan::math::validate_non_negative_index("dgr_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 322;
      stan::math::validate_non_negative_index("dgr_test", "N_edge", N_edge);
      current_statement__ = 323;
      stan::math::validate_non_negative_index("conc_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 324;
      stan::math::validate_non_negative_index("conc_test", "N_mic", N_mic);
      current_statement__ = 325;
      stan::math::validate_non_negative_index("flux_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 326;
      stan::math::validate_non_negative_index("flux_test", "N_reaction",
        N_reaction);
      current_statement__ = 327;
      stan::math::validate_non_negative_index("conc_pme_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 328;
      stan::math::validate_non_negative_index("conc_pme_test", "N_pme", N_pme);
      current_statement__ = 329;
      stan::math::validate_non_negative_index("conc_unbalanced_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 330;
      stan::math::validate_non_negative_index("conc_unbalanced_test",
        "N_unbalanced", N_unbalanced);
      current_statement__ = 331;
      stan::math::validate_non_negative_index("conc_enzyme_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 332;
      stan::math::validate_non_negative_index("conc_enzyme_test", "N_enzyme",
        N_enzyme);
      current_statement__ = 333;
      stan::math::validate_non_negative_index("drain_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 334;
      stan::math::validate_non_negative_index("drain_test", "N_drain",
        N_drain);
      current_statement__ = 335;
      stan::math::validate_non_negative_index("free_enzyme_ratio_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 336;
      stan::math::validate_non_negative_index("free_enzyme_ratio_test",
        "N_edge", N_edge);
      current_statement__ = 337;
      stan::math::validate_non_negative_index("saturation_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 338;
      stan::math::validate_non_negative_index("saturation_test", "N_edge",
        N_edge);
      current_statement__ = 339;
      stan::math::validate_non_negative_index("allostery_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 340;
      stan::math::validate_non_negative_index("allostery_test", "N_edge",
        N_edge);
      current_statement__ = 341;
      stan::math::validate_non_negative_index("phosphorylation_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 342;
      stan::math::validate_non_negative_index("phosphorylation_test",
        "N_edge", N_edge);
      current_statement__ = 343;
      stan::math::validate_non_negative_index("reversibility_test",
        "N_experiment_test", N_experiment_test);
      current_statement__ = 344;
      stan::math::validate_non_negative_index("reversibility_test", "N_edge",
        N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = N_km + N_competitive_inhibition + N_enzyme + N_allostery
      + N_allosteric_enzyme + N_pme + (N_experiment_test * N_edge);
  }
  inline std::string model_name() const final {
    return "out_of_sample_model_model";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --O1 --include-paths=/Users/tedgro/repos/biosustain/Maud/maud/stan"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "out_of_sample_model_model_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> km;
      current_statement__ = 1;
      km = in__.template read<
             stan::conditional_var_value_t<local_scalar_t__,
               Eigen::Matrix<local_scalar_t__,-1,1>>>(N_km);
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> ki;
      current_statement__ = 2;
      ki = in__.template read<
             stan::conditional_var_value_t<local_scalar_t__,
               Eigen::Matrix<local_scalar_t__,-1,1>>>(N_competitive_inhibition);
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> kcat;
      current_statement__ = 3;
      kcat = in__.template read<
               stan::conditional_var_value_t<local_scalar_t__,
                 Eigen::Matrix<local_scalar_t__,-1,1>>>(N_enzyme);
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> dissociation_constant;
      current_statement__ = 4;
      dissociation_constant = in__.template read<
                                stan::conditional_var_value_t<local_scalar_t__,
                                  Eigen::Matrix<local_scalar_t__,-1,1>>>(N_allostery);
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> transfer_constant;
      current_statement__ = 5;
      transfer_constant = in__.template read<
                            stan::conditional_var_value_t<local_scalar_t__,
                              Eigen::Matrix<local_scalar_t__,-1,1>>>(N_allosteric_enzyme);
      stan::conditional_var_value_t<local_scalar_t__,
        Eigen::Matrix<local_scalar_t__,-1,1>> kcat_pme;
      current_statement__ = 6;
      kcat_pme = in__.template read<
                   stan::conditional_var_value_t<local_scalar_t__,
                     Eigen::Matrix<local_scalar_t__,-1,1>>>(N_pme);
      std::vector<
        stan::conditional_var_value_t<local_scalar_t__,
          Eigen::Matrix<local_scalar_t__,-1,1>>> dgr_test;
      current_statement__ = 7;
      dgr_test = in__.template read<
                   std::vector<
                     stan::conditional_var_value_t<local_scalar_t__,
                       Eigen::Matrix<local_scalar_t__,-1,1>>>>(N_experiment_test,
                   N_edge);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "out_of_sample_model_model_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      Eigen::Matrix<double,-1,1> km;
      current_statement__ = 1;
      km = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_km);
      Eigen::Matrix<double,-1,1> ki;
      current_statement__ = 2;
      ki = in__.template read<
             Eigen::Matrix<local_scalar_t__,-1,1>>(N_competitive_inhibition);
      Eigen::Matrix<double,-1,1> kcat;
      current_statement__ = 3;
      kcat = in__.template read<
               Eigen::Matrix<local_scalar_t__,-1,1>>(N_enzyme);
      Eigen::Matrix<double,-1,1> dissociation_constant;
      current_statement__ = 4;
      dissociation_constant = in__.template read<
                                Eigen::Matrix<local_scalar_t__,-1,1>>(N_allostery);
      Eigen::Matrix<double,-1,1> transfer_constant;
      current_statement__ = 5;
      transfer_constant = in__.template read<
                            Eigen::Matrix<local_scalar_t__,-1,1>>(N_allosteric_enzyme);
      Eigen::Matrix<double,-1,1> kcat_pme;
      current_statement__ = 6;
      kcat_pme = in__.template read<
                   Eigen::Matrix<local_scalar_t__,-1,1>>(N_pme);
      std::vector<Eigen::Matrix<double,-1,1>> dgr_test;
      current_statement__ = 7;
      dgr_test = in__.template read<
                   std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>>(N_experiment_test,
                   N_edge);
      out__.write(km);
      out__.write(ki);
      out__.write(kcat);
      out__.write(dissociation_constant);
      out__.write(transfer_constant);
      out__.write(kcat_pme);
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(dgr_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
      std::vector<Eigen::Matrix<double,-1,1>> conc_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_mic,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> flux_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_reaction,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_pme_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_pme,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_unbalanced_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_unbalanced,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> conc_enzyme_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_enzyme,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> drain_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_drain,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> free_enzyme_ratio_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> saturation_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> allostery_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> phosphorylation_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      std::vector<Eigen::Matrix<double,-1,1>> reversibility_test =
        std::vector<Eigen::Matrix<double,-1,1>>(N_experiment_test,
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN()));
      current_statement__ = 24;
      for (int e = 1; e <= N_experiment_test; ++e) {
        current_statement__ = 19;
        stan::model::assign(drain_test,
          stan::math::to_vector(
            stan::math::normal_rng(
              stan::model::rvalue(priors_drain_test, "priors_drain_test",
                stan::model::index_uni(1), stan::model::index_uni(e)),
              stan::model::rvalue(priors_drain_test, "priors_drain_test",
                stan::model::index_uni(2), stan::model::index_uni(e)),
              base_rng__)), "assigning variable drain_test",
          stan::model::index_uni(e));
        current_statement__ = 20;
        stan::model::assign(conc_pme_test,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_phos_test,
                  "priors_conc_phos_test", stan::model::index_uni(1),
                  stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_phos_test,
                "priors_conc_phos_test", stan::model::index_uni(2),
                stan::model::index_uni(e)), base_rng__)),
          "assigning variable conc_pme_test", stan::model::index_uni(e));
        current_statement__ = 21;
        stan::model::assign(conc_unbalanced_test,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_unbalanced_test,
                  "priors_conc_unbalanced_test", stan::model::index_uni(1),
                  stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_unbalanced_test,
                "priors_conc_unbalanced_test", stan::model::index_uni(2),
                stan::model::index_uni(e)), base_rng__)),
          "assigning variable conc_unbalanced_test",
          stan::model::index_uni(e));
        current_statement__ = 22;
        stan::model::assign(conc_enzyme_test,
          stan::math::to_vector(
            stan::math::lognormal_rng(
              stan::math::log(
                stan::model::rvalue(priors_conc_enzyme_test,
                  "priors_conc_enzyme_test", stan::model::index_uni(1),
                  stan::model::index_uni(e))),
              stan::model::rvalue(priors_conc_enzyme_test,
                "priors_conc_enzyme_test", stan::model::index_uni(2),
                stan::model::index_uni(e)), base_rng__)),
          "assigning variable conc_enzyme_test", stan::model::index_uni(e));
      }
      current_statement__ = 197;
      for (int e = 1; e <= N_experiment_test; ++e) {
        current_statement__ = 25;
        stan::model::assign(flux_test, stan::math::rep_vector(0, N_reaction),
          "assigning variable flux_test", stan::model::index_uni(e));
        current_statement__ = 26;
        stan::math::validate_non_negative_index("conc_enzyme_experiment",
          "N_enzyme", N_enzyme);
        Eigen::Matrix<double,-1,1> conc_enzyme_experiment;
        current_statement__ = 27;
        stan::model::assign(conc_enzyme_experiment,
          stan::model::rvalue(conc_enzyme_test, "conc_enzyme_test",
            stan::model::index_uni(e)),
          "assigning variable conc_enzyme_experiment");
        current_statement__ = 28;
        stan::math::validate_non_negative_index("conc_pme_experiment",
          "N_pme", N_pme);
        Eigen::Matrix<double,-1,1> conc_pme_experiment;
        current_statement__ = 29;
        stan::model::assign(conc_pme_experiment,
          stan::model::rvalue(conc_pme_test, "conc_pme_test",
            stan::model::index_uni(e)),
          "assigning variable conc_pme_experiment");
        current_statement__ = 30;
        stan::math::validate_non_negative_index("conc_balanced_experiment",
          "N_mic - N_unbalanced", (N_mic - N_unbalanced));
        std::vector<Eigen::Matrix<double,-1,1>> conc_balanced_experiment =
          std::vector<Eigen::Matrix<double,-1,1>>(1,
            Eigen::Matrix<double,-1,1>::Constant((N_mic - N_unbalanced),
              std::numeric_limits<double>::quiet_NaN()));
        int N_eko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym431__;
        {
          current_statement__ = 33;
          inline_measure_ragged_return_sym431__ = ((stan::model::rvalue(
                                                      enzyme_knockout_test_bounds,
                                                      "enzyme_knockout_test_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(enzyme_knockout_test_bounds,
              "enzyme_knockout_test_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        int N_pko_experiment = std::numeric_limits<int>::min();
        int inline_measure_ragged_return_sym433__;
        {
          current_statement__ = 33;
          inline_measure_ragged_return_sym433__ = ((stan::model::rvalue(
                                                      pme_knockout_test_bounds,
                                                      "pme_knockout_test_bounds",
                                                      stan::model::index_uni(
                                                        e),
                                                      stan::model::index_uni(
                                                        2))
            -
            stan::model::rvalue(pme_knockout_test_bounds,
              "pme_knockout_test_bounds", stan::model::index_uni(e),
              stan::model::index_uni(1)))
            + 1);
        }
        current_statement__ = 40;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym431__, 0)) {
          current_statement__ = 35;
          stan::math::validate_non_negative_index("eko_experiment",
            "N_eko_experiment", inline_measure_ragged_return_sym431__);
          std::vector<int> eko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym431__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym435__;
          {
            current_statement__ = 37;
            stan::model::assign(inline_extract_ragged_return_sym435__,
              stan::model::rvalue(enzyme_knockout_test_long,
                "enzyme_knockout_test_long",
                stan::model::index_min_max(
                  stan::model::rvalue(enzyme_knockout_test_bounds,
                    "enzyme_knockout_test_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(1)),
                  stan::model::rvalue(enzyme_knockout_test_bounds,
                    "enzyme_knockout_test_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym435__");
          }
          current_statement__ = 38;
          stan::model::assign(conc_enzyme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym431__),
            "assigning variable conc_enzyme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym435__));
        }
        current_statement__ = 45;
        if (stan::math::logical_gt(inline_measure_ragged_return_sym433__, 0)) {
          current_statement__ = 41;
          stan::math::validate_non_negative_index("pko_experiment",
            "N_pko_experiment", inline_measure_ragged_return_sym433__);
          std::vector<int> pko_experiment =
            std::vector<int>(inline_measure_ragged_return_sym433__,
              std::numeric_limits<int>::min());
          std::vector<int> inline_extract_ragged_return_sym437__;
          {
            current_statement__ = 37;
            stan::model::assign(inline_extract_ragged_return_sym437__,
              stan::model::rvalue(pme_knockout_test_long,
                "pme_knockout_test_long",
                stan::model::index_min_max(
                  stan::model::rvalue(pme_knockout_test_bounds,
                    "pme_knockout_test_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(1)),
                  stan::model::rvalue(pme_knockout_test_bounds,
                    "pme_knockout_test_bounds", stan::model::index_uni(e),
                    stan::model::index_uni(2)))),
              "assigning variable inline_extract_ragged_return_sym437__");
          }
          current_statement__ = 43;
          stan::model::assign(conc_pme_experiment,
            stan::math::rep_vector(0, inline_measure_ragged_return_sym433__),
            "assigning variable conc_pme_experiment",
            stan::model::index_multi(inline_extract_ragged_return_sym437__));
        }
        current_statement__ = 46;
        stan::model::assign(conc_balanced_experiment,
          stan::math::ode_bdf_tol(dbalanced_dt_variadic2_functor__(),
            stan::model::rvalue(conc_init, "conc_init",
              stan::model::index_uni(e),
              stan::model::index_multi(balanced_mic_ix)), 0,
            std::vector<double>{timepoint}, rel_tol, abs_tol, max_num_steps,
            pstream__,
            stan::model::rvalue(conc_unbalanced_test, "conc_unbalanced_test",
              stan::model::index_uni(e)), balanced_mic_ix, unbalanced_mic_ix,
            conc_enzyme_experiment,
            stan::model::rvalue(dgr_test, "dgr_test",
              stan::model::index_uni(e)), kcat, km, ki, transfer_constant,
            dissociation_constant, kcat_pme, conc_pme_experiment,
            stan::model::rvalue(drain_test, "drain_test",
              stan::model::index_uni(e)),
            stan::model::rvalue(temperature_test, "temperature_test",
              stan::model::index_uni(e)), drain_small_conc_corrector, S,
            subunits, edge_type, edge_to_enzyme, edge_to_drain, ci_mic_ix,
            sub_km_ix_by_edge_long, sub_km_ix_by_edge_bounds,
            prod_km_ix_by_edge_long, prod_km_ix_by_edge_bounds,
            sub_by_edge_long, sub_by_edge_bounds, prod_by_edge_long,
            prod_by_edge_bounds, ci_ix_long, ci_ix_bounds, allostery_ix_long,
            allostery_ix_bounds, allostery_type, allostery_mic, edge_to_tc,
            phosphorylation_ix_long, phosphorylation_ix_bounds,
            phosphorylation_type, phosphorylation_pme),
          "assigning variable conc_balanced_experiment");
        current_statement__ = 47;
        stan::model::assign(conc_test,
          stan::model::rvalue(conc_balanced_experiment,
            "conc_balanced_experiment", stan::model::index_uni(1)),
          "assigning variable conc_test", stan::model::index_uni(e),
          stan::model::index_multi(balanced_mic_ix));
        current_statement__ = 48;
        stan::model::assign(conc_test,
          stan::model::rvalue(conc_unbalanced_test, "conc_unbalanced_test",
            stan::model::index_uni(e)), "assigning variable conc_test",
          stan::model::index_uni(e),
          stan::model::index_multi(unbalanced_mic_ix));
        current_statement__ = 49;
        stan::math::validate_non_negative_index("edge_flux", "N_edge", N_edge);
        Eigen::Matrix<double,-1,1> edge_flux =
          Eigen::Matrix<double,-1,1>::Constant(N_edge,
            std::numeric_limits<double>::quiet_NaN());
        Eigen::Matrix<double,-1,1> inline_get_edge_flux_return_sym439__;
        {
          int inline_get_edge_flux_N_edge_sym440__;
          current_statement__ = 51;
          inline_get_edge_flux_N_edge_sym440__ = stan::math::cols(S);
          current_statement__ = 52;
          stan::math::validate_non_negative_index("vmax", "N_edge",
            inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_vmax_sym441__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym442__;
          {
            int
              inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym443__;
            current_statement__ = 54;
            inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym443__ =
              stan::math::size(edge_to_enzyme);
            current_statement__ = 55;
            stan::math::validate_non_negative_index("out", "N_edge",
              inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym443__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__;
            current_statement__ = 56;
            stan::model::assign(
              inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__,
              stan::math::rep_vector(1,
                inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym443__),
              "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__");
            current_statement__ = 61;
            for (int
                   inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__ =
                   1; inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__
                 <=
                 inline_get_edge_flux_inline_get_vmax_by_edge_N_edge_sym46___sym443__; ++inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__) {
              current_statement__ = 59;
              if (stan::math::logical_neq(
                    edge_type[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__
                    - 1)], 3)) {
                current_statement__ = 57;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__,
                  (stan::model::rvalue(conc_enzyme_experiment,
                     "conc_enzyme_experiment",
                     stan::model::index_uni(
                       edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__
                       - 1)])) *
                  stan::model::rvalue(kcat, "kcat",
                    stan::model::index_uni(
                      edge_to_enzyme[(inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__
                      - 1)]))),
                  "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_vmax_by_edge_f_sym48___sym445__));
              }
            }
            current_statement__ = 62;
            stan::model::assign(
              inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym442__,
              inline_get_edge_flux_inline_get_vmax_by_edge_out_sym47___sym444__,
              "assigning variable inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym442__");
          }
          current_statement__ = 63;
          stan::math::validate_non_negative_index("reversibility", "N_edge",
            inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_reversibility_sym446__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_reversibility_return_sym50___sym447__;
          {
            local_scalar_t__
              inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym448__;
            current_statement__ = 65;
            inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym448__ = (0.008314
              *
              stan::model::rvalue(temperature_test, "temperature_test",
                stan::model::index_uni(e)));
            int
              inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__;
            current_statement__ = 66;
            inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__ =
              stan::math::cols(S);
            current_statement__ = 67;
            stan::math::validate_non_negative_index("reaction_quotient",
              "N_edge",
              inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym450__;
            current_statement__ = 68;
            stan::model::assign(
              inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym450__,
              stan::math::multiply(stan::math::transpose(S),
                stan::math::log(
                  stan::model::rvalue(conc_test, "conc_test",
                    stan::model::index_uni(e)))),
              "assigning variable inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym450__");
            current_statement__ = 69;
            stan::math::validate_non_negative_index("out", "N_edge",
              inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__,
                DUMMY_VAR__);
            current_statement__ = 75;
            for (int
                   inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__ =
                   1; inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__
                 <=
                 inline_get_edge_flux_inline_get_reversibility_N_edge_sym52___sym449__; ++inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__) {
              current_statement__ = 73;
              if (stan::math::logical_eq(
                    edge_type[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__
                    - 1)], 1)) {
                current_statement__ = 72;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__,
                  (1 -
                  stan::math::exp(
                    (stan::math::fma(
                       inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym448__,
                       inline_get_edge_flux_inline_get_reversibility_reaction_quotient_sym53___sym450__[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__
                       - 1)],
                       stan::model::rvalue(dgr_test, "dgr_test",
                         stan::model::index_uni(e))[(inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__
                       - 1)]) /
                    inline_get_edge_flux_inline_get_reversibility_RT_sym51___sym448__))),
                  "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__));
              } else {
                current_statement__ = 71;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__,
                  1,
                  "assigning variable inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_reversibility_f_sym55___sym452__));
              }
            }
            current_statement__ = 76;
            stan::model::assign(
              inline_get_edge_flux_inline_get_reversibility_return_sym50___sym447__,
              inline_get_edge_flux_inline_get_reversibility_out_sym54___sym451__,
              "assigning variable inline_get_edge_flux_inline_get_reversibility_return_sym50___sym447__");
          }
          current_statement__ = 77;
          stan::math::validate_non_negative_index("free_enzyme_ratio",
            "N_edge", inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_free_enzyme_ratio_sym453__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym454__;
          {
            int
              inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym455__;
            current_statement__ = 79;
            inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym455__ =
              stan::math::cols(S);
            current_statement__ = 80;
            stan::math::validate_non_negative_index("denom", "N_edge",
              inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym455__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym455__,
                DUMMY_VAR__);
            current_statement__ = 111;
            for (int
                   inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__ =
                   1; inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__
                 <=
                 inline_get_edge_flux_inline_get_free_enzyme_ratio_N_edge_sym58___sym455__; ++inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__) {
              current_statement__ = 85;
              if (stan::math::logical_eq(
                    edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__
                    - 1)], 3)) {
                current_statement__ = 82;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__,
                  1,
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__));
                continue;
              }
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_sub_sym60___sym457__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__ = ((
                  stan::model::rvalue(sub_by_edge_bounds,
                    "sub_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(sub_by_edge_bounds,
                    "sub_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_prod_sym62___sym459__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__ = ((
                  stan::model::rvalue(prod_by_edge_bounds,
                    "prod_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(prod_by_edge_bounds,
                    "prod_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_N_ci_sym64___sym461__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym462__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym462__ = ((
                  stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              current_statement__ = 89;
              stan::math::validate_non_negative_index("sub_ix", "N_sub",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__);
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_ix_sym66___sym463__ =
                std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym464__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym464__,
                  stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym464__");
              }
              current_statement__ = 91;
              stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__);
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_km_ix_sym68___sym465__ =
                std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym466__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym466__,
                  stan::model::rvalue(sub_km_ix_by_edge_long,
                    "sub_km_ix_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(sub_km_ix_by_edge_bounds,
                        "sub_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(sub_km_ix_by_edge_bounds,
                        "sub_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym466__");
              }
              current_statement__ = 93;
              stan::math::validate_non_negative_index("prod_ix", "N_prod",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__);
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_ix_sym70___sym467__ =
                std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym468__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym468__,
                  stan::model::rvalue(prod_by_edge_long, "prod_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(prod_by_edge_bounds,
                        "prod_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(prod_by_edge_bounds,
                        "prod_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym468__");
              }
              current_statement__ = 95;
              stan::math::validate_non_negative_index("sub_over_km", "N_sub",
                inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym469__;
              current_statement__ = 96;
              stan::model::assign(
                inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym469__,
                stan::math::elt_divide(
                  stan::model::rvalue(
                    stan::model::rvalue(conc_test, "conc_test",
                      stan::model::index_uni(e)), "conc_test[e]",
                    stan::model::index_multi(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym464__)),
                  stan::model::rvalue(km, "km",
                    stan::model::index_multi(
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym69___sym466__))),
                "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym469__");
              current_statement__ = 97;
              stan::model::assign(
                inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__,
                stan::math::prod(
                  stan::math::pow(
                    stan::math::add(
                      stan::math::rep_vector(1,
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym61___sym458__),
                      inline_get_edge_flux_inline_get_free_enzyme_ratio_sub_over_km_sym72___sym469__),
                    stan::math::fabs(
                      stan::model::rvalue(S, "S",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym67___sym464__),
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__))))),
                "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__",
                stan::model::index_uni(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__));
              current_statement__ = 104;
              if (stan::math::logical_eq(
                    edge_type[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__
                    - 1)], 1)) {
                current_statement__ = 98;
                stan::math::validate_non_negative_index("prod_km_ix",
                  "N_prod",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_km_ix_sym73___sym470__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym471__;
                {
                  current_statement__ = 37;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym471__,
                    stan::model::rvalue(prod_km_ix_by_edge_long,
                      "prod_km_ix_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(prod_km_ix_by_edge_bounds,
                          "prod_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(prod_km_ix_by_edge_bounds,
                          "prod_km_ix_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym471__");
                }
                current_statement__ = 100;
                stan::math::validate_non_negative_index("prod_over_km",
                  "N_prod",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__);
                Eigen::Matrix<local_scalar_t__,-1,1>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym472__;
                current_statement__ = 101;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym472__,
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_test, "conc_test",
                        stan::model::index_uni(e)), "conc_test[e]",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym468__)),
                    stan::model::rvalue(km, "km",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym74___sym471__))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym472__");
                current_statement__ = 102;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__,
                  (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__
                  - 1)] +
                  (stan::math::prod(
                     stan::math::pow(
                       stan::math::add(
                         stan::math::rep_vector(1,
                           inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym63___sym460__),
                         inline_get_edge_flux_inline_get_free_enzyme_ratio_prod_over_km_sym75___sym472__),
                       stan::math::fabs(
                         stan::model::rvalue(S, "S",
                           stan::model::index_multi(
                             inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym71___sym468__),
                           stan::model::index_uni(
                             inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__)))))
                  - 1)),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__));
              }
              current_statement__ = 109;
              if (stan::math::logical_gt(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym462__,
                    0)) {
                current_statement__ = 105;
                stan::math::validate_non_negative_index("ci_ix", "N_ci",
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym462__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_ci_ix_sym76___sym473__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym65___sym462__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym474__;
                {
                  current_statement__ = 37;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym474__,
                    stan::model::rvalue(ci_ix_long, "ci_ix_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym474__");
                }
                current_statement__ = 107;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__,
                  (inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__[(inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__
                  - 1)] +
                  stan::math::sum(
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_test, "conc_test",
                          stan::model::index_uni(e)), "conc_test[e]",
                        stan::model::index_multi(
                          stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                            stan::model::index_multi(
                              inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym474__)))),
                      stan::model::rvalue(ki, "ki",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym77___sym474__))))),
                  "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_free_enzyme_ratio_f_sym78___sym475__));
              }
            }
            current_statement__ = 112;
            stan::model::assign(
              inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym454__,
              stan::math::inv(
                inline_get_edge_flux_inline_get_free_enzyme_ratio_denom_sym59___sym456__),
              "assigning variable inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym454__");
          }
          current_statement__ = 113;
          stan::math::validate_non_negative_index("saturation", "N_edge",
            inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_saturation_sym476__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_saturation_return_sym80___sym477__;
          {
            int
              inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym478__;
            current_statement__ = 115;
            inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym478__ =
              stan::math::size(sub_by_edge_bounds);
            current_statement__ = 116;
            stan::math::validate_non_negative_index("prod_conc_over_km",
              "N_edge",
              inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym478__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__ =
              Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym478__,
                DUMMY_VAR__);
            current_statement__ = 129;
            for (int
                   inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__ =
                   1; inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__
                 <=
                 inline_get_edge_flux_inline_get_saturation_N_edge_sym81___sym478__; ++inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__) {
              current_statement__ = 121;
              if (stan::math::logical_eq(
                    edge_type[(inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__
                    - 1)], 3)) {
                current_statement__ = 118;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__,
                  1,
                  "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__));
                continue;
              }
              int
                inline_get_edge_flux_inline_get_saturation_N_sub_sym83___sym480__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__ = ((
                  stan::model::rvalue(sub_by_edge_bounds,
                    "sub_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(sub_by_edge_bounds,
                    "sub_by_edge_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              current_statement__ = 123;
              stan::math::validate_non_negative_index("sub_ix", "N_sub",
                inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__);
              std::vector<int>
                inline_get_edge_flux_inline_get_saturation_sub_ix_sym85___sym482__ =
                std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym483__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym483__,
                  stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(sub_by_edge_bounds,
                        "sub_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym483__");
              }
              current_statement__ = 125;
              stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
                inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__);
              std::vector<int>
                inline_get_edge_flux_inline_get_saturation_sub_km_ix_sym87___sym484__ =
                std::vector<int>(inline_get_edge_flux_inline_get_saturation_inline_measure_ragged_return_sym11___sym84___sym481__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym485__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym485__,
                  stan::model::rvalue(sub_km_ix_by_edge_long,
                    "sub_km_ix_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(sub_km_ix_by_edge_bounds,
                        "sub_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(sub_km_ix_by_edge_bounds,
                        "sub_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym485__");
              }
              current_statement__ = 127;
              stan::model::assign(
                inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__,
                stan::math::prod(
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_test, "conc_test",
                        stan::model::index_uni(e)), "conc_test[e]",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym13___sym86___sym483__)),
                    stan::model::rvalue(km, "km",
                      stan::model::index_multi(
                        inline_get_edge_flux_inline_get_saturation_inline_extract_ragged_return_sym15___sym88___sym485__)))),
                "assigning variable inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__",
                stan::model::index_uni(
                  inline_get_edge_flux_inline_get_saturation_f_sym89___sym486__));
            }
            current_statement__ = 130;
            stan::model::assign(
              inline_get_edge_flux_inline_get_saturation_return_sym80___sym477__,
              stan::math::elt_multiply(
                inline_get_edge_flux_inline_get_saturation_prod_conc_over_km_sym82___sym479__,
                inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym454__),
              "assigning variable inline_get_edge_flux_inline_get_saturation_return_sym80___sym477__");
          }
          current_statement__ = 131;
          stan::math::validate_non_negative_index("allostery", "N_edge",
            inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_allostery_sym487__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_allostery_return_sym91___sym488__;
          {
            int
              inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym489__;
            current_statement__ = 133;
            inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym489__ =
              stan::math::size(allostery_ix_bounds);
            current_statement__ = 134;
            stan::math::validate_non_negative_index("out", "N_edge",
              inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym489__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__;
            current_statement__ = 135;
            stan::model::assign(
              inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__,
              stan::math::rep_vector(1,
                inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym489__),
              "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__");
            current_statement__ = 153;
            for (int
                   inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__ =
                   1; inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__
                 <=
                 inline_get_edge_flux_inline_get_allostery_N_edge_sym92___sym489__; ++inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__) {
              int
                inline_get_edge_flux_inline_get_allostery_N_allostery_sym94___sym491__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym492__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym492__ = ((
                  stan::model::rvalue(allostery_ix_bounds,
                    "allostery_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(allostery_ix_bounds,
                    "allostery_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              current_statement__ = 139;
              if (stan::math::logical_eq(
                    inline_get_edge_flux_inline_get_allostery_inline_measure_ragged_return_sym33___sym95___sym492__,
                    0)) {
                continue;
              }
              local_scalar_t__
                inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym493__;
              current_statement__ = 140;
              inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym493__ = 1;
              local_scalar_t__
                inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym494__;
              current_statement__ = 141;
              inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym494__ = 1;
              local_scalar_t__
                inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym495__;
              current_statement__ = 142;
              inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym495__ =
                stan::model::rvalue(transfer_constant, "transfer_constant",
                  stan::model::index_uni(
                    edge_to_tc[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__
                    - 1)]));
              {
                std::vector<int>
                  inline_get_edge_flux_inline_get_allostery_sym1___sym99___sym496__;
                std::vector<int>
                  inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym497__;
                {
                  current_statement__ = 37;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym497__,
                    stan::model::rvalue(allostery_ix_long,
                      "allostery_ix_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(allostery_ix_bounds,
                          "allostery_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(allostery_ix_bounds,
                          "allostery_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym497__");
                }
                current_statement__ = 144;
                for (int
                       inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym500__ =
                       1; inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym500__
                     <=
                     stan::math::size(
                       inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym497__); ++inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym500__) {
                  int
                    inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym498__;
                  current_statement__ = 144;
                  inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym498__ = inline_get_edge_flux_inline_get_allostery_inline_extract_ragged_return_sym35___sym100___sym497__[(inline_get_edge_flux_inline_get_allostery_sym3___sym103___sym500__
                    - 1)];
                  local_scalar_t__
                    inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym499__;
                  current_statement__ = 145;
                  inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym499__ = (
                    stan::model::rvalue(
                      stan::model::rvalue(conc_test, "conc_test",
                        stan::model::index_uni(e)), "conc_test[e]",
                      stan::model::index_uni(
                        allostery_mic[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym498__
                        - 1)]))
                    /
                    dissociation_constant[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym498__
                    - 1)]);
                  current_statement__ = 150;
                  if (stan::math::logical_eq(
                        allostery_type[(inline_get_edge_flux_inline_get_allostery_allostery_sym101___sym498__
                        - 1)], 1)) {
                    current_statement__ = 148;
                    inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym494__ = (inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym494__
                      +
                      inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym499__);
                  } else {
                    current_statement__ = 146;
                    inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym493__ = (inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym493__
                      +
                      inline_get_edge_flux_inline_get_allostery_conc_over_dc_sym102___sym499__);
                  }
                }
              }
              current_statement__ = 151;
              stan::model::assign(
                inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__,
                stan::math::inv(
                  stan::math::fma(
                    inline_get_edge_flux_inline_get_allostery_tc_edge_sym98___sym495__,
                    stan::math::pow(
                      ((inline_get_edge_flux_inline_get_free_enzyme_ratio_return_sym57___sym454__[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__
                      - 1)] *
                      inline_get_edge_flux_inline_get_allostery_Q_num_sym96___sym493__)
                      /
                      inline_get_edge_flux_inline_get_allostery_Q_denom_sym97___sym494__),
                      subunits[(inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__
                      - 1)]), 1)),
                "assigning variable inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__",
                stan::model::index_uni(
                  inline_get_edge_flux_inline_get_allostery_f_sym104___sym501__));
            }
            current_statement__ = 154;
            stan::model::assign(
              inline_get_edge_flux_inline_get_allostery_return_sym91___sym488__,
              inline_get_edge_flux_inline_get_allostery_out_sym93___sym490__,
              "assigning variable inline_get_edge_flux_inline_get_allostery_return_sym91___sym488__");
          }
          current_statement__ = 155;
          stan::math::validate_non_negative_index("phosphorylation",
            "N_edge", inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_phosphorylation_sym502__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym503__;
          {
            int
              inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym504__;
            current_statement__ = 157;
            inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym504__ =
              stan::math::size(phosphorylation_ix_bounds);
            current_statement__ = 158;
            stan::math::validate_non_negative_index("out", "N_edge",
              inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym504__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__;
            current_statement__ = 159;
            stan::model::assign(
              inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__,
              stan::math::rep_vector(1,
                inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym504__),
              "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__");
            current_statement__ = 176;
            for (int
                   inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__ =
                   1; inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__
                 <=
                 inline_get_edge_flux_inline_get_phosphorylation_N_edge_sym107___sym504__; ++inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__) {
              int
                inline_get_edge_flux_inline_get_phosphorylation_N_phos_sym109___sym506__ =
                std::numeric_limits<int>::min();
              int
                inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym507__;
              {
                current_statement__ = 33;
                inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym507__ = ((
                  stan::model::rvalue(phosphorylation_ix_bounds,
                    "phosphorylation_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__),
                    stan::model::index_uni(2))
                  -
                  stan::model::rvalue(phosphorylation_ix_bounds,
                    "phosphorylation_ix_bounds",
                    stan::model::index_uni(
                      inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__),
                    stan::model::index_uni(1)))
                  + 1);
              }
              current_statement__ = 163;
              if (stan::math::logical_eq(
                    inline_get_edge_flux_inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym110___sym507__,
                    0)) {
                continue;
              }
              local_scalar_t__
                inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym508__;
              current_statement__ = 164;
              inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym508__ = 0;
              local_scalar_t__
                inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__;
              current_statement__ = 165;
              inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__ = 0;
              {
                std::vector<int>
                  inline_get_edge_flux_inline_get_phosphorylation_sym1___sym113___sym510__;
                std::vector<int>
                  inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym511__;
                {
                  current_statement__ = 37;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym511__,
                    stan::model::rvalue(phosphorylation_ix_long,
                      "phosphorylation_ix_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(phosphorylation_ix_bounds,
                          "phosphorylation_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(phosphorylation_ix_bounds,
                          "phosphorylation_ix_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym511__");
                }
                current_statement__ = 167;
                for (int
                       inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym514__ =
                       1; inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym514__
                     <=
                     stan::math::size(
                       inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym511__); ++inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym514__) {
                  int
                    inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym512__;
                  current_statement__ = 167;
                  inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym512__ = inline_get_edge_flux_inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym114___sym511__[(inline_get_edge_flux_inline_get_phosphorylation_sym3___sym117___sym514__
                    - 1)];
                  local_scalar_t__
                    inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym513__;
                  current_statement__ = 168;
                  inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym513__ = (
                    stan::model::rvalue(kcat_pme, "kcat_pme",
                      stan::model::index_uni(
                        phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym512__
                        - 1)]))
                    *
                    stan::model::rvalue(conc_pme_experiment,
                      "conc_pme_experiment",
                      stan::model::index_uni(
                        phosphorylation_pme[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym512__
                        - 1)])));
                  current_statement__ = 173;
                  if (stan::math::logical_eq(
                        phosphorylation_type[(inline_get_edge_flux_inline_get_phosphorylation_phos_sym115___sym512__
                        - 1)], 2)) {
                    current_statement__ = 171;
                    inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym508__ = (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym508__
                      +
                      inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym513__);
                  } else {
                    current_statement__ = 169;
                    inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__ = (inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__
                      +
                      inline_get_edge_flux_inline_get_phosphorylation_kcat_times_conc_sym116___sym513__);
                  }
                }
              }
              current_statement__ = 174;
              stan::model::assign(
                inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__,
                stan::math::pow(
                  (inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__
                  /
                  (inline_get_edge_flux_inline_get_phosphorylation_alpha_sym111___sym508__
                  +
                  inline_get_edge_flux_inline_get_phosphorylation_beta_sym112___sym509__)),
                  subunits[(inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__
                  - 1)]),
                "assigning variable inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__",
                stan::model::index_uni(
                  inline_get_edge_flux_inline_get_phosphorylation_f_sym118___sym515__));
            }
            current_statement__ = 177;
            stan::model::assign(
              inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym503__,
              inline_get_edge_flux_inline_get_phosphorylation_out_sym108___sym505__,
              "assigning variable inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym503__");
          }
          current_statement__ = 178;
          stan::math::validate_non_negative_index("drain_by_edge", "N_edge",
            inline_get_edge_flux_N_edge_sym440__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_edge_flux_drain_by_edge_sym516__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_edge_flux_N_edge_sym440__,
              DUMMY_VAR__);
          Eigen::Matrix<double,-1,1>
            inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym517__;
          {
            int
              inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym518__;
            current_statement__ = 180;
            inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym518__ =
              stan::math::size(edge_type);
            current_statement__ = 181;
            stan::math::validate_non_negative_index("out", "N_edge",
              inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym518__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__;
            current_statement__ = 182;
            stan::model::assign(
              inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__,
              stan::math::rep_vector(1,
                inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym518__),
              "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__");
            current_statement__ = 190;
            for (int
                   inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__ =
                   1; inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__
                 <=
                 inline_get_edge_flux_inline_get_drain_by_edge_N_edge_sym121___sym518__; ++inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__) {
              current_statement__ = 188;
              if (stan::math::logical_eq(
                    edge_type[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__
                    - 1)], 3)) {
                int
                  inline_get_edge_flux_inline_get_drain_by_edge_N_sub_sym123___sym520__ =
                  std::numeric_limits<int>::min();
                int
                  inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym521__;
                {
                  current_statement__ = 33;
                  inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym521__ = ((
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__),
                      stan::model::index_uni(2))
                    -
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__),
                      stan::model::index_uni(1)))
                    + 1);
                }
                current_statement__ = 184;
                stan::math::validate_non_negative_index("subs", "N_sub",
                  inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym521__);
                std::vector<int>
                  inline_get_edge_flux_inline_get_drain_by_edge_subs_sym125___sym522__ =
                  std::vector<int>(inline_get_edge_flux_inline_get_drain_by_edge_inline_measure_ragged_return_sym41___sym124___sym521__,
                    std::numeric_limits<int>::min());
                std::vector<int>
                  inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym523__;
                {
                  current_statement__ = 37;
                  stan::model::assign(
                    inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym523__,
                    stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                      stan::model::index_min_max(
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__),
                          stan::model::index_uni(1)),
                        stan::model::rvalue(sub_by_edge_bounds,
                          "sub_by_edge_bounds",
                          stan::model::index_uni(
                            inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__),
                          stan::model::index_uni(2)))),
                    "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym523__");
                }
                current_statement__ = 186;
                stan::model::assign(
                  inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__,
                  (stan::model::rvalue(
                     stan::model::rvalue(drain_test, "drain_test",
                       stan::model::index_uni(e)), "drain_test[e]",
                     stan::model::index_uni(
                       edge_to_drain[(inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__
                       - 1)])) *
                  stan::math::prod(
                    stan::math::elt_divide(
                      stan::model::rvalue(
                        stan::model::rvalue(conc_test, "conc_test",
                          stan::model::index_uni(e)), "conc_test[e]",
                        stan::model::index_multi(
                          inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym523__)),
                      stan::math::add(
                        stan::model::rvalue(
                          stan::model::rvalue(conc_test, "conc_test",
                            stan::model::index_uni(e)), "conc_test[e]",
                          stan::model::index_multi(
                            inline_get_edge_flux_inline_get_drain_by_edge_inline_extract_ragged_return_sym43___sym126___sym523__)),
                        drain_small_conc_corrector)))),
                  "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__",
                  stan::model::index_uni(
                    inline_get_edge_flux_inline_get_drain_by_edge_f_sym127___sym524__));
              }
            }
            current_statement__ = 191;
            stan::model::assign(
              inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym517__,
              inline_get_edge_flux_inline_get_drain_by_edge_out_sym122___sym519__,
              "assigning variable inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym517__");
          }
          current_statement__ = 192;
          stan::model::assign(inline_get_edge_flux_return_sym439__,
            stan::math::elt_multiply(
              stan::math::elt_multiply(
                stan::math::elt_multiply(
                  stan::math::elt_multiply(
                    stan::math::elt_multiply(
                      inline_get_edge_flux_inline_get_vmax_by_edge_return_sym45___sym442__,
                      inline_get_edge_flux_inline_get_saturation_return_sym80___sym477__),
                    inline_get_edge_flux_inline_get_reversibility_return_sym50___sym447__),
                  inline_get_edge_flux_inline_get_allostery_return_sym91___sym488__),
                inline_get_edge_flux_inline_get_phosphorylation_return_sym106___sym503__),
              inline_get_edge_flux_inline_get_drain_by_edge_return_sym120___sym517__),
            "assigning variable inline_get_edge_flux_return_sym439__");
        }
        current_statement__ = 195;
        for (int j = 1; j <= N_edge; ++j) {
          current_statement__ = 193;
          stan::model::assign(flux_test,
            (stan::model::rvalue(flux_test, "flux_test",
               stan::model::index_uni(e),
               stan::model::index_uni(
                 stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                   stan::model::index_uni(j)))) +
            stan::model::rvalue(inline_get_edge_flux_return_sym439__,
              "inline_get_edge_flux_return_sym439__",
              stan::model::index_uni(j))), "assigning variable flux_test",
            stan::model::index_uni(e),
            stan::model::index_uni(
              stan::model::rvalue(edge_to_reaction, "edge_to_reaction",
                stan::model::index_uni(j))));
        }
      }
      current_statement__ = 199;
      for (int e = 1; e <= N_experiment_test; ++e) {
        Eigen::Matrix<double,-1,1>
          inline_get_free_enzyme_ratio_return_sym526__;
        {
          int inline_get_free_enzyme_ratio_N_edge_sym527__;
          current_statement__ = 79;
          inline_get_free_enzyme_ratio_N_edge_sym527__ = stan::math::cols(S);
          current_statement__ = 80;
          stan::math::validate_non_negative_index("denom", "N_edge",
            inline_get_free_enzyme_ratio_N_edge_sym527__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_free_enzyme_ratio_denom_sym528__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_free_enzyme_ratio_N_edge_sym527__,
              DUMMY_VAR__);
          current_statement__ = 111;
          for (int inline_get_free_enzyme_ratio_f_sym547__ = 1; inline_get_free_enzyme_ratio_f_sym547__
               <=
               inline_get_free_enzyme_ratio_N_edge_sym527__; ++inline_get_free_enzyme_ratio_f_sym547__) {
            current_statement__ = 85;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_free_enzyme_ratio_f_sym547__ - 1)], 3)) {
              current_statement__ = 82;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym528__, 1,
                "assigning variable inline_get_free_enzyme_ratio_denom_sym528__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym547__));
              continue;
            }
            int inline_get_free_enzyme_ratio_N_sub_sym529__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__;
            {
              current_statement__ = 33;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__ = ((
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(1)))
                + 1);
            }
            int inline_get_free_enzyme_ratio_N_prod_sym531__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__;
            {
              current_statement__ = 33;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__ = ((
                stan::model::rvalue(prod_by_edge_bounds,
                  "prod_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(prod_by_edge_bounds,
                  "prod_by_edge_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(1)))
                + 1);
            }
            int inline_get_free_enzyme_ratio_N_ci_sym533__ =
              std::numeric_limits<int>::min();
            int
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym534__;
            {
              current_statement__ = 33;
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym534__ = ((
                stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                  stan::model::index_uni(
                    inline_get_free_enzyme_ratio_f_sym547__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 89;
            stan::math::validate_non_negative_index("sub_ix", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__);
            std::vector<int> inline_get_free_enzyme_ratio_sub_ix_sym535__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym536__;
            {
              current_statement__ = 37;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym536__,
                stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym536__");
            }
            current_statement__ = 91;
            stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__);
            std::vector<int>
              inline_get_free_enzyme_ratio_sub_km_ix_sym537__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym538__;
            {
              current_statement__ = 37;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym538__,
                stan::model::rvalue(sub_km_ix_by_edge_long,
                  "sub_km_ix_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym538__");
            }
            current_statement__ = 93;
            stan::math::validate_non_negative_index("prod_ix", "N_prod",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__);
            std::vector<int> inline_get_free_enzyme_ratio_prod_ix_sym539__ =
              std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym540__;
            {
              current_statement__ = 37;
              stan::model::assign(
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym540__,
                stan::model::rvalue(prod_by_edge_long, "prod_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(prod_by_edge_bounds,
                      "prod_by_edge_bounds",
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym540__");
            }
            current_statement__ = 95;
            stan::math::validate_non_negative_index("sub_over_km", "N_sub",
              inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__);
            Eigen::Matrix<local_scalar_t__,-1,1>
              inline_get_free_enzyme_ratio_sub_over_km_sym541__;
            current_statement__ = 96;
            stan::model::assign(
              inline_get_free_enzyme_ratio_sub_over_km_sym541__,
              stan::math::elt_divide(
                stan::model::rvalue(
                  stan::model::rvalue(conc_test, "conc_test",
                    stan::model::index_uni(e)), "conc_test[e]",
                  stan::model::index_multi(
                    inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym536__)),
                stan::model::rvalue(km, "km",
                  stan::model::index_multi(
                    inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym25___sym538__))),
              "assigning variable inline_get_free_enzyme_ratio_sub_over_km_sym541__");
            current_statement__ = 97;
            stan::model::assign(inline_get_free_enzyme_ratio_denom_sym528__,
              stan::math::prod(
                stan::math::pow(
                  stan::math::add(
                    stan::math::rep_vector(1,
                      inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym17___sym530__),
                    inline_get_free_enzyme_ratio_sub_over_km_sym541__),
                  stan::math::fabs(
                    stan::model::rvalue(S, "S",
                      stan::model::index_multi(
                        inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym23___sym536__),
                      stan::model::index_uni(
                        inline_get_free_enzyme_ratio_f_sym547__))))),
              "assigning variable inline_get_free_enzyme_ratio_denom_sym528__",
              stan::model::index_uni(inline_get_free_enzyme_ratio_f_sym547__));
            current_statement__ = 104;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_free_enzyme_ratio_f_sym547__ - 1)], 1)) {
              current_statement__ = 98;
              stan::math::validate_non_negative_index("prod_km_ix", "N_prod",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__);
              std::vector<int>
                inline_get_free_enzyme_ratio_prod_km_ix_sym542__ =
                std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym543__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym543__,
                  stan::model::rvalue(prod_km_ix_by_edge_long,
                    "prod_km_ix_by_edge_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(prod_km_ix_by_edge_bounds,
                        "prod_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym547__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(prod_km_ix_by_edge_bounds,
                        "prod_km_ix_by_edge_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym547__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym543__");
              }
              current_statement__ = 100;
              stan::math::validate_non_negative_index("prod_over_km",
                "N_prod",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__);
              Eigen::Matrix<local_scalar_t__,-1,1>
                inline_get_free_enzyme_ratio_prod_over_km_sym544__;
              current_statement__ = 101;
              stan::model::assign(
                inline_get_free_enzyme_ratio_prod_over_km_sym544__,
                stan::math::elt_divide(
                  stan::model::rvalue(
                    stan::model::rvalue(conc_test, "conc_test",
                      stan::model::index_uni(e)), "conc_test[e]",
                    stan::model::index_multi(
                      inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym540__)),
                  stan::model::rvalue(km, "km",
                    stan::model::index_multi(
                      inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym29___sym543__))),
                "assigning variable inline_get_free_enzyme_ratio_prod_over_km_sym544__");
              current_statement__ = 102;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym528__,
                (inline_get_free_enzyme_ratio_denom_sym528__[(inline_get_free_enzyme_ratio_f_sym547__
                - 1)] +
                (stan::math::prod(
                   stan::math::pow(
                     stan::math::add(
                       stan::math::rep_vector(1,
                         inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym19___sym532__),
                       inline_get_free_enzyme_ratio_prod_over_km_sym544__),
                     stan::math::fabs(
                       stan::model::rvalue(S, "S",
                         stan::model::index_multi(
                           inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym27___sym540__),
                         stan::model::index_uni(
                           inline_get_free_enzyme_ratio_f_sym547__))))) -
                1)),
                "assigning variable inline_get_free_enzyme_ratio_denom_sym528__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym547__));
            }
            current_statement__ = 109;
            if (stan::math::logical_gt(
                  inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym534__,
                  0)) {
              current_statement__ = 105;
              stan::math::validate_non_negative_index("ci_ix", "N_ci",
                inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym534__);
              std::vector<int> inline_get_free_enzyme_ratio_ci_ix_sym545__ =
                std::vector<int>(inline_get_free_enzyme_ratio_inline_measure_ragged_return_sym21___sym534__,
                  std::numeric_limits<int>::min());
              std::vector<int>
                inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym546__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym546__,
                  stan::model::rvalue(ci_ix_long, "ci_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym547__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(ci_ix_bounds, "ci_ix_bounds",
                        stan::model::index_uni(
                          inline_get_free_enzyme_ratio_f_sym547__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym546__");
              }
              current_statement__ = 107;
              stan::model::assign(
                inline_get_free_enzyme_ratio_denom_sym528__,
                (inline_get_free_enzyme_ratio_denom_sym528__[(inline_get_free_enzyme_ratio_f_sym547__
                - 1)] +
                stan::math::sum(
                  stan::math::elt_divide(
                    stan::model::rvalue(
                      stan::model::rvalue(conc_test, "conc_test",
                        stan::model::index_uni(e)), "conc_test[e]",
                      stan::model::index_multi(
                        stan::model::rvalue(ci_mic_ix, "ci_mic_ix",
                          stan::model::index_multi(
                            inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym546__)))),
                    stan::model::rvalue(ki, "ki",
                      stan::model::index_multi(
                        inline_get_free_enzyme_ratio_inline_extract_ragged_return_sym31___sym546__))))),
                "assigning variable inline_get_free_enzyme_ratio_denom_sym528__",
                stan::model::index_uni(
                  inline_get_free_enzyme_ratio_f_sym547__));
            }
          }
          current_statement__ = 112;
          stan::model::assign(inline_get_free_enzyme_ratio_return_sym526__,
            stan::math::inv(inline_get_free_enzyme_ratio_denom_sym528__),
            "assigning variable inline_get_free_enzyme_ratio_return_sym526__");
        }
        stan::model::assign(free_enzyme_ratio_test,
          inline_get_free_enzyme_ratio_return_sym526__,
          "assigning variable free_enzyme_ratio_test",
          stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_saturation_return_sym549__;
        {
          int inline_get_saturation_N_edge_sym550__;
          current_statement__ = 115;
          inline_get_saturation_N_edge_sym550__ = stan::math::size(
                                                    sub_by_edge_bounds);
          current_statement__ = 116;
          stan::math::validate_non_negative_index("prod_conc_over_km",
            "N_edge", inline_get_saturation_N_edge_sym550__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_saturation_prod_conc_over_km_sym551__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_saturation_N_edge_sym550__,
              DUMMY_VAR__);
          current_statement__ = 129;
          for (int inline_get_saturation_f_sym558__ = 1; inline_get_saturation_f_sym558__
               <=
               inline_get_saturation_N_edge_sym550__; ++inline_get_saturation_f_sym558__) {
            current_statement__ = 121;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_saturation_f_sym558__ - 1)], 3)) {
              current_statement__ = 118;
              stan::model::assign(
                inline_get_saturation_prod_conc_over_km_sym551__, 1,
                "assigning variable inline_get_saturation_prod_conc_over_km_sym551__",
                stan::model::index_uni(inline_get_saturation_f_sym558__));
              continue;
            }
            int inline_get_saturation_N_sub_sym552__ =
              std::numeric_limits<int>::min();
            int
              inline_get_saturation_inline_measure_ragged_return_sym11___sym553__;
            {
              current_statement__ = 33;
              inline_get_saturation_inline_measure_ragged_return_sym11___sym553__ = ((
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(inline_get_saturation_f_sym558__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(sub_by_edge_bounds, "sub_by_edge_bounds",
                  stan::model::index_uni(inline_get_saturation_f_sym558__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 123;
            stan::math::validate_non_negative_index("sub_ix", "N_sub",
              inline_get_saturation_inline_measure_ragged_return_sym11___sym553__);
            std::vector<int> inline_get_saturation_sub_ix_sym554__ =
              std::vector<int>(inline_get_saturation_inline_measure_ragged_return_sym11___sym553__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_saturation_inline_extract_ragged_return_sym13___sym555__;
            {
              current_statement__ = 37;
              stan::model::assign(
                inline_get_saturation_inline_extract_ragged_return_sym13___sym555__,
                stan::model::rvalue(sub_by_edge_long, "sub_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym558__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_by_edge_bounds,
                      "sub_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym558__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_saturation_inline_extract_ragged_return_sym13___sym555__");
            }
            current_statement__ = 125;
            stan::math::validate_non_negative_index("sub_km_ix", "N_sub",
              inline_get_saturation_inline_measure_ragged_return_sym11___sym553__);
            std::vector<int> inline_get_saturation_sub_km_ix_sym556__ =
              std::vector<int>(inline_get_saturation_inline_measure_ragged_return_sym11___sym553__,
                std::numeric_limits<int>::min());
            std::vector<int>
              inline_get_saturation_inline_extract_ragged_return_sym15___sym557__;
            {
              current_statement__ = 37;
              stan::model::assign(
                inline_get_saturation_inline_extract_ragged_return_sym15___sym557__,
                stan::model::rvalue(sub_km_ix_by_edge_long,
                  "sub_km_ix_by_edge_long",
                  stan::model::index_min_max(
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym558__),
                      stan::model::index_uni(1)),
                    stan::model::rvalue(sub_km_ix_by_edge_bounds,
                      "sub_km_ix_by_edge_bounds",
                      stan::model::index_uni(inline_get_saturation_f_sym558__),
                      stan::model::index_uni(2)))),
                "assigning variable inline_get_saturation_inline_extract_ragged_return_sym15___sym557__");
            }
            current_statement__ = 127;
            stan::model::assign(
              inline_get_saturation_prod_conc_over_km_sym551__,
              stan::math::prod(
                stan::math::elt_divide(
                  stan::model::rvalue(
                    stan::model::rvalue(conc_test, "conc_test",
                      stan::model::index_uni(e)), "conc_test[e]",
                    stan::model::index_multi(
                      inline_get_saturation_inline_extract_ragged_return_sym13___sym555__)),
                  stan::model::rvalue(km, "km",
                    stan::model::index_multi(
                      inline_get_saturation_inline_extract_ragged_return_sym15___sym557__)))),
              "assigning variable inline_get_saturation_prod_conc_over_km_sym551__",
              stan::model::index_uni(inline_get_saturation_f_sym558__));
          }
          current_statement__ = 130;
          stan::model::assign(inline_get_saturation_return_sym549__,
            stan::math::elt_multiply(
              inline_get_saturation_prod_conc_over_km_sym551__,
              stan::model::rvalue(free_enzyme_ratio_test,
                "free_enzyme_ratio_test", stan::model::index_uni(e))),
            "assigning variable inline_get_saturation_return_sym549__");
        }
        stan::model::assign(saturation_test,
          inline_get_saturation_return_sym549__,
          "assigning variable saturation_test", stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_allostery_return_sym560__;
        {
          int inline_get_allostery_N_edge_sym561__;
          current_statement__ = 133;
          inline_get_allostery_N_edge_sym561__ = stan::math::size(
                                                   allostery_ix_bounds);
          current_statement__ = 134;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_allostery_N_edge_sym561__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_allostery_out_sym562__;
          current_statement__ = 135;
          stan::model::assign(inline_get_allostery_out_sym562__,
            stan::math::rep_vector(1, inline_get_allostery_N_edge_sym561__),
            "assigning variable inline_get_allostery_out_sym562__");
          current_statement__ = 153;
          for (int inline_get_allostery_f_sym573__ = 1; inline_get_allostery_f_sym573__
               <=
               inline_get_allostery_N_edge_sym561__; ++inline_get_allostery_f_sym573__) {
            int inline_get_allostery_N_allostery_sym563__ =
              std::numeric_limits<int>::min();
            int
              inline_get_allostery_inline_measure_ragged_return_sym33___sym564__;
            {
              current_statement__ = 33;
              inline_get_allostery_inline_measure_ragged_return_sym33___sym564__ = ((
                stan::model::rvalue(allostery_ix_bounds,
                  "allostery_ix_bounds",
                  stan::model::index_uni(inline_get_allostery_f_sym573__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(allostery_ix_bounds,
                  "allostery_ix_bounds",
                  stan::model::index_uni(inline_get_allostery_f_sym573__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 139;
            if (stan::math::logical_eq(
                  inline_get_allostery_inline_measure_ragged_return_sym33___sym564__,
                  0)) {
              continue;
            }
            local_scalar_t__ inline_get_allostery_Q_num_sym565__;
            current_statement__ = 140;
            inline_get_allostery_Q_num_sym565__ = 1;
            local_scalar_t__ inline_get_allostery_Q_denom_sym566__;
            current_statement__ = 141;
            inline_get_allostery_Q_denom_sym566__ = 1;
            local_scalar_t__ inline_get_allostery_tc_edge_sym567__;
            current_statement__ = 142;
            inline_get_allostery_tc_edge_sym567__ = stan::model::rvalue(
                                                      transfer_constant,
                                                      "transfer_constant",
                                                      stan::model::index_uni(
                                                        edge_to_tc[(inline_get_allostery_f_sym573__
                                                        - 1)]));
            {
              std::vector<int> inline_get_allostery_sym1___sym568__;
              std::vector<int>
                inline_get_allostery_inline_extract_ragged_return_sym35___sym569__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_allostery_inline_extract_ragged_return_sym35___sym569__,
                  stan::model::rvalue(allostery_ix_long, "allostery_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(allostery_ix_bounds,
                        "allostery_ix_bounds",
                        stan::model::index_uni(
                          inline_get_allostery_f_sym573__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(allostery_ix_bounds,
                        "allostery_ix_bounds",
                        stan::model::index_uni(
                          inline_get_allostery_f_sym573__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_allostery_inline_extract_ragged_return_sym35___sym569__");
              }
              current_statement__ = 144;
              for (int inline_get_allostery_sym3___sym572__ = 1; inline_get_allostery_sym3___sym572__
                   <=
                   stan::math::size(
                     inline_get_allostery_inline_extract_ragged_return_sym35___sym569__); ++inline_get_allostery_sym3___sym572__) {
                int inline_get_allostery_allostery_sym570__;
                current_statement__ = 144;
                inline_get_allostery_allostery_sym570__ = inline_get_allostery_inline_extract_ragged_return_sym35___sym569__[(inline_get_allostery_sym3___sym572__
                  - 1)];
                local_scalar_t__ inline_get_allostery_conc_over_dc_sym571__;
                current_statement__ = 145;
                inline_get_allostery_conc_over_dc_sym571__ = (stan::model::rvalue(
                                                                stan::model::rvalue(
                                                                  conc_test,
                                                                  "conc_test",
                                                                  stan::model::index_uni(
                                                                    e)),
                                                                "conc_test[e]",
                                                                stan::model::index_uni(
                                                                  allostery_mic[(inline_get_allostery_allostery_sym570__
                                                                  - 1)]))
                  /
                  dissociation_constant[(inline_get_allostery_allostery_sym570__
                  - 1)]);
                current_statement__ = 150;
                if (stan::math::logical_eq(
                      allostery_type[(inline_get_allostery_allostery_sym570__
                      - 1)], 1)) {
                  current_statement__ = 148;
                  inline_get_allostery_Q_denom_sym566__ = (inline_get_allostery_Q_denom_sym566__
                    + inline_get_allostery_conc_over_dc_sym571__);
                } else {
                  current_statement__ = 146;
                  inline_get_allostery_Q_num_sym565__ = (inline_get_allostery_Q_num_sym565__
                    + inline_get_allostery_conc_over_dc_sym571__);
                }
              }
            }
            current_statement__ = 151;
            stan::model::assign(inline_get_allostery_out_sym562__,
              stan::math::inv(
                stan::math::fma(inline_get_allostery_tc_edge_sym567__,
                  stan::math::pow(
                    ((stan::model::rvalue(free_enzyme_ratio_test,
                        "free_enzyme_ratio_test", stan::model::index_uni(e))[(inline_get_allostery_f_sym573__
                    - 1)] * inline_get_allostery_Q_num_sym565__) /
                    inline_get_allostery_Q_denom_sym566__),
                    subunits[(inline_get_allostery_f_sym573__ - 1)]), 1)),
              "assigning variable inline_get_allostery_out_sym562__",
              stan::model::index_uni(inline_get_allostery_f_sym573__));
          }
          current_statement__ = 154;
          stan::model::assign(inline_get_allostery_return_sym560__,
            inline_get_allostery_out_sym562__,
            "assigning variable inline_get_allostery_return_sym560__");
        }
        stan::model::assign(allostery_test,
          inline_get_allostery_return_sym560__,
          "assigning variable allostery_test", stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_phosphorylation_return_sym575__;
        {
          int inline_get_phosphorylation_N_edge_sym576__;
          current_statement__ = 157;
          inline_get_phosphorylation_N_edge_sym576__ = stan::math::size(
                                                         phosphorylation_ix_bounds);
          current_statement__ = 158;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_phosphorylation_N_edge_sym576__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_phosphorylation_out_sym577__;
          current_statement__ = 159;
          stan::model::assign(inline_get_phosphorylation_out_sym577__,
            stan::math::rep_vector(1,
              inline_get_phosphorylation_N_edge_sym576__),
            "assigning variable inline_get_phosphorylation_out_sym577__");
          current_statement__ = 176;
          for (int inline_get_phosphorylation_f_sym587__ = 1; inline_get_phosphorylation_f_sym587__
               <=
               inline_get_phosphorylation_N_edge_sym576__; ++inline_get_phosphorylation_f_sym587__) {
            int inline_get_phosphorylation_N_phos_sym578__ =
              std::numeric_limits<int>::min();
            int
              inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym579__;
            {
              current_statement__ = 33;
              inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym579__ = ((
                stan::model::rvalue(phosphorylation_ix_bounds,
                  "phosphorylation_ix_bounds",
                  stan::model::index_uni(
                    inline_get_phosphorylation_f_sym587__),
                  stan::model::index_uni(2))
                -
                stan::model::rvalue(phosphorylation_ix_bounds,
                  "phosphorylation_ix_bounds",
                  stan::model::index_uni(
                    inline_get_phosphorylation_f_sym587__),
                  stan::model::index_uni(1)))
                + 1);
            }
            current_statement__ = 163;
            if (stan::math::logical_eq(
                  inline_get_phosphorylation_inline_measure_ragged_return_sym37___sym579__,
                  0)) {
              continue;
            }
            local_scalar_t__ inline_get_phosphorylation_alpha_sym580__;
            current_statement__ = 164;
            inline_get_phosphorylation_alpha_sym580__ = 0;
            local_scalar_t__ inline_get_phosphorylation_beta_sym581__;
            current_statement__ = 165;
            inline_get_phosphorylation_beta_sym581__ = 0;
            {
              std::vector<int> inline_get_phosphorylation_sym1___sym582__;
              std::vector<int>
                inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym583__;
              {
                current_statement__ = 37;
                stan::model::assign(
                  inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym583__,
                  stan::model::rvalue(phosphorylation_ix_long,
                    "phosphorylation_ix_long",
                    stan::model::index_min_max(
                      stan::model::rvalue(phosphorylation_ix_bounds,
                        "phosphorylation_ix_bounds",
                        stan::model::index_uni(
                          inline_get_phosphorylation_f_sym587__),
                        stan::model::index_uni(1)),
                      stan::model::rvalue(phosphorylation_ix_bounds,
                        "phosphorylation_ix_bounds",
                        stan::model::index_uni(
                          inline_get_phosphorylation_f_sym587__),
                        stan::model::index_uni(2)))),
                  "assigning variable inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym583__");
              }
              current_statement__ = 167;
              for (int inline_get_phosphorylation_sym3___sym586__ = 1; inline_get_phosphorylation_sym3___sym586__
                   <=
                   stan::math::size(
                     inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym583__); ++inline_get_phosphorylation_sym3___sym586__) {
                int inline_get_phosphorylation_phos_sym584__;
                current_statement__ = 167;
                inline_get_phosphorylation_phos_sym584__ = inline_get_phosphorylation_inline_extract_ragged_return_sym39___sym583__[(inline_get_phosphorylation_sym3___sym586__
                  - 1)];
                local_scalar_t__
                  inline_get_phosphorylation_kcat_times_conc_sym585__;
                current_statement__ = 168;
                inline_get_phosphorylation_kcat_times_conc_sym585__ = (
                  stan::model::rvalue(kcat_pme, "kcat_pme",
                    stan::model::index_uni(
                      phosphorylation_pme[(inline_get_phosphorylation_phos_sym584__
                      - 1)]))
                  *
                  stan::model::rvalue(
                    stan::model::rvalue(conc_pme_test, "conc_pme_test",
                      stan::model::index_uni(e)), "conc_pme_test[e]",
                    stan::model::index_uni(
                      phosphorylation_pme[(inline_get_phosphorylation_phos_sym584__
                      - 1)])));
                current_statement__ = 173;
                if (stan::math::logical_eq(
                      phosphorylation_type[(inline_get_phosphorylation_phos_sym584__
                      - 1)], 2)) {
                  current_statement__ = 171;
                  inline_get_phosphorylation_alpha_sym580__ = (inline_get_phosphorylation_alpha_sym580__
                    + inline_get_phosphorylation_kcat_times_conc_sym585__);
                } else {
                  current_statement__ = 169;
                  inline_get_phosphorylation_beta_sym581__ = (inline_get_phosphorylation_beta_sym581__
                    + inline_get_phosphorylation_kcat_times_conc_sym585__);
                }
              }
            }
            current_statement__ = 174;
            stan::model::assign(inline_get_phosphorylation_out_sym577__,
              stan::math::pow((inline_get_phosphorylation_beta_sym581__ /
                (inline_get_phosphorylation_alpha_sym580__ +
                inline_get_phosphorylation_beta_sym581__)),
                subunits[(inline_get_phosphorylation_f_sym587__ - 1)]),
              "assigning variable inline_get_phosphorylation_out_sym577__",
              stan::model::index_uni(inline_get_phosphorylation_f_sym587__));
          }
          current_statement__ = 177;
          stan::model::assign(inline_get_phosphorylation_return_sym575__,
            inline_get_phosphorylation_out_sym577__,
            "assigning variable inline_get_phosphorylation_return_sym575__");
        }
        stan::model::assign(phosphorylation_test,
          inline_get_phosphorylation_return_sym575__,
          "assigning variable phosphorylation_test",
          stan::model::index_uni(e));
        Eigen::Matrix<double,-1,1> inline_get_reversibility_return_sym589__;
        {
          local_scalar_t__ inline_get_reversibility_RT_sym590__;
          current_statement__ = 65;
          inline_get_reversibility_RT_sym590__ = (0.008314 *
            stan::model::rvalue(temperature_test, "temperature_test",
              stan::model::index_uni(e)));
          int inline_get_reversibility_N_edge_sym591__;
          current_statement__ = 66;
          inline_get_reversibility_N_edge_sym591__ = stan::math::cols(S);
          current_statement__ = 67;
          stan::math::validate_non_negative_index("reaction_quotient",
            "N_edge", inline_get_reversibility_N_edge_sym591__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_reversibility_reaction_quotient_sym592__;
          current_statement__ = 68;
          stan::model::assign(
            inline_get_reversibility_reaction_quotient_sym592__,
            stan::math::multiply(stan::math::transpose(S),
              stan::math::log(
                stan::model::rvalue(conc_test, "conc_test",
                  stan::model::index_uni(e)))),
            "assigning variable inline_get_reversibility_reaction_quotient_sym592__");
          current_statement__ = 69;
          stan::math::validate_non_negative_index("out", "N_edge",
            inline_get_reversibility_N_edge_sym591__);
          Eigen::Matrix<local_scalar_t__,-1,1>
            inline_get_reversibility_out_sym593__ =
            Eigen::Matrix<local_scalar_t__,-1,1>::Constant(inline_get_reversibility_N_edge_sym591__,
              DUMMY_VAR__);
          current_statement__ = 75;
          for (int inline_get_reversibility_f_sym594__ = 1; inline_get_reversibility_f_sym594__
               <=
               inline_get_reversibility_N_edge_sym591__; ++inline_get_reversibility_f_sym594__) {
            current_statement__ = 73;
            if (stan::math::logical_eq(
                  edge_type[(inline_get_reversibility_f_sym594__ - 1)], 1)) {
              current_statement__ = 72;
              stan::model::assign(inline_get_reversibility_out_sym593__, (1 -
                stan::math::exp(
                  (stan::math::fma(inline_get_reversibility_RT_sym590__,
                     inline_get_reversibility_reaction_quotient_sym592__[(inline_get_reversibility_f_sym594__
                     - 1)],
                     stan::model::rvalue(dgr_test, "dgr_test",
                       stan::model::index_uni(e))[(inline_get_reversibility_f_sym594__
                     - 1)]) / inline_get_reversibility_RT_sym590__))),
                "assigning variable inline_get_reversibility_out_sym593__",
                stan::model::index_uni(inline_get_reversibility_f_sym594__));
            } else {
              current_statement__ = 71;
              stan::model::assign(inline_get_reversibility_out_sym593__, 1,
                "assigning variable inline_get_reversibility_out_sym593__",
                stan::model::index_uni(inline_get_reversibility_f_sym594__));
            }
          }
          current_statement__ = 76;
          stan::model::assign(inline_get_reversibility_return_sym589__,
            inline_get_reversibility_out_sym593__,
            "assigning variable inline_get_reversibility_return_sym589__");
        }
        stan::model::assign(reversibility_test,
          inline_get_reversibility_return_sym589__,
          "assigning variable reversibility_test", stan::model::index_uni(e));
      }
      current_statement__ = 8;
      stan::math::check_greater_or_equal(function__, "conc_test", conc_test,
        0);
      for (int sym1__ = 1; sym1__ <= N_mic; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(conc_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_reaction; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(flux_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(conc_pme_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_unbalanced; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(conc_unbalanced_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(conc_enzyme_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_drain; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(drain_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(free_enzyme_ratio_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(saturation_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(allostery_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(phosphorylation_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          out__.write(reversibility_test[(sym2__ - 1)][(sym1__ - 1)]);
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> km;
      current_statement__ = 1;
      stan::model::assign(km,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_km),
        "assigning variable km");
      out__.write(km);
      Eigen::Matrix<local_scalar_t__,-1,1> ki;
      current_statement__ = 2;
      stan::model::assign(ki,
        in__.read<
          Eigen::Matrix<local_scalar_t__,-1,1>>(N_competitive_inhibition),
        "assigning variable ki");
      out__.write(ki);
      Eigen::Matrix<local_scalar_t__,-1,1> kcat;
      current_statement__ = 3;
      stan::model::assign(kcat,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_enzyme),
        "assigning variable kcat");
      out__.write(kcat);
      Eigen::Matrix<local_scalar_t__,-1,1> dissociation_constant;
      current_statement__ = 4;
      stan::model::assign(dissociation_constant,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_allostery),
        "assigning variable dissociation_constant");
      out__.write(dissociation_constant);
      Eigen::Matrix<local_scalar_t__,-1,1> transfer_constant;
      current_statement__ = 5;
      stan::model::assign(transfer_constant,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_allosteric_enzyme),
        "assigning variable transfer_constant");
      out__.write(transfer_constant);
      Eigen::Matrix<local_scalar_t__,-1,1> kcat_pme;
      current_statement__ = 6;
      stan::model::assign(kcat_pme,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(N_pme),
        "assigning variable kcat_pme");
      out__.write(kcat_pme);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> dgr_test =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__));
      current_statement__ = 7;
      for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
        current_statement__ = 7;
        for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
          current_statement__ = 7;
          stan::model::assign(dgr_test, in__.read<local_scalar_t__>(),
            "assigning variable dgr_test", stan::model::index_uni(sym2__),
            stan::model::index_uni(sym1__));
        }
      }
      out__.write(dgr_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "km", "double",
        std::vector<size_t>{static_cast<size_t>(N_km)});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "ki", "double",
        std::vector<size_t>{static_cast<size_t>(N_competitive_inhibition)});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "kcat", "double",
        std::vector<size_t>{static_cast<size_t>(N_enzyme)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization",
        "dissociation_constant", "double",
        std::vector<size_t>{static_cast<size_t>(N_allostery)});
      current_statement__ = 5;
      context__.validate_dims("parameter initialization",
        "transfer_constant", "double",
        std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)});
      current_statement__ = 6;
      context__.validate_dims("parameter initialization", "kcat_pme",
        "double", std::vector<size_t>{static_cast<size_t>(N_pme)});
      current_statement__ = 7;
      context__.validate_dims("parameter initialization", "dgr_test",
        "double",
        std::vector<size_t>{static_cast<size_t>(N_experiment_test),
          static_cast<size_t>(N_edge)});
      int pos__;
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__,-1,1> km =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_km, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> km_flat__;
        current_statement__ = 1;
        km_flat__ = context__.vals_r("km");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_km; ++sym1__) {
          current_statement__ = 1;
          stan::model::assign(km, km_flat__[(pos__ - 1)],
            "assigning variable km", stan::model::index_uni(sym1__));
          current_statement__ = 1;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(km);
      Eigen::Matrix<local_scalar_t__,-1,1> ki =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_competitive_inhibition,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> ki_flat__;
        current_statement__ = 2;
        ki_flat__ = context__.vals_r("ki");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_competitive_inhibition; ++sym1__) {
          current_statement__ = 2;
          stan::model::assign(ki, ki_flat__[(pos__ - 1)],
            "assigning variable ki", stan::model::index_uni(sym1__));
          current_statement__ = 2;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(ki);
      Eigen::Matrix<local_scalar_t__,-1,1> kcat =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_enzyme, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> kcat_flat__;
        current_statement__ = 3;
        kcat_flat__ = context__.vals_r("kcat");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_enzyme; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(kcat, kcat_flat__[(pos__ - 1)],
            "assigning variable kcat", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(kcat);
      Eigen::Matrix<local_scalar_t__,-1,1> dissociation_constant =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allostery,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> dissociation_constant_flat__;
        current_statement__ = 4;
        dissociation_constant_flat__ = context__.vals_r("dissociation_constant");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_allostery; ++sym1__) {
          current_statement__ = 4;
          stan::model::assign(dissociation_constant,
            dissociation_constant_flat__[(pos__ - 1)],
            "assigning variable dissociation_constant",
            stan::model::index_uni(sym1__));
          current_statement__ = 4;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(dissociation_constant);
      Eigen::Matrix<local_scalar_t__,-1,1> transfer_constant =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_allosteric_enzyme,
          DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> transfer_constant_flat__;
        current_statement__ = 5;
        transfer_constant_flat__ = context__.vals_r("transfer_constant");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_allosteric_enzyme; ++sym1__) {
          current_statement__ = 5;
          stan::model::assign(transfer_constant,
            transfer_constant_flat__[(pos__ - 1)],
            "assigning variable transfer_constant",
            stan::model::index_uni(sym1__));
          current_statement__ = 5;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(transfer_constant);
      Eigen::Matrix<local_scalar_t__,-1,1> kcat_pme =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_pme, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> kcat_pme_flat__;
        current_statement__ = 6;
        kcat_pme_flat__ = context__.vals_r("kcat_pme");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_pme; ++sym1__) {
          current_statement__ = 6;
          stan::model::assign(kcat_pme, kcat_pme_flat__[(pos__ - 1)],
            "assigning variable kcat_pme", stan::model::index_uni(sym1__));
          current_statement__ = 6;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(kcat_pme);
      std::vector<Eigen::Matrix<local_scalar_t__,-1,1>> dgr_test =
        std::vector<Eigen::Matrix<local_scalar_t__,-1,1>>(N_experiment_test,
          Eigen::Matrix<local_scalar_t__,-1,1>::Constant(N_edge, DUMMY_VAR__));
      {
        std::vector<local_scalar_t__> dgr_test_flat__;
        current_statement__ = 7;
        dgr_test_flat__ = context__.vals_r("dgr_test");
        current_statement__ = 7;
        pos__ = 1;
        current_statement__ = 7;
        for (int sym1__ = 1; sym1__ <= N_edge; ++sym1__) {
          current_statement__ = 7;
          for (int sym2__ = 1; sym2__ <= N_experiment_test; ++sym2__) {
            current_statement__ = 7;
            stan::model::assign(dgr_test, dgr_test_flat__[(pos__ - 1)],
              "assigning variable dgr_test", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 7;
            pos__ = (pos__ + 1);
          }
        }
      }
      out__.write(dgr_test);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"km", "ki", "kcat",
                "dissociation_constant", "transfer_constant", "kcat_pme",
                "dgr_test"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::string>
        temp{"conc_test", "flux_test", "conc_pme_test",
             "conc_unbalanced_test", "conc_enzyme_test", "drain_test",
             "free_enzyme_ratio_test", "saturation_test", "allostery_test",
             "phosphorylation_test", "reversibility_test"};
      names__.reserve(names__.size() + temp.size());
      names__.insert(names__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{static_cast<
                                                                    size_t>(
                                                                    N_km)},
                std::vector<size_t>{static_cast<size_t>(
                                      N_competitive_inhibition)},
                std::vector<size_t>{static_cast<size_t>(N_enzyme)},
                std::vector<size_t>{static_cast<size_t>(N_allostery)},
                std::vector<size_t>{static_cast<size_t>(N_allosteric_enzyme)},
                std::vector<size_t>{static_cast<size_t>(N_pme)},
                std::vector<size_t>{static_cast<size_t>(N_experiment_test),
                  static_cast<size_t>(N_edge)}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      std::vector<std::vector<size_t>>
        temp{std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_mic)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_reaction)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_pme)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_unbalanced)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_enzyme)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_drain)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_edge)},
             std::vector<size_t>{static_cast<size_t>(N_experiment_test),
               static_cast<size_t>(N_edge)}};
      dimss__.reserve(dimss__.size() + temp.size());
      dimss__.insert(dimss__.end(), temp.begin(), temp.end());
    }
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    for (int sym596__ = 1; sym596__ <= N_km; ++sym596__) {
      param_names__.emplace_back(std::string() + "km" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_competitive_inhibition; ++sym596__) {
      param_names__.emplace_back(std::string() + "ki" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_enzyme; ++sym596__) {
      param_names__.emplace_back(std::string() + "kcat" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_allostery; ++sym596__) {
      param_names__.emplace_back(std::string() + "dissociation_constant" +
        '.' + std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_allosteric_enzyme; ++sym596__) {
      param_names__.emplace_back(std::string() + "transfer_constant" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_pme; ++sym596__) {
      param_names__.emplace_back(std::string() + "kcat_pme" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
      for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
        param_names__.emplace_back(std::string() + "dgr_test" + '.' +
          std::to_string(sym597__) + '.' + std::to_string(sym596__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym596__ = 1; sym596__ <= N_mic; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_reaction; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "flux_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_pme; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_pme_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_unbalanced; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_unbalanced_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_enzyme; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_enzyme_test" + '.'
            + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_drain; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "drain_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "free_enzyme_ratio_test"
            + '.' + std::to_string(sym597__) + '.' +
            std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "saturation_test" + '.'
            + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "allostery_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "phosphorylation_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "reversibility_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
    }
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    for (int sym596__ = 1; sym596__ <= N_km; ++sym596__) {
      param_names__.emplace_back(std::string() + "km" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_competitive_inhibition; ++sym596__) {
      param_names__.emplace_back(std::string() + "ki" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_enzyme; ++sym596__) {
      param_names__.emplace_back(std::string() + "kcat" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_allostery; ++sym596__) {
      param_names__.emplace_back(std::string() + "dissociation_constant" +
        '.' + std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_allosteric_enzyme; ++sym596__) {
      param_names__.emplace_back(std::string() + "transfer_constant" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_pme; ++sym596__) {
      param_names__.emplace_back(std::string() + "kcat_pme" + '.' +
        std::to_string(sym596__));
    }
    for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
      for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
        param_names__.emplace_back(std::string() + "dgr_test" + '.' +
          std::to_string(sym597__) + '.' + std::to_string(sym596__));
      }
    }
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {
      for (int sym596__ = 1; sym596__ <= N_mic; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_reaction; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "flux_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_pme; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_pme_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_unbalanced; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_unbalanced_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_enzyme; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "conc_enzyme_test" + '.'
            + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_drain; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "drain_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "free_enzyme_ratio_test"
            + '.' + std::to_string(sym597__) + '.' +
            std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "saturation_test" + '.'
            + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "allostery_test" + '.' +
            std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "phosphorylation_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
      for (int sym596__ = 1; sym596__ <= N_edge; ++sym596__) {
        for (int sym597__ = 1; sym597__ <= N_experiment_test; ++sym597__) {
          param_names__.emplace_back(std::string() + "reversibility_test" +
            '.' + std::to_string(sym597__) + '.' + std::to_string(sym596__));
        }
      }
    }
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"kcat_pme\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"parameters\"},{\"name\":\"dgr_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"parameters\"},{\"name\":\"conc_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"generated_quantities\"},{\"name\":\"flux_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_pme_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_unbalanced_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_enzyme_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"drain_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"km\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_km) + "},\"block\":\"parameters\"},{\"name\":\"ki\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_competitive_inhibition) + "},\"block\":\"parameters\"},{\"name\":\"kcat\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"dissociation_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allostery) + "},\"block\":\"parameters\"},{\"name\":\"transfer_constant\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_allosteric_enzyme) + "},\"block\":\"parameters\"},{\"name\":\"kcat_pme\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "},\"block\":\"parameters\"},{\"name\":\"dgr_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"parameters\"},{\"name\":\"conc_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_mic) + "}},\"block\":\"generated_quantities\"},{\"name\":\"flux_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_reaction) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_pme_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_pme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_unbalanced_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_unbalanced) + "}},\"block\":\"generated_quantities\"},{\"name\":\"conc_enzyme_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_enzyme) + "}},\"block\":\"generated_quantities\"},{\"name\":\"drain_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_drain) + "}},\"block\":\"generated_quantities\"},{\"name\":\"free_enzyme_ratio_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"saturation_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"allostery_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"phosphorylation_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"},{\"name\":\"reversibility_test\",\"type\":{\"name\":\"array\",\"length\":" + std::to_string(N_experiment_test) + ",\"element_type\":{\"name\":\"vector\",\"length\":" + std::to_string(N_edge) + "}},\"block\":\"generated_quantities\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((N_km + N_competitive_inhibition) +
      N_enzyme) + N_allostery) + N_allosteric_enzyme) + N_pme) +
      (N_experiment_test * N_edge));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((N_experiment_test * N_mic) + (N_experiment_test *
      N_reaction)) + (N_experiment_test * N_pme)) + (N_experiment_test *
      N_unbalanced)) + (N_experiment_test * N_enzyme)) + (N_experiment_test *
      N_drain)) + (N_experiment_test * N_edge)) + (N_experiment_test *
      N_edge)) + (N_experiment_test * N_edge)) + (N_experiment_test *
      N_edge)) + (N_experiment_test * N_edge)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((((((N_km + N_competitive_inhibition) +
      N_enzyme) + N_allostery) + N_allosteric_enzyme) + N_pme) +
      (N_experiment_test * N_edge));
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities *
      ((((((((((((N_experiment_test * N_mic) + (N_experiment_test *
      N_reaction)) + (N_experiment_test * N_pme)) + (N_experiment_test *
      N_unbalanced)) + (N_experiment_test * N_enzyme)) + (N_experiment_test *
      N_drain)) + (N_experiment_test * N_edge)) + (N_experiment_test *
      N_edge)) + (N_experiment_test * N_edge)) + (N_experiment_test *
      N_edge)) + (N_experiment_test * N_edge)));
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = out_of_sample_model_model_namespace::out_of_sample_model_model;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return out_of_sample_model_model_namespace::profiles__;
}
#endif
